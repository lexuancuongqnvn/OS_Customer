//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { CookieService } from "ngx-cookie";
import { AppSession } from "../app-session/app-session";
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export class ApiBase {
    authToken = '';
    protected constructor(
        private appSession: AppSession
    ) {

    }
    setAuthToken(token: string) {
        this.authToken = token;
    }
    setDataUpload(d: any) {
        dataUploads.push(d);
    }
    deleteDataUpload_ById(id: any) {
        for (var i = 0; i < dataUploads.length; i++)
            if (dataUploads[i]['id'] == id) {
                dataUploads.splice(i, 0);
                break;
            }
    }
    clearAllDataUpload() {
        dataUploads = [];
    }
    get getDataUpload(): any {
        return dataUploads;
    }
    protected transformOptions(options: any): Promise<any> {
        // options.headers = options.headers.append('Authorization', `${this.authToken}`);
        if(this.appSession.user)
            {
                let voucher_year;
                let y = localStorage.getItem('voucherDate');
                voucher_year = y?Number(y):(new Date()).getFullYear();
                options.headers = options.headers.append('Authorization', this.appSession.user.token);
                options.headers = options.headers.append('username', this.appSession.user.username);
                options.headers = options.headers.append('code', this.appSession.user.code);
                options.headers = options.headers.append('company_code', this.appSession.user.company_code);
                options.headers = options.headers.append('voucher_year', voucher_year+'');
                options.headers = options.headers.append('voucher_code', this.appSession.getVoucherCode+'');
                options.headers = options.headers.append('language_id', this.appSession.user.language_id+'');
            }
        return Promise.resolve(options);
    }
}

@Injectable()
export class AccountService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param uSER_NAME (optional) 
     * @param pASSWORD (optional) 
     * @return Success
     */
    sYS_Account_Infomation_CheckLogin(uSER_NAME: string | null | undefined, pASSWORD: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Infomation_CheckLogin?";
        if (uSER_NAME !== undefined && uSER_NAME !== null)
            url_ += "USER_NAME=" + encodeURIComponent("" + uSER_NAME) + "&";
        if (pASSWORD !== undefined && pASSWORD !== null)
            url_ += "PASSWORD=" + encodeURIComponent("" + pASSWORD) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Infomation_CheckLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Infomation_CheckLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Infomation_CheckLogin(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Account_Search(body: SYS_Account_Group | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Search(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @return Success
     */
    sYS_Account_Info_Permission_Search(): Observable<SYS_Account_Group_Permission[]> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Info_Permission_Search";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Info_Permission_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Info_Permission_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Account_Group_Permission[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Account_Group_Permission[]>;
        }));
    }

    protected processSYS_Account_Info_Permission_Search(response: HttpResponseBase): Observable<SYS_Account_Group_Permission[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Account_Group_Permission.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Account_Group_Permission[]>(null as any);
    }

    /**
     * @param uSER_NAME (optional) 
     * @param aCCOUNT_ID (optional) 
     * @return Success
     */
    sYS_Account_Infomation_Delete(uSER_NAME: string | null | undefined, aCCOUNT_ID: number | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Infomation_Delete?";
        if (uSER_NAME !== undefined && uSER_NAME !== null)
            url_ += "USER_NAME=" + encodeURIComponent("" + uSER_NAME) + "&";
        if (aCCOUNT_ID === null)
            throw new Error("The parameter 'aCCOUNT_ID' cannot be null.");
        else if (aCCOUNT_ID !== undefined)
            url_ += "ACCOUNT_ID=" + encodeURIComponent("" + aCCOUNT_ID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Infomation_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Infomation_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Infomation_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Account_Group_Search(body: SYS_Account_Group | undefined): Observable<SYS_Account_Group[]> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Group_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Group_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Group_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Account_Group[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Account_Group[]>;
        }));
    }

    protected processSYS_Account_Group_Search(response: HttpResponseBase): Observable<SYS_Account_Group[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Account_Group.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Account_Group[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Account_Info_Search(body: SYS_Account_Infomation | undefined): Observable<SYS_Account_Infomation[]> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Info_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Info_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Info_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Account_Infomation[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Account_Infomation[]>;
        }));
    }

    protected processSYS_Account_Info_Search(response: HttpResponseBase): Observable<SYS_Account_Infomation[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Account_Infomation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Account_Infomation[]>(null as any);
    }

    /**
     * @param username (optional) 
     * @return Success
     */
    sYS_Account_Info_Search_byUser(username: string | null | undefined): Observable<SYS_Account_Infomation> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Info_Search_byUser?";
        if (username !== undefined && username !== null)
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Info_Search_byUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Info_Search_byUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Account_Infomation>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Account_Infomation>;
        }));
    }

    protected processSYS_Account_Info_Search_byUser(response: HttpResponseBase): Observable<SYS_Account_Infomation> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SYS_Account_Infomation.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Account_Infomation>(null as any);
    }

    /**
     * @param email (optional) 
     * @param code (optional) 
     * @param password (optional) 
     * @param passwordNew (optional) 
     * @param passwordNew_Confirm (optional) 
     * @return Success
     */
    sYS_Account_Infomation_UpdatePassword(email: string | null | undefined, code: number | undefined, password: string | null | undefined, passwordNew: string | null | undefined, passwordNew_Confirm: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Infomation_UpdatePassword?";
        if (email !== undefined && email !== null)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (password !== undefined && password !== null)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        if (passwordNew !== undefined && passwordNew !== null)
            url_ += "passwordNew=" + encodeURIComponent("" + passwordNew) + "&";
        if (passwordNew_Confirm !== undefined && passwordNew_Confirm !== null)
            url_ += "passwordNew_Confirm=" + encodeURIComponent("" + passwordNew_Confirm) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Infomation_UpdatePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Infomation_UpdatePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Infomation_UpdatePassword(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Account_Infomation_Update(body: SYS_Account_Infomation | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Infomation_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Infomation_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Infomation_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Infomation_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param username (optional) 
     * @param laguage (optional) 
     * @return Success
     */
    sYS_Account_Infomation_Language_Update(username: string | null | undefined, laguage: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Infomation_Language_Update?";
        if (username !== undefined && username !== null)
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        if (laguage !== undefined && laguage !== null)
            url_ += "laguage=" + encodeURIComponent("" + laguage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Infomation_Language_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Infomation_Language_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Infomation_Language_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param username (optional) 
     * @return Success
     */
    requestManagement_Search(username: string | null | undefined): Observable<RequestManagement_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Account/RequestManagement_Search?";
        if (username !== undefined && username !== null)
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRequestManagement_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestManagement_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestManagement_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestManagement_ENTITY[]>;
        }));
    }

    protected processRequestManagement_Search(response: HttpResponseBase): Observable<RequestManagement_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(RequestManagement_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestManagement_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    requestManagement_History(body: string | null | undefined): Observable<RequestManagement_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Account/RequestManagement_History";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRequestManagement_History(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestManagement_History(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestManagement_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestManagement_ENTITY[]>;
        }));
    }

    protected processRequestManagement_History(response: HttpResponseBase): Observable<RequestManagement_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(RequestManagement_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestManagement_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Account_Infomation_ForgotPassword_Inserst(body: Mail_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Infomation_ForgotPassword_Inserst";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Infomation_ForgotPassword_Inserst(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Infomation_ForgotPassword_Inserst(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Infomation_ForgotPassword_Inserst(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Account_Register(body: SYS_Account_Infomation | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Register(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Register(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Register(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Account_Group_Actions(body: SYS_Account_Group | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Group_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Group_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Group_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Group_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Account_Infomation_Insert(body: SYS_Account_Infomation | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Infomation_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Infomation_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Infomation_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Infomation_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Account_Infomation_Register_Confirm(body: SYS_Account_Infomation | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Account/SYS_Account_Infomation_Register_Confirm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Infomation_Register_Confirm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Infomation_Register_Confirm(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Account_Infomation_Register_Confirm(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class AcctionService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param userID (optional) 
     * @param tABLE_NAME (optional) 
     * @return Success
     */
    acction_Search_byTableName(userID: number | undefined, tABLE_NAME: string | null | undefined): Observable<SYS_ActionsOnTable_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Acction/Acction_Search_byTableName?";
        if (userID === null)
            throw new Error("The parameter 'userID' cannot be null.");
        else if (userID !== undefined)
            url_ += "userID=" + encodeURIComponent("" + userID) + "&";
        if (tABLE_NAME !== undefined && tABLE_NAME !== null)
            url_ += "TABLE_NAME=" + encodeURIComponent("" + tABLE_NAME) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAcction_Search_byTableName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAcction_Search_byTableName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_ActionsOnTable_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_ActionsOnTable_ENTITY[]>;
        }));
    }

    protected processAcction_Search_byTableName(response: HttpResponseBase): Observable<SYS_ActionsOnTable_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_ActionsOnTable_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_ActionsOnTable_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    acction_Search(body: SYS_ActionsOnTable_ENTITY | undefined): Observable<SYS_ActionsOnTable_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Acction/Acction_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAcction_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAcction_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_ActionsOnTable_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_ActionsOnTable_ENTITY[]>;
        }));
    }

    protected processAcction_Search(response: HttpResponseBase): Observable<SYS_ActionsOnTable_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_ActionsOnTable_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_ActionsOnTable_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    acction_V3_Search(body: SYS_ActionsOnTable_ENTITY | undefined): Observable<SYS_ActionsOnTable_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Acction/Acction_V3_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAcction_V3_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAcction_V3_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_ActionsOnTable_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_ActionsOnTable_ENTITY[]>;
        }));
    }

    protected processAcction_V3_Search(response: HttpResponseBase): Observable<SYS_ActionsOnTable_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_ActionsOnTable_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_ActionsOnTable_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    action_Permission_Search(body: SYS_ActionsOnTable_Permission_ENTITY | undefined): Observable<SYS_ActionsOnTable_Permission_ENTITY> {
        let url_ = this.baseUrl + "/api/Acction/Action_Permission_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAction_Permission_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAction_Permission_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_ActionsOnTable_Permission_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_ActionsOnTable_Permission_ENTITY>;
        }));
    }

    protected processAction_Permission_Search(response: HttpResponseBase): Observable<SYS_ActionsOnTable_Permission_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SYS_ActionsOnTable_Permission_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_ActionsOnTable_Permission_ENTITY>(null as any);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    acction_Delete_ListID(input: string[] | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Acction/Acction_Delete_ListID?";
        if (input !== undefined && input !== null)
            input && input.forEach(item => { url_ += "input=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAcction_Delete_ListID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAcction_Delete_ListID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAcction_Delete_ListID(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    acction_Update(body: SYS_ActionsOnTable_ENTITY[] | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Acction/Acction_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAcction_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAcction_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAcction_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    action_Permission_Update(body: SYS_ActionsOnTable_Permission_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Acction/Action_Permission_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAction_Permission_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAction_Permission_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAction_Permission_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    acction_Update_v2(body: ActionOnTableModel | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Acction/Acction_Update_v2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAcction_Update_v2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAcction_Update_v2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAcction_Update_v2(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    acction_Autorenew(body: SYS_ActionsOnTable_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Acction/Acction_Autorenew";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAcction_Autorenew(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAcction_Autorenew(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAcction_Autorenew(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class AuthenticateService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: User | undefined): Observable<User> {
        let url_ = this.baseUrl + "/api/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<User>;
                }
            } else
                return _observableThrow(response_) as any as Observable<User>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<User> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    logintoken(body: User | undefined): Observable<User> {
        let url_ = this.baseUrl + "/api/logintoken";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLogintoken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogintoken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<User>;
                }
            } else
                return _observableThrow(response_) as any as Observable<User>;
        }));
    }

    protected processLogintoken(response: HttpResponseBase): Observable<User> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    logout(body: User | undefined): Observable<User> {
        let url_ = this.baseUrl + "/api/logout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<User>;
                }
            } else
                return _observableThrow(response_) as any as Observable<User>;
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<User> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User>(null as any);
    }
}

@Injectable()
export class CashCategoryService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Foreign_Currency_Search(body: CAT_Foreign_Currency_ENTITY | undefined): Observable<CAT_Foreign_Currency_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashCategory/CAT_Foreign_Currency_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Foreign_Currency_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Foreign_Currency_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Foreign_Currency_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Foreign_Currency_ENTITY[]>;
        }));
    }

    protected processCAT_Foreign_Currency_Search(response: HttpResponseBase): Observable<CAT_Foreign_Currency_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Foreign_Currency_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Foreign_Currency_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Foreign_Currency_Action_By_Type(body: CAT_Foreign_Currency_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashCategory/CAT_Foreign_Currency_Action_By_Type";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Foreign_Currency_Action_By_Type(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Foreign_Currency_Action_By_Type(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Foreign_Currency_Action_By_Type(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class CashReportService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cASH_Bank_Deposit_Ledger_Search(body: CASH_Bank_Deposit_Ledger_ENTITY | undefined): Observable<CASH_Bank_Deposit_Ledger_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashReport/CASH_Bank_Deposit_Ledger_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCASH_Bank_Deposit_Ledger_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCASH_Bank_Deposit_Ledger_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CASH_Bank_Deposit_Ledger_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CASH_Bank_Deposit_Ledger_ENTITY[]>;
        }));
    }

    protected processCASH_Bank_Deposit_Ledger_Search(response: HttpResponseBase): Observable<CASH_Bank_Deposit_Ledger_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CASH_Bank_Deposit_Ledger_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CASH_Bank_Deposit_Ledger_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cASH_Disbursement_Journal_Search(body: CASH_Disbursement_Journal_ENTITY | undefined): Observable<CASH_Disbursement_Journal_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashReport/CASH_Disbursement_Journal_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCASH_Disbursement_Journal_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCASH_Disbursement_Journal_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CASH_Disbursement_Journal_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CASH_Disbursement_Journal_ENTITY[]>;
        }));
    }

    protected processCASH_Disbursement_Journal_Search(response: HttpResponseBase): Observable<CASH_Disbursement_Journal_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CASH_Disbursement_Journal_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CASH_Disbursement_Journal_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cASH_Ledger_Report_Search(body: CASH_Ledger_Report_ENTITY | undefined): Observable<CASH_Ledger_Report_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashReport/CASH_Ledger_Report_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCASH_Ledger_Report_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCASH_Ledger_Report_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CASH_Ledger_Report_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CASH_Ledger_Report_ENTITY[]>;
        }));
    }

    protected processCASH_Ledger_Report_Search(response: HttpResponseBase): Observable<CASH_Ledger_Report_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CASH_Ledger_Report_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CASH_Ledger_Report_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cASH_Receipts_Ledger_Search(body: CASH_Receipts_Ledger_ENTITY | undefined): Observable<CASH_Receipts_Ledger_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashReport/CASH_Receipts_Ledger_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCASH_Receipts_Ledger_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCASH_Receipts_Ledger_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CASH_Receipts_Ledger_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CASH_Receipts_Ledger_ENTITY[]>;
        }));
    }

    protected processCASH_Receipts_Ledger_Search(response: HttpResponseBase): Observable<CASH_Receipts_Ledger_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CASH_Receipts_Ledger_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CASH_Receipts_Ledger_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cASH_Payment_voucher_report_Search(body: CASH_Payment_voucher_report_ENTITY | undefined): Observable<CASH_Payment_voucher_report_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashReport/CASH_Payment_voucher_report_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCASH_Payment_voucher_report_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCASH_Payment_voucher_report_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CASH_Payment_voucher_report_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CASH_Payment_voucher_report_ENTITY[]>;
        }));
    }

    protected processCASH_Payment_voucher_report_Search(response: HttpResponseBase): Observable<CASH_Payment_voucher_report_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CASH_Payment_voucher_report_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CASH_Payment_voucher_report_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cASH_Receipt_report_Search(body: CASH_Receipt_report_ENTITY | undefined): Observable<CASH_Receipt_report_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashReport/CASH_Receipt_report_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCASH_Receipt_report_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCASH_Receipt_report_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CASH_Receipt_report_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CASH_Receipt_report_ENTITY[]>;
        }));
    }

    protected processCASH_Receipt_report_Search(response: HttpResponseBase): Observable<CASH_Receipt_report_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CASH_Receipt_report_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CASH_Receipt_report_ENTITY[]>(null as any);
    }
}

@Injectable()
export class CashVoucherService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c11_M_Search(body: C11_M_ENTITY | undefined): Observable<C11_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashVoucher/C11_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC11_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC11_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<C11_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<C11_M_ENTITY[]>;
        }));
    }

    protected processC11_M_Search(response: HttpResponseBase): Observable<C11_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(C11_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<C11_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c11_D_Search(body: C11_D_ENTITY | undefined): Observable<C11_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashVoucher/C11_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC11_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC11_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<C11_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<C11_D_ENTITY[]>;
        }));
    }

    protected processC11_D_Search(response: HttpResponseBase): Observable<C11_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(C11_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<C11_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c11_M_Insert(body: C11_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C11_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC11_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC11_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC11_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c11_M_Update(body: C11_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C11_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC11_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC11_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC11_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c11_M_Delete(body: C11_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C11_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC11_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC11_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC11_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c12_M_Search(body: C12_M_ENTITY | undefined): Observable<C12_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashVoucher/C12_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC12_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC12_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<C12_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<C12_M_ENTITY[]>;
        }));
    }

    protected processC12_M_Search(response: HttpResponseBase): Observable<C12_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(C12_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<C12_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c12_D_Search(body: C12_D_ENTITY | undefined): Observable<C12_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashVoucher/C12_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC12_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC12_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<C12_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<C12_D_ENTITY[]>;
        }));
    }

    protected processC12_D_Search(response: HttpResponseBase): Observable<C12_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(C12_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<C12_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c12_M_Insert(body: C12_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C12_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC12_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC12_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC12_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c12_M_Update(body: C12_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C12_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC12_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC12_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC12_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c12_M_Delete(body: C12_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C12_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC12_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC12_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC12_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c15_M_Search(body: C15_M_ENTITY | undefined): Observable<C15_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashVoucher/C15_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC15_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC15_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<C15_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<C15_M_ENTITY[]>;
        }));
    }

    protected processC15_M_Search(response: HttpResponseBase): Observable<C15_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(C15_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<C15_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c15_D_Search(body: C15_D_ENTITY | undefined): Observable<C15_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashVoucher/C15_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC15_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC15_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<C15_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<C15_D_ENTITY[]>;
        }));
    }

    protected processC15_D_Search(response: HttpResponseBase): Observable<C15_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(C15_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<C15_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c15_M_Insert(body: C15_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C15_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC15_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC15_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC15_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c15_M_Update(body: C15_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C15_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC15_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC15_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC15_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c15_M_Delete(body: C15_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C15_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC15_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC15_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC15_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c16_M_Search(body: C16_M_ENTITY | undefined): Observable<C16_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashVoucher/C16_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC16_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC16_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<C16_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<C16_M_ENTITY[]>;
        }));
    }

    protected processC16_M_Search(response: HttpResponseBase): Observable<C16_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(C16_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<C16_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c16_D_Search(body: C16_D_ENTITY | undefined): Observable<C16_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/CashVoucher/C16_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC16_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC16_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<C16_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<C16_D_ENTITY[]>;
        }));
    }

    protected processC16_D_Search(response: HttpResponseBase): Observable<C16_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(C16_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<C16_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c16_M_Insert(body: C16_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C16_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC16_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC16_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC16_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c16_M_Update(body: C16_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C16_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC16_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC16_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC16_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c16_M_Delete(body: C16_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/CashVoucher/C16_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC16_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC16_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC16_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class ConsolidationCategoryService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Account_Delete(body: CAT_Account_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Account_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Account_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Account_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Account_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Account_Insert(body: CAT_Account_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Account_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Account_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Account_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Account_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Account_Search(body: CAT_Account_ENTITY | undefined): Observable<CAT_Account_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Account_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Account_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Account_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Account_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Account_ENTITY[]>;
        }));
    }

    protected processCAT_Account_Search(response: HttpResponseBase): Observable<CAT_Account_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Account_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Account_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Account_Update(body: CAT_Account_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Account_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Account_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Account_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Account_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Profession_Delete(body: CAT_Profession_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Profession_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Profession_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Profession_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Profession_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Profession_Insert(body: CAT_Profession_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Profession_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Profession_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Profession_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Profession_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Profession_Search(body: CAT_Profession_ENTITY | undefined): Observable<CAT_Profession_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Profession_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Profession_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Profession_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Profession_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Profession_ENTITY[]>;
        }));
    }

    protected processCAT_Profession_Search(response: HttpResponseBase): Observable<CAT_Profession_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Profession_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Profession_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Profession_Update(body: CAT_Profession_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Profession_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Profession_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Profession_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Profession_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Carry_Forward_Delete(body: CAT_Carry_Forward_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Carry_Forward_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Carry_Forward_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Carry_Forward_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Carry_Forward_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Carry_Forward_Insert(body: CAT_Carry_Forward_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Carry_Forward_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Carry_Forward_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Carry_Forward_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Carry_Forward_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Carry_Forward_Search(body: CAT_Carry_Forward_ENTITY | undefined): Observable<CAT_Carry_Forward_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Carry_Forward_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Carry_Forward_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Carry_Forward_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Carry_Forward_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Carry_Forward_ENTITY[]>;
        }));
    }

    protected processCAT_Carry_Forward_Search(response: HttpResponseBase): Observable<CAT_Carry_Forward_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Carry_Forward_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Carry_Forward_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Carry_Forward_Update(body: CAT_Carry_Forward_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationCategory/CAT_Carry_Forward_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Carry_Forward_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Carry_Forward_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Carry_Forward_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class ConsolidationReportService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cON_Statement_Of_Cash_Flows_Report_Search(body: CON_Statement_Of_Cash_Flows_Report_ENTITY | undefined): Observable<CON_Statement_Of_Cash_Flows_Report_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationReport/CON_Statement_Of_Cash_Flows_Report_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCON_Statement_Of_Cash_Flows_Report_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCON_Statement_Of_Cash_Flows_Report_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CON_Statement_Of_Cash_Flows_Report_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CON_Statement_Of_Cash_Flows_Report_ENTITY[]>;
        }));
    }

    protected processCON_Statement_Of_Cash_Flows_Report_Search(response: HttpResponseBase): Observable<CON_Statement_Of_Cash_Flows_Report_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CON_Statement_Of_Cash_Flows_Report_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CON_Statement_Of_Cash_Flows_Report_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cON_Account_Consolidation_By_A_Account_Search(body: CON_Account_Consolidation_By_A_Account_ENTITY | undefined): Observable<CON_Account_Consolidation_By_A_Account_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationReport/CON_Account_Consolidation_By_A_Account_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCON_Account_Consolidation_By_A_Account_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCON_Account_Consolidation_By_A_Account_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CON_Account_Consolidation_By_A_Account_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CON_Account_Consolidation_By_A_Account_ENTITY[]>;
        }));
    }

    protected processCON_Account_Consolidation_By_A_Account_Search(response: HttpResponseBase): Observable<CON_Account_Consolidation_By_A_Account_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CON_Account_Consolidation_By_A_Account_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CON_Account_Consolidation_By_A_Account_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cON_Account_Book_Detail_Search(body: CON_Account_Book_Detail_ENTITY | undefined): Observable<CON_Account_Book_Detail_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationReport/CON_Account_Book_Detail_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCON_Account_Book_Detail_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCON_Account_Book_Detail_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CON_Account_Book_Detail_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CON_Account_Book_Detail_ENTITY[]>;
        }));
    }

    protected processCON_Account_Book_Detail_Search(response: HttpResponseBase): Observable<CON_Account_Book_Detail_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CON_Account_Book_Detail_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CON_Account_Book_Detail_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cON_General_Ledger_Search(body: CON_General_Ledger_ENTITY | undefined): Observable<CON_General_Ledger_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationReport/CON_General_Ledger_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCON_General_Ledger_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCON_General_Ledger_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CON_General_Ledger_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CON_General_Ledger_ENTITY[]>;
        }));
    }

    protected processCON_General_Ledger_Search(response: HttpResponseBase): Observable<CON_General_Ledger_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CON_General_Ledger_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CON_General_Ledger_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cON_Voucher_Ledger_Book_Search(body: CON_Voucher_Ledger_Book_ENTITY | undefined): Observable<CON_Voucher_Ledger_Book_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationReport/CON_Voucher_Ledger_Book_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCON_Voucher_Ledger_Book_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCON_Voucher_Ledger_Book_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CON_Voucher_Ledger_Book_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CON_Voucher_Ledger_Book_ENTITY[]>;
        }));
    }

    protected processCON_Voucher_Ledger_Book_Search(response: HttpResponseBase): Observable<CON_Voucher_Ledger_Book_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CON_Voucher_Ledger_Book_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CON_Voucher_Ledger_Book_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cON_General_Accounting_Ledger_Book_Search(body: CON_General_Accounting_Ledger_Book_ENTITY | undefined): Observable<CON_General_Accounting_Ledger_Book_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationReport/CON_General_Accounting_Ledger_Book_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCON_General_Accounting_Ledger_Book_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCON_General_Accounting_Ledger_Book_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CON_General_Accounting_Ledger_Book_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CON_General_Accounting_Ledger_Book_ENTITY[]>;
        }));
    }

    protected processCON_General_Accounting_Ledger_Book_Search(response: HttpResponseBase): Observable<CON_General_Accounting_Ledger_Book_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CON_General_Accounting_Ledger_Book_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CON_General_Accounting_Ledger_Book_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cON_General_Accounting_Ledger_Search(body: CON_General_Accounting_Ledger_ENTITY | undefined): Observable<CON_General_Accounting_Ledger_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationReport/CON_General_Accounting_Ledger_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCON_General_Accounting_Ledger_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCON_General_Accounting_Ledger_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CON_General_Accounting_Ledger_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CON_General_Accounting_Ledger_ENTITY[]>;
        }));
    }

    protected processCON_General_Accounting_Ledger_Search(response: HttpResponseBase): Observable<CON_General_Accounting_Ledger_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CON_General_Accounting_Ledger_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CON_General_Accounting_Ledger_ENTITY[]>(null as any);
    }
}

@Injectable()
export class ConsolidationVoucherService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c51_M_Search(body: C51_M_ENTITY | undefined): Observable<C51_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationVoucher/C51_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC51_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC51_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<C51_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<C51_M_ENTITY[]>;
        }));
    }

    protected processC51_M_Search(response: HttpResponseBase): Observable<C51_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(C51_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<C51_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c51_D_Search(body: C51_D_ENTITY | undefined): Observable<C51_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationVoucher/C51_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC51_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC51_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<C51_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<C51_D_ENTITY[]>;
        }));
    }

    protected processC51_D_Search(response: HttpResponseBase): Observable<C51_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(C51_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<C51_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c51_M_Insert(body: C51_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationVoucher/C51_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC51_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC51_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC51_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c51_M_Update(body: C51_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationVoucher/C51_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC51_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC51_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC51_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    c51_M_Delete(body: C51_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationVoucher/C51_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processC51_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processC51_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processC51_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    carry_Forward_Execute(body: Carry_Forward_Execute_ENTITY | undefined): Observable<Carry_Forward_Execute_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ConsolidationVoucher/Carry_Forward_Execute";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCarry_Forward_Execute(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCarry_Forward_Execute(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Carry_Forward_Execute_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Carry_Forward_Execute_ENTITY[]>;
        }));
    }

    protected processCarry_Forward_Execute(response: HttpResponseBase): Observable<Carry_Forward_Execute_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Carry_Forward_Execute_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Carry_Forward_Execute_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    carry_Forward_Delete_Executed(body: Carry_Forward_Execute_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ConsolidationVoucher/Carry_Forward_Delete_Executed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCarry_Forward_Delete_Executed(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCarry_Forward_Delete_Executed(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCarry_Forward_Delete_Executed(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class DepartmentService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    department_Actions(body: Department_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Department/Department_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDepartment_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDepartment_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processDepartment_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    department_Position_Insert(body: Department_Position_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Department/Department_Position_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDepartment_Position_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDepartment_Position_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processDepartment_Position_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    department_Position_Update(body: Department_Position_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Department/Department_Position_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDepartment_Position_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDepartment_Position_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processDepartment_Position_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    department_Position_Delete(body: Department_Position_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Department/Department_Position_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDepartment_Position_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDepartment_Position_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processDepartment_Position_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    department_Position_Search(body: Department_Position_ENTITY | undefined): Observable<Department_Position_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Department/Department_Position_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDepartment_Position_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDepartment_Position_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Department_Position_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Department_Position_ENTITY[]>;
        }));
    }

    protected processDepartment_Position_Search(response: HttpResponseBase): Observable<Department_Position_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Department_Position_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Department_Position_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    department_Title_Search(body: Department_Title_ENTITY | undefined): Observable<Department_Title_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Department/Department_Title_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDepartment_Title_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDepartment_Title_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Department_Title_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Department_Title_ENTITY[]>;
        }));
    }

    protected processDepartment_Title_Search(response: HttpResponseBase): Observable<Department_Title_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Department_Title_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Department_Title_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    department_Search(body: Department_ENTITY | undefined): Observable<Department_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Department/Department_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDepartment_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDepartment_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Department_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Department_ENTITY[]>;
        }));
    }

    protected processDepartment_Search(response: HttpResponseBase): Observable<Department_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Department_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Department_ENTITY[]>(null as any);
    }
}

@Injectable()
export class EmployeeService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    employee_Positions_Search(body: Employee_Positions_ENTITY | undefined): Observable<Employee_Positions_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/Employee_Positions_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEmployee_Positions_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmployee_Positions_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Employee_Positions_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Employee_Positions_ENTITY[]>;
        }));
    }

    protected processEmployee_Positions_Search(response: HttpResponseBase): Observable<Employee_Positions_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Employee_Positions_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Employee_Positions_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Search(body: HRM_Employee_ENTITY | undefined): Observable<HRM_Employee_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Search(response: HttpResponseBase): Observable<HRM_Employee_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Marital_Status_Search(body: HRM_Employee_Marital_Status_ENTITY | undefined): Observable<HRM_Employee_Marital_Status_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Marital_Status_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Marital_Status_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Marital_Status_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Marital_Status_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Marital_Status_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Marital_Status_Search(response: HttpResponseBase): Observable<HRM_Employee_Marital_Status_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Marital_Status_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Marital_Status_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_District_City_Search(body: HRM_District_City_ENTITY | undefined): Observable<HRM_District_City_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_District_City_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_District_City_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_District_City_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_District_City_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_District_City_ENTITY[]>;
        }));
    }

    protected processHRM_District_City_Search(response: HttpResponseBase): Observable<HRM_District_City_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_District_City_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_District_City_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Update(body: HRM_Employee_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Insert(body: HRM_Employee_ENTITY | undefined): Observable<HRM_Employee_ENTITY> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_ENTITY>;
        }));
    }

    protected processHRM_Employee_Insert(response: HttpResponseBase): Observable<HRM_Employee_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_ENTITY>(null as any);
    }

    /**
     * @param code (optional) 
     * @param user_login (optional) 
     * @return Success
     */
    hRM_Employee_Delete(code: string | null | undefined, user_login: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Delete?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (user_login !== undefined && user_login !== null)
            url_ += "user_login=" + encodeURIComponent("" + user_login) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    part_Search(body: Part_ENTITY | undefined): Observable<Part_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/Part_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPart_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPart_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Part_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Part_ENTITY[]>;
        }));
    }

    protected processPart_Search(response: HttpResponseBase): Observable<Part_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Part_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Part_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Type_Search(body: HRM_Employee_Labour_Contract_Type_ENTITY | undefined): Observable<HRM_Employee_Labour_Contract_Type_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Type_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Type_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Type_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Labour_Contract_Type_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Labour_Contract_Type_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Type_Search(response: HttpResponseBase): Observable<HRM_Employee_Labour_Contract_Type_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Labour_Contract_Type_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Labour_Contract_Type_ENTITY[]>(null as any);
    }

    /**
     * @param code (optional) 
     * @param user_login (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Delete(code: string | null | undefined, user_login: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Delete?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (user_login !== undefined && user_login !== null)
            url_ += "user_login=" + encodeURIComponent("" + user_login) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Insert(body: HRM_Employee_Labour_Contract_ENTITY | undefined): Observable<HRM_Employee_Labour_Contract_ENTITY> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Labour_Contract_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Labour_Contract_ENTITY>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Insert(response: HttpResponseBase): Observable<HRM_Employee_Labour_Contract_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_Labour_Contract_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Labour_Contract_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Appendix_Search(body: HRM_Employee_Labour_Contract_Appendix_ENTITY | undefined): Observable<HRM_Employee_Labour_Contract_Appendix_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Appendix_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Appendix_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Appendix_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Labour_Contract_Appendix_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Labour_Contract_Appendix_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Appendix_Search(response: HttpResponseBase): Observable<HRM_Employee_Labour_Contract_Appendix_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Labour_Contract_Appendix_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Labour_Contract_Appendix_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Appendix_Target_Detail_Search(body: HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY | undefined): Observable<HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Appendix_Target_Detail_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Appendix_Target_Detail_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Appendix_Target_Detail_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Appendix_Target_Detail_Search(response: HttpResponseBase): Observable<HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Appendix_Target_Detail_Export(body: HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY | undefined): Observable<ReportModel> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Appendix_Target_Detail_Export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Appendix_Target_Detail_Export(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Appendix_Target_Detail_Export(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReportModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReportModel>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Appendix_Target_Detail_Export(response: HttpResponseBase): Observable<ReportModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReportModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReportModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Appendix_Target_Detail_Insert(body: HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Appendix_Target_Detail_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Appendix_Target_Detail_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Appendix_Target_Detail_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Appendix_Target_Detail_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Salary_Deduction_Search(body: HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY | undefined): Observable<HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Salary_Deduction_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Salary_Deduction_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Salary_Deduction_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Salary_Deduction_Search(response: HttpResponseBase): Observable<HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Appendix_Target_Update(body: HRM_Employee_Labour_Contract_Appendix_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Appendix_Target_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Appendix_Target_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Appendix_Target_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Appendix_Target_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Search(body: HRM_Employee_Labour_Contract_ENTITY | undefined): Observable<HRM_Employee_Labour_Contract_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Labour_Contract_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Labour_Contract_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Search(response: HttpResponseBase): Observable<HRM_Employee_Labour_Contract_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Labour_Contract_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Labour_Contract_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_Update(body: HRM_Employee_Labour_Contract_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_Search(body: HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY | undefined): Observable<HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_Search(response: HttpResponseBase): Observable<HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Labour_Contract_Update(body: HRM_Employee_Labour_Contract_ENTITY | undefined): Observable<HRM_Employee_Labour_Contract_ENTITY> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Labour_Contract_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Labour_Contract_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Labour_Contract_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Labour_Contract_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Labour_Contract_ENTITY>;
        }));
    }

    protected processHRM_Employee_Labour_Contract_Update(response: HttpResponseBase): Observable<HRM_Employee_Labour_Contract_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_Labour_Contract_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Labour_Contract_ENTITY>(null as any);
    }

    /**
     * @param code (optional) 
     * @param user_login (optional) 
     * @return Success
     */
    hRM_Employee_Work_Procedure_Delete(code: string | null | undefined, user_login: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Work_Procedure_Delete?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (user_login !== undefined && user_login !== null)
            url_ += "user_login=" + encodeURIComponent("" + user_login) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Work_Procedure_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Work_Procedure_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Work_Procedure_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Work_Procedure_Insert(body: HRM_Employee_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Work_Procedure_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Work_Procedure_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Work_Procedure_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Work_Procedure_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Work_Procedure_Search(body: HRM_Employee_ENTITY | undefined): Observable<HRM_Employee_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Work_Procedure_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Work_Procedure_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Work_Procedure_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Work_Procedure_Search(response: HttpResponseBase): Observable<HRM_Employee_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Work_Procedure_Update(body: HRM_Employee_ENTITY | undefined): Observable<HRM_Employee_ENTITY> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Work_Procedure_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Work_Procedure_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Work_Procedure_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_ENTITY>;
        }));
    }

    protected processHRM_Employee_Work_Procedure_Update(response: HttpResponseBase): Observable<HRM_Employee_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out_Search(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<HRM_Employee_Check_In_Out_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Check_In_Out_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Check_In_Out_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Check_In_Out_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Check_In_Out_Search(response: HttpResponseBase): Observable<HRM_Employee_Check_In_Out_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Check_In_Out_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Check_In_Out_ENTITY[]>(null as any);
    }

    /**
     * @param type (optional) 
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out_Warning_Actions(type: string | null | undefined, body: HRM_Employee_Check_In_Out_ENTITY[] | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Check_In_Out_Warning_Actions?";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out_Warning_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out_Warning_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Check_In_Out_Warning_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out_Warning_Search(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<HRM_Employee_Check_In_Out_Warning_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Check_In_Out_Warning_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out_Warning_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out_Warning_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Check_In_Out_Warning_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Check_In_Out_Warning_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Check_In_Out_Warning_Search(response: HttpResponseBase): Observable<HRM_Employee_Check_In_Out_Warning_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Check_In_Out_Warning_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Check_In_Out_Warning_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Timesheet_Search(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<HRM_Employee_Check_In_Out_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Timesheet_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Timesheet_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Timesheet_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Check_In_Out_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Check_In_Out_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Timesheet_Search(response: HttpResponseBase): Observable<HRM_Employee_Check_In_Out_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Check_In_Out_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Check_In_Out_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out_Update(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Check_In_Out_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Check_In_Out_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out_Face_Training_Update(body: FaceInfoFaceTrainingUpdate | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Check_In_Out_Face_Training_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out_Face_Training_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out_Face_Training_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Check_In_Out_Face_Training_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out_Verify(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<ResposeModel> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Check_In_Out_Verify";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out_Verify(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out_Verify(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResposeModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResposeModel>;
        }));
    }

    protected processHRM_Employee_Check_In_Out_Verify(response: HttpResponseBase): Observable<ResposeModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResposeModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResposeModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out_Insert(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Check_In_Out_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Employee_Check_In_Out_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out_Face_Training_Search(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<HRM_Employee_Check_In_Out_ENTITY> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Check_In_Out_Face_Training_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out_Face_Training_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out_Face_Training_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Check_In_Out_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Check_In_Out_ENTITY>;
        }));
    }

    protected processHRM_Employee_Check_In_Out_Face_Training_Search(response: HttpResponseBase): Observable<HRM_Employee_Check_In_Out_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_Check_In_Out_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Check_In_Out_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Report_Salary_Search(body: HRM_Employee_Report_Salary_ENTITY | undefined): Observable<HRM_Employee_Report_Salary_ENTITY> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Report_Salary_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Report_Salary_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Report_Salary_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Report_Salary_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Report_Salary_ENTITY>;
        }));
    }

    protected processHRM_Employee_Report_Salary_Search(response: HttpResponseBase): Observable<HRM_Employee_Report_Salary_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_Report_Salary_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Report_Salary_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Report_Salary_v2_Search(body: HRM_Employee_Report_Salary_ENTITY | undefined): Observable<HRM_Employee_Report_Salary_ENTITY> {
        let url_ = this.baseUrl + "/api/Employee/HRM_Employee_Report_Salary_v2_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Report_Salary_v2_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Report_Salary_v2_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Report_Salary_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Report_Salary_ENTITY>;
        }));
    }

    protected processHRM_Employee_Report_Salary_v2_Search(response: HttpResponseBase): Observable<HRM_Employee_Report_Salary_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_Report_Salary_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Report_Salary_ENTITY>(null as any);
    }
}

@Injectable()
export class ERPCommonService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    eRP_Common_Generate_Voucher_No(body: ERPCommon_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ERPCommon/ERP_Common_Generate_Voucher_No";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processERP_Common_Generate_Voucher_No(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processERP_Common_Generate_Voucher_No(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processERP_Common_Generate_Voucher_No(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_List_Voucher_Search(body: SYS_List_Voucher_ENTITY | undefined): Observable<SYS_List_Voucher_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ERPCommon/SYS_List_Voucher_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_List_Voucher_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_List_Voucher_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_List_Voucher_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_List_Voucher_ENTITY[]>;
        }));
    }

    protected processSYS_List_Voucher_Search(response: HttpResponseBase): Observable<SYS_List_Voucher_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_List_Voucher_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_List_Voucher_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Language_Translate_Action_By_Type(body: SYS_Language_Translate_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ERPCommon/SYS_Language_Translate_Action_By_Type";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Language_Translate_Action_By_Type(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Language_Translate_Action_By_Type(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Language_Translate_Action_By_Type(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Language_Translate_Search(body: SYS_Language_Translate_ENTITY | undefined): Observable<SYS_Language_Translate_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ERPCommon/SYS_Language_Translate_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Language_Translate_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Language_Translate_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Language_Translate_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Language_Translate_ENTITY[]>;
        }));
    }

    protected processSYS_Language_Translate_Search(response: HttpResponseBase): Observable<SYS_Language_Translate_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Language_Translate_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Language_Translate_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Voucher_Year_Search(body: SYS_Voucher_Year_ENTITY | undefined): Observable<SYS_Voucher_Year_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ERPCommon/SYS_Voucher_Year_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Voucher_Year_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Voucher_Year_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Voucher_Year_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Voucher_Year_ENTITY[]>;
        }));
    }

    protected processSYS_Voucher_Year_Search(response: HttpResponseBase): Observable<SYS_Voucher_Year_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Voucher_Year_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Voucher_Year_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_List_Voucher_Block_Book_Update(body: SYS_List_Voucher_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ERPCommon/SYS_List_Voucher_Block_Book_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_List_Voucher_Block_Book_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_List_Voucher_Block_Book_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_List_Voucher_Block_Book_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    eRP_Common_Check_Voucher_Save(body: ERPCommon_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ERPCommon/ERP_Common_Check_Voucher_Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processERP_Common_Check_Voucher_Save(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processERP_Common_Check_Voucher_Save(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processERP_Common_Check_Voucher_Save(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class ExportAPIService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    aPI_Data_Export_By_StoredProceduces(body: ExportModdel | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/ExportAPI/API_Data_Export_By_StoredProceduces";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAPI_Data_Export_By_StoredProceduces(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAPI_Data_Export_By_StoredProceduces(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAPI_Data_Export_By_StoredProceduces(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Report_Infomation_Delete(body: SYS_Report_Infomation_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ExportAPI/SYS_Report_Infomation_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Report_Infomation_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Report_Infomation_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Report_Infomation_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Report_Infomation_Insert(body: SYS_Report_Infomation_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ExportAPI/SYS_Report_Infomation_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Report_Infomation_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Report_Infomation_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Report_Infomation_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Report_Infomation_Search(body: SYS_Report_Infomation_ENTITY | undefined): Observable<SYS_Report_Infomation_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ExportAPI/SYS_Report_Infomation_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Report_Infomation_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Report_Infomation_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Report_Infomation_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Report_Infomation_ENTITY[]>;
        }));
    }

    protected processSYS_Report_Infomation_Search(response: HttpResponseBase): Observable<SYS_Report_Infomation_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Report_Infomation_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Report_Infomation_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Report_Infomation_Update(body: SYS_Report_Infomation_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ExportAPI/SYS_Report_Infomation_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Report_Infomation_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Report_Infomation_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Report_Infomation_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Report_Infomation_Version_Search(body: SYS_Report_Infomation_Version_ENTITY | undefined): Observable<SYS_Report_Infomation_Version_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ExportAPI/SYS_Report_Infomation_Version_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Report_Infomation_Version_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Report_Infomation_Version_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Report_Infomation_Version_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Report_Infomation_Version_ENTITY[]>;
        }));
    }

    protected processSYS_Report_Infomation_Version_Search(response: HttpResponseBase): Observable<SYS_Report_Infomation_Version_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Report_Infomation_Version_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Report_Infomation_Version_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Report_Infomation_Detail_Signature_Search(body: SYS_Report_Infomation_Detail_Signature_ENTITY | undefined): Observable<SYS_Report_Infomation_Detail_Signature_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ExportAPI/SYS_Report_Infomation_Detail_Signature_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Report_Infomation_Detail_Signature_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Report_Infomation_Detail_Signature_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Report_Infomation_Detail_Signature_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Report_Infomation_Detail_Signature_ENTITY[]>;
        }));
    }

    protected processSYS_Report_Infomation_Detail_Signature_Search(response: HttpResponseBase): Observable<SYS_Report_Infomation_Detail_Signature_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Report_Infomation_Detail_Signature_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Report_Infomation_Detail_Signature_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Report_Infomation_Detail_Search(body: SYS_Report_Infomation_Detail_ENTITY | undefined): Observable<SYS_Report_Infomation_Detail_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ExportAPI/SYS_Report_Infomation_Detail_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Report_Infomation_Detail_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Report_Infomation_Detail_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Report_Infomation_Detail_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Report_Infomation_Detail_ENTITY[]>;
        }));
    }

    protected processSYS_Report_Infomation_Detail_Search(response: HttpResponseBase): Observable<SYS_Report_Infomation_Detail_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Report_Infomation_Detail_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Report_Infomation_Detail_ENTITY[]>(null as any);
    }
}

@Injectable()
export class FaceAPIService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postFaceCheckInImage(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<HRM_Employee_Check_In_Out_ENTITY> {
        let url_ = this.baseUrl + "/api/FaceAPI/PostFaceCheckInImage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPostFaceCheckInImage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostFaceCheckInImage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Check_In_Out_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Check_In_Out_ENTITY>;
        }));
    }

    protected processPostFaceCheckInImage(response: HttpResponseBase): Observable<HRM_Employee_Check_In_Out_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_Check_In_Out_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Check_In_Out_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Ready_Check_In_Out(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<HRM_Employee_Check_In_Out_ENTITY[]> {
        let url_ = this.baseUrl + "/api/FaceAPI/HRM_Employee_Ready_Check_In_Out";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Ready_Check_In_Out(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Ready_Check_In_Out(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Check_In_Out_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Check_In_Out_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Ready_Check_In_Out(response: HttpResponseBase): Observable<HRM_Employee_Check_In_Out_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Check_In_Out_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Check_In_Out_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Setup_Ready_Check_In_Out(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<HRM_Employee_Check_In_Out_ENTITY[]> {
        let url_ = this.baseUrl + "/api/FaceAPI/HRM_Employee_Setup_Ready_Check_In_Out";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Setup_Ready_Check_In_Out(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Setup_Ready_Check_In_Out(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Check_In_Out_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Check_In_Out_ENTITY[]>;
        }));
    }

    protected processHRM_Employee_Setup_Ready_Check_In_Out(response: HttpResponseBase): Observable<HRM_Employee_Check_In_Out_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Employee_Check_In_Out_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Check_In_Out_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out_Save_Setting(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<HRM_Employee_Check_In_Out_ENTITY> {
        let url_ = this.baseUrl + "/api/FaceAPI/HRM_Employee_Check_In_Out_Save_Setting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out_Save_Setting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out_Save_Setting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Check_In_Out_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Check_In_Out_ENTITY>;
        }));
    }

    protected processHRM_Employee_Check_In_Out_Save_Setting(response: HttpResponseBase): Observable<HRM_Employee_Check_In_Out_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_Check_In_Out_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Check_In_Out_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out_Save_Setting_v2(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<HRM_Employee_Check_In_Out_ENTITY> {
        let url_ = this.baseUrl + "/api/FaceAPI/HRM_Employee_Check_In_Out_Save_Setting_v2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out_Save_Setting_v2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out_Save_Setting_v2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Check_In_Out_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Check_In_Out_ENTITY>;
        }));
    }

    protected processHRM_Employee_Check_In_Out_Save_Setting_v2(response: HttpResponseBase): Observable<HRM_Employee_Check_In_Out_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_Check_In_Out_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Check_In_Out_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Check_In_Out(body: HRM_Employee_Check_In_Out_ENTITY | undefined): Observable<HRM_Employee_Check_In_Out_ENTITY> {
        let url_ = this.baseUrl + "/api/FaceAPI/HRM_Employee_Check_In_Out";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Check_In_Out(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Check_In_Out(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Employee_Check_In_Out_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Employee_Check_In_Out_ENTITY>;
        }));
    }

    protected processHRM_Employee_Check_In_Out(response: HttpResponseBase): Observable<HRM_Employee_Check_In_Out_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Employee_Check_In_Out_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Employee_Check_In_Out_ENTITY>(null as any);
    }
}

@Injectable()
export class FileManagerService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param myFile (optional) 
     * @param base64 (optional) 
     * @param insertFile (optional) 
     * @param altText (optional) 
     * @param message (optional) 
     * @param status (optional) 
     * @param type (optional) 
     * @param listFiles (optional) 
     * @param file_List (optional) 
     * @param list_data (optional) 
     * @param employee_code (optional) 
     * @param description (optional) 
     * @param tbName (optional) 
     * @param colName (optional) 
     * @param stored (optional) 
     * @param id (optional) 
     * @param path (optional) 
     * @param size (optional) 
     * @param ref_MasterID (optional) 
     * @param ref_master_code (optional) 
     * @return Success
     */
    postFile(myFile: FileParameter[] | null | undefined, base64: string | null | undefined, insertFile: InsertFile[] | null | undefined, altText: string | null | undefined, message: string | null | undefined, status: number | null | undefined, type: number | null | undefined, listFiles: string[] | null | undefined, file_List: File_ENTITY[] | null | undefined, list_data: Upload_ENTITY[] | null | undefined, employee_code: string | null | undefined, description: string | null | undefined, tbName: string | null | undefined, colName: string | null | undefined, stored: string | null | undefined, id: number | undefined, path: string | null | undefined, size: number | null | undefined, ref_MasterID: number | null | undefined, ref_master_code: string | null | undefined): Observable<FileRecord> {
        let url_ = this.baseUrl + "/api/FileManager/PostFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (myFile !== null && myFile !== undefined)
            myFile.forEach(item_ => content_.append("MyFile", item_.data, item_.fileName ? item_.fileName : "MyFile") );
        if (base64 !== null && base64 !== undefined)
            content_.append("Base64", base64.toString());
        if (insertFile !== null && insertFile !== undefined)
            insertFile.forEach(item_ => content_.append("insertFile", item_.toString()));
        if (altText !== null && altText !== undefined)
            content_.append("AltText", altText.toString());
        if (message !== null && message !== undefined)
            content_.append("Message", message.toString());
        if (status !== null && status !== undefined)
            content_.append("Status", status.toString());
        if (type !== null && type !== undefined)
            content_.append("Type", type.toString());
        if (listFiles !== null && listFiles !== undefined)
            listFiles.forEach(item_ => content_.append("listFiles", item_.toString()));
        if (file_List !== null && file_List !== undefined)
            file_List.forEach(item_ => content_.append("File_List", item_.toString()));
        if (list_data !== null && list_data !== undefined)
            list_data.forEach(item_ => content_.append("List_data", item_.toString()));
        if (employee_code !== null && employee_code !== undefined)
            content_.append("employee_code", employee_code.toString());
        if (description !== null && description !== undefined)
            content_.append("Description", description.toString());
        if (tbName !== null && tbName !== undefined)
            content_.append("tbName", tbName.toString());
        if (colName !== null && colName !== undefined)
            content_.append("colName", colName.toString());
        if (stored !== null && stored !== undefined)
            content_.append("stored", stored.toString());
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (path !== null && path !== undefined)
            content_.append("Path", path.toString());
        if (size !== null && size !== undefined)
            content_.append("Size", size.toString());
        if (ref_MasterID !== null && ref_MasterID !== undefined)
            content_.append("Ref_MasterID", ref_MasterID.toString());
        if (ref_master_code !== null && ref_master_code !== undefined)
            content_.append("ref_master_code", ref_master_code.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPostFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileRecord>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileRecord>;
        }));
    }

    protected processPostFile(response: HttpResponseBase): Observable<FileRecord> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileRecord.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileRecord>(null as any);
    }

    /**
     * @param myFile (optional) 
     * @param base64 (optional) 
     * @param insertFile (optional) 
     * @param altText (optional) 
     * @param message (optional) 
     * @param status (optional) 
     * @param type (optional) 
     * @param listFiles (optional) 
     * @param file_List (optional) 
     * @param list_data (optional) 
     * @param employee_code (optional) 
     * @param description (optional) 
     * @param tbName (optional) 
     * @param colName (optional) 
     * @param stored (optional) 
     * @param id (optional) 
     * @param path (optional) 
     * @param size (optional) 
     * @param ref_MasterID (optional) 
     * @param ref_master_code (optional) 
     * @return Success
     */
    postFileNoHosting(myFile: FileParameter[] | null | undefined, base64: string | null | undefined, insertFile: InsertFile[] | null | undefined, altText: string | null | undefined, message: string | null | undefined, status: number | null | undefined, type: number | null | undefined, listFiles: string[] | null | undefined, file_List: File_ENTITY[] | null | undefined, list_data: Upload_ENTITY[] | null | undefined, employee_code: string | null | undefined, description: string | null | undefined, tbName: string | null | undefined, colName: string | null | undefined, stored: string | null | undefined, id: number | undefined, path: string | null | undefined, size: number | null | undefined, ref_MasterID: number | null | undefined, ref_master_code: string | null | undefined): Observable<FileRecord> {
        let url_ = this.baseUrl + "/api/FileManager/PostFileNoHosting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (myFile !== null && myFile !== undefined)
            myFile.forEach(item_ => content_.append("MyFile", item_.data, item_.fileName ? item_.fileName : "MyFile") );
        if (base64 !== null && base64 !== undefined)
            content_.append("Base64", base64.toString());
        if (insertFile !== null && insertFile !== undefined)
            insertFile.forEach(item_ => content_.append("insertFile", item_.toString()));
        if (altText !== null && altText !== undefined)
            content_.append("AltText", altText.toString());
        if (message !== null && message !== undefined)
            content_.append("Message", message.toString());
        if (status !== null && status !== undefined)
            content_.append("Status", status.toString());
        if (type !== null && type !== undefined)
            content_.append("Type", type.toString());
        if (listFiles !== null && listFiles !== undefined)
            listFiles.forEach(item_ => content_.append("listFiles", item_.toString()));
        if (file_List !== null && file_List !== undefined)
            file_List.forEach(item_ => content_.append("File_List", item_.toString()));
        if (list_data !== null && list_data !== undefined)
            list_data.forEach(item_ => content_.append("List_data", item_.toString()));
        if (employee_code !== null && employee_code !== undefined)
            content_.append("employee_code", employee_code.toString());
        if (description !== null && description !== undefined)
            content_.append("Description", description.toString());
        if (tbName !== null && tbName !== undefined)
            content_.append("tbName", tbName.toString());
        if (colName !== null && colName !== undefined)
            content_.append("colName", colName.toString());
        if (stored !== null && stored !== undefined)
            content_.append("stored", stored.toString());
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (path !== null && path !== undefined)
            content_.append("Path", path.toString());
        if (size !== null && size !== undefined)
            content_.append("Size", size.toString());
        if (ref_MasterID !== null && ref_MasterID !== undefined)
            content_.append("Ref_MasterID", ref_MasterID.toString());
        if (ref_master_code !== null && ref_master_code !== undefined)
            content_.append("ref_master_code", ref_master_code.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPostFileNoHosting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostFileNoHosting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileRecord>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileRecord>;
        }));
    }

    protected processPostFileNoHosting(response: HttpResponseBase): Observable<FileRecord> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileRecord.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileRecord>(null as any);
    }

    /**
     * @param myFile (optional) 
     * @param base64 (optional) 
     * @param insertFile (optional) 
     * @param altText (optional) 
     * @param message (optional) 
     * @param status (optional) 
     * @param type (optional) 
     * @param listFiles (optional) 
     * @param file_List (optional) 
     * @param list_data (optional) 
     * @param employee_code (optional) 
     * @param description (optional) 
     * @param tbName (optional) 
     * @param colName (optional) 
     * @param stored (optional) 
     * @param id (optional) 
     * @param path (optional) 
     * @param size (optional) 
     * @param ref_MasterID (optional) 
     * @param ref_master_code (optional) 
     * @return Success
     */
    postFile_v2(myFile: FileParameter[] | null | undefined, base64: string | null | undefined, insertFile: InsertFile[] | null | undefined, altText: string | null | undefined, message: string | null | undefined, status: number | null | undefined, type: number | null | undefined, listFiles: string[] | null | undefined, file_List: File_ENTITY[] | null | undefined, list_data: Upload_ENTITY[] | null | undefined, employee_code: string | null | undefined, description: string | null | undefined, tbName: string | null | undefined, colName: string | null | undefined, stored: string | null | undefined, id: number | undefined, path: string | null | undefined, size: number | null | undefined, ref_MasterID: number | null | undefined, ref_master_code: string | null | undefined): Observable<FileRecord> {
        let url_ = this.baseUrl + "/api/FileManager/PostFile_v2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (myFile !== null && myFile !== undefined)
            myFile.forEach(item_ => content_.append("MyFile", item_.data, item_.fileName ? item_.fileName : "MyFile") );
        if (base64 !== null && base64 !== undefined)
            content_.append("Base64", base64.toString());
        if (insertFile !== null && insertFile !== undefined)
            insertFile.forEach(item_ => content_.append("insertFile", item_.toString()));
        if (altText !== null && altText !== undefined)
            content_.append("AltText", altText.toString());
        if (message !== null && message !== undefined)
            content_.append("Message", message.toString());
        if (status !== null && status !== undefined)
            content_.append("Status", status.toString());
        if (type !== null && type !== undefined)
            content_.append("Type", type.toString());
        if (listFiles !== null && listFiles !== undefined)
            listFiles.forEach(item_ => content_.append("listFiles", item_.toString()));
        if (file_List !== null && file_List !== undefined)
            file_List.forEach(item_ => content_.append("File_List", item_.toString()));
        if (list_data !== null && list_data !== undefined)
            list_data.forEach(item_ => content_.append("List_data", item_.toString()));
        if (employee_code !== null && employee_code !== undefined)
            content_.append("employee_code", employee_code.toString());
        if (description !== null && description !== undefined)
            content_.append("Description", description.toString());
        if (tbName !== null && tbName !== undefined)
            content_.append("tbName", tbName.toString());
        if (colName !== null && colName !== undefined)
            content_.append("colName", colName.toString());
        if (stored !== null && stored !== undefined)
            content_.append("stored", stored.toString());
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (path !== null && path !== undefined)
            content_.append("Path", path.toString());
        if (size !== null && size !== undefined)
            content_.append("Size", size.toString());
        if (ref_MasterID !== null && ref_MasterID !== undefined)
            content_.append("Ref_MasterID", ref_MasterID.toString());
        if (ref_master_code !== null && ref_master_code !== undefined)
            content_.append("ref_master_code", ref_master_code.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPostFile_v2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostFile_v2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileRecord>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileRecord>;
        }));
    }

    protected processPostFile_v2(response: HttpResponseBase): Observable<FileRecord> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileRecord.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileRecord>(null as any);
    }

    /**
     * @param myFile (optional) 
     * @param base64 (optional) 
     * @param insertFile (optional) 
     * @param altText (optional) 
     * @param message (optional) 
     * @param status (optional) 
     * @param type (optional) 
     * @param listFiles (optional) 
     * @param file_List (optional) 
     * @param list_data (optional) 
     * @param employee_code (optional) 
     * @param description (optional) 
     * @param tbName (optional) 
     * @param colName (optional) 
     * @param stored (optional) 
     * @param id (optional) 
     * @param path (optional) 
     * @param size (optional) 
     * @param ref_MasterID (optional) 
     * @param ref_master_code (optional) 
     * @return Success
     */
    postFile_v3(myFile: FileParameter[] | null | undefined, base64: string | null | undefined, insertFile: InsertFile[] | null | undefined, altText: string | null | undefined, message: string | null | undefined, status: number | null | undefined, type: number | null | undefined, listFiles: string[] | null | undefined, file_List: File_ENTITY[] | null | undefined, list_data: Upload_ENTITY[] | null | undefined, employee_code: string | null | undefined, description: string | null | undefined, tbName: string | null | undefined, colName: string | null | undefined, stored: string | null | undefined, id: number | undefined, path: string | null | undefined, size: number | null | undefined, ref_MasterID: number | null | undefined, ref_master_code: string | null | undefined): Observable<FileRecord> {
        let url_ = this.baseUrl + "/api/FileManager/PostFile_v3";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (myFile !== null && myFile !== undefined)
            myFile.forEach(item_ => content_.append("MyFile", item_.data, item_.fileName ? item_.fileName : "MyFile") );
        if (base64 !== null && base64 !== undefined)
            content_.append("Base64", base64.toString());
        if (insertFile !== null && insertFile !== undefined)
            insertFile.forEach(item_ => content_.append("insertFile", item_.toString()));
        if (altText !== null && altText !== undefined)
            content_.append("AltText", altText.toString());
        if (message !== null && message !== undefined)
            content_.append("Message", message.toString());
        if (status !== null && status !== undefined)
            content_.append("Status", status.toString());
        if (type !== null && type !== undefined)
            content_.append("Type", type.toString());
        if (listFiles !== null && listFiles !== undefined)
            listFiles.forEach(item_ => content_.append("listFiles", item_.toString()));
        if (file_List !== null && file_List !== undefined)
            file_List.forEach(item_ => content_.append("File_List", item_.toString()));
        if (list_data !== null && list_data !== undefined)
            list_data.forEach(item_ => content_.append("List_data", item_.toString()));
        if (employee_code !== null && employee_code !== undefined)
            content_.append("employee_code", employee_code.toString());
        if (description !== null && description !== undefined)
            content_.append("Description", description.toString());
        if (tbName !== null && tbName !== undefined)
            content_.append("tbName", tbName.toString());
        if (colName !== null && colName !== undefined)
            content_.append("colName", colName.toString());
        if (stored !== null && stored !== undefined)
            content_.append("stored", stored.toString());
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (path !== null && path !== undefined)
            content_.append("Path", path.toString());
        if (size !== null && size !== undefined)
            content_.append("Size", size.toString());
        if (ref_MasterID !== null && ref_MasterID !== undefined)
            content_.append("Ref_MasterID", ref_MasterID.toString());
        if (ref_master_code !== null && ref_master_code !== undefined)
            content_.append("ref_master_code", ref_master_code.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPostFile_v3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostFile_v3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileRecord>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileRecord>;
        }));
    }

    protected processPostFile_v3(response: HttpResponseBase): Observable<FileRecord> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileRecord.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileRecord>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    convertBase64ToImageLink(body: FileRecord | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/FileManager/ConvertBase64ToImageLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processConvertBase64ToImageLink(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConvertBase64ToImageLink(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processConvertBase64ToImageLink(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    /**
     * @param filePath (optional) 
     * @return Success
     */
    downloadByPath(filePath: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/FileManager/DownloadByPath?";
        if (filePath !== undefined && filePath !== null)
            url_ += "filePath=" + encodeURIComponent("" + filePath) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownloadByPath(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadByPath(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDownloadByPath(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

@Injectable()
export class GenRowTableService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_Data_Search(body: SYS_GenRowTable | undefined): Observable<SYS_GenRowTable[]> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Data_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Data_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Data_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_GenRowTable[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_GenRowTable[]>;
        }));
    }

    protected processSYS_GenRowTable_Data_Search(response: HttpResponseBase): Observable<SYS_GenRowTable[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_GenRowTable.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_GenRowTable[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_Search(body: SYS_GenRowTable | undefined): Observable<SYS_GenRowTable[]> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_GenRowTable[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_GenRowTable[]>;
        }));
    }

    protected processSYS_GenRowTable_Search(response: HttpResponseBase): Observable<SYS_GenRowTable[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_GenRowTable.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_GenRowTable[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_v2_Search(body: SYS_GenRowTable | undefined): Observable<SYS_GenRowTable[]> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_v2_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_v2_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_v2_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_GenRowTable[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_GenRowTable[]>;
        }));
    }

    protected processSYS_GenRowTable_v2_Search(response: HttpResponseBase): Observable<SYS_GenRowTable[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_GenRowTable.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_GenRowTable[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_Detail_Search(body: SYS_GenRowTable_Detail | undefined): Observable<SYS_GenRowTable_Detail[]> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Detail_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Detail_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Detail_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_GenRowTable_Detail[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_GenRowTable_Detail[]>;
        }));
    }

    protected processSYS_GenRowTable_Detail_Search(response: HttpResponseBase): Observable<SYS_GenRowTable_Detail[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_GenRowTable_Detail.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_GenRowTable_Detail[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_Root_Search(body: SYS_GenRowTable | undefined): Observable<SYS_GenRowTable[]> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Root_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Root_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Root_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_GenRowTable[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_GenRowTable[]>;
        }));
    }

    protected processSYS_GenRowTable_Root_Search(response: HttpResponseBase): Observable<SYS_GenRowTable[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_GenRowTable.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_GenRowTable[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_Detail_Root_Search(body: SYS_GenRowTable_Detail | undefined): Observable<SYS_GenRowTable_Detail[]> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Detail_Root_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Detail_Root_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Detail_Root_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_GenRowTable_Detail[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_GenRowTable_Detail[]>;
        }));
    }

    protected processSYS_GenRowTable_Detail_Root_Search(response: HttpResponseBase): Observable<SYS_GenRowTable_Detail[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_GenRowTable_Detail.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_GenRowTable_Detail[]>(null as any);
    }

    /**
     * @return Success
     */
    sYS_GenRowTable_Opption_Search(): Observable<SYS_GenRowTable[]> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Opption_Search";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Opption_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Opption_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_GenRowTable[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_GenRowTable[]>;
        }));
    }

    protected processSYS_GenRowTable_Opption_Search(response: HttpResponseBase): Observable<SYS_GenRowTable[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_GenRowTable.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_GenRowTable[]>(null as any);
    }

    /**
     * @param listId (optional) 
     * @return Success
     */
    sYS_GenRowTable_Delete_ListID(listId: string[] | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Delete_ListID?";
        if (listId !== undefined && listId !== null)
            listId && listId.forEach(item => { url_ += "listId=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Delete_ListID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Delete_ListID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_GenRowTable_Delete_ListID(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_Update(body: SYS_GenRowTable[] | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_GenRowTable_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_Update_Detail(body: SYS_GenRowTable | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Update_Detail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Update_Detail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Update_Detail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_GenRowTable_Update_Detail(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_Opption_V2_Search(body: SYS_GenRowTable_Opption_ENTITY | undefined): Observable<SYS_GenRowTable_Opption_ENTITY[]> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Opption_V2_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Opption_V2_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Opption_V2_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_GenRowTable_Opption_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_GenRowTable_Opption_ENTITY[]>;
        }));
    }

    protected processSYS_GenRowTable_Opption_V2_Search(response: HttpResponseBase): Observable<SYS_GenRowTable_Opption_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_GenRowTable_Opption_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_GenRowTable_Opption_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_Opption_Action_By_Type(body: SYS_GenRowTable_Opption_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Opption_Action_By_Type";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Opption_Action_By_Type(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Opption_Action_By_Type(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_GenRowTable_Opption_Action_By_Type(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_GenRowTable_Insert(body: SYS_GenRowTable | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_GenRowTable_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_GenRowTable_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_GenRowTable_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_GenRowTable_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Column_Info_Search(body: SYS_Column_Info_ENTITY | undefined): Observable<SYS_Column_Info_ENTITY[]> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_Column_Info_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Column_Info_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Column_Info_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Column_Info_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Column_Info_ENTITY[]>;
        }));
    }

    protected processSYS_Column_Info_Search(response: HttpResponseBase): Observable<SYS_Column_Info_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Column_Info_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Column_Info_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Column_Info_Action_By_Type(body: SYS_Column_Info_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/GenRowTable/SYS_Column_Info_Action_By_Type";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Column_Info_Action_By_Type(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Column_Info_Action_By_Type(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Column_Info_Action_By_Type(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class HRM_BranchService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Branch_Search(body: HRM_Branch_ENTITY | undefined): Observable<HRM_Branch_ENTITY[]> {
        let url_ = this.baseUrl + "/api/HRM_Branch/HRM_Branch_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Branch_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Branch_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Branch_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Branch_ENTITY[]>;
        }));
    }

    protected processHRM_Branch_Search(response: HttpResponseBase): Observable<HRM_Branch_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Branch_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Branch_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Branch_Actions(body: HRM_Branch_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/HRM_Branch/HRM_Branch_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Branch_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Branch_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Branch_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class HRM_WorkingTimeService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_WorkingTime_Search(body: HRM_WorkingTime_ENTITY | undefined): Observable<HRM_WorkingTime_ENTITY[]> {
        let url_ = this.baseUrl + "/api/HRM_WorkingTime/HRM_WorkingTime_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_WorkingTime_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_WorkingTime_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_WorkingTime_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_WorkingTime_ENTITY[]>;
        }));
    }

    protected processHRM_WorkingTime_Search(response: HttpResponseBase): Observable<HRM_WorkingTime_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_WorkingTime_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_WorkingTime_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_WorkTime_Detail_Search(body: HRM_Project_Management_Task_WorkTime_Detail_ENTITY | undefined): Observable<HRM_Project_Management_Task_WorkTime_Detail_ENTITY[]> {
        let url_ = this.baseUrl + "/api/HRM_WorkingTime/HRM_Project_Management_Task_WorkTime_Detail_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_WorkTime_Detail_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_WorkTime_Detail_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_WorkTime_Detail_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_WorkTime_Detail_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_WorkTime_Detail_Search(response: HttpResponseBase): Observable<HRM_Project_Management_Task_WorkTime_Detail_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_WorkTime_Detail_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_WorkTime_Detail_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_WorkTime_Search(body: HRM_Project_Management_Task_WorkTime_ENTITY | undefined): Observable<HRM_Project_Management_Task_WorkTime_ENTITY[]> {
        let url_ = this.baseUrl + "/api/HRM_WorkingTime/HRM_Project_Management_Task_WorkTime_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_WorkTime_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_WorkTime_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_WorkTime_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_WorkTime_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_WorkTime_Search(response: HttpResponseBase): Observable<HRM_Project_Management_Task_WorkTime_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_WorkTime_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_WorkTime_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_WorkTime_Status_Search(body: HRM_Project_Management_Task_WorkTime_Status_ENTITY | undefined): Observable<HRM_Project_Management_Task_WorkTime_Status_ENTITY[]> {
        let url_ = this.baseUrl + "/api/HRM_WorkingTime/HRM_Project_Management_Task_WorkTime_Status_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_WorkTime_Status_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_WorkTime_Status_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_WorkTime_Status_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_WorkTime_Status_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_WorkTime_Status_Search(response: HttpResponseBase): Observable<HRM_Project_Management_Task_WorkTime_Status_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_WorkTime_Status_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_WorkTime_Status_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_WorkTime_Insert(body: HRM_Project_Management_Task_WorkTime_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/HRM_WorkingTime/HRM_Project_Management_Task_WorkTime_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_WorkTime_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_WorkTime_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Task_WorkTime_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_WorkTime_Update(body: HRM_Project_Management_Task_WorkTime_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/HRM_WorkingTime/HRM_Project_Management_Task_WorkTime_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_WorkTime_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_WorkTime_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Task_WorkTime_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param account_code (optional) 
     * @param code (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_WorkTime_Bycode(account_code: string | null | undefined, code: string | null | undefined): Observable<HRM_Project_Management_Task_WorkTime_ENTITY[]> {
        let url_ = this.baseUrl + "/api/HRM_WorkingTime/HRM_Project_Management_Task_WorkTime_Bycode?";
        if (account_code !== undefined && account_code !== null)
            url_ += "account_code=" + encodeURIComponent("" + account_code) + "&";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_WorkTime_Bycode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_WorkTime_Bycode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_WorkTime_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_WorkTime_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_WorkTime_Bycode(response: HttpResponseBase): Observable<HRM_Project_Management_Task_WorkTime_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_WorkTime_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_WorkTime_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Report_Employee_Management_Task_WorkTime_Search(body: HRM_Report_Employee_Management_Task_WorkTime_ENTITY | undefined): Observable<HRM_Report_Employee_Management_Task_WorkTime_ENTITY[]> {
        let url_ = this.baseUrl + "/api/HRM_WorkingTime/HRM_Report_Employee_Management_Task_WorkTime_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Report_Employee_Management_Task_WorkTime_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Report_Employee_Management_Task_WorkTime_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Report_Employee_Management_Task_WorkTime_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Report_Employee_Management_Task_WorkTime_ENTITY[]>;
        }));
    }

    protected processHRM_Report_Employee_Management_Task_WorkTime_Search(response: HttpResponseBase): Observable<HRM_Report_Employee_Management_Task_WorkTime_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Report_Employee_Management_Task_WorkTime_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Report_Employee_Management_Task_WorkTime_ENTITY[]>(null as any);
    }
}

@Injectable()
export class MenuService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Menu_Search(body: SYS_Menu | undefined): Observable<SYS_Menu[]> {
        let url_ = this.baseUrl + "/api/Menu/SYS_Menu_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Menu_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Menu_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Menu[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Menu[]>;
        }));
    }

    protected processSYS_Menu_Search(response: HttpResponseBase): Observable<SYS_Menu[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Menu.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Menu[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Menu_Sub_Pin(body: SYS_Menu_Sub_Pin | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Menu/SYS_Menu_Sub_Pin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Menu_Sub_Pin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Menu_Sub_Pin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Menu_Sub_Pin(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Menu_Detail_Search(body: SYS_Menu_Sub | undefined): Observable<SYS_Menu_Sub[]> {
        let url_ = this.baseUrl + "/api/Menu/SYS_Menu_Detail_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Menu_Detail_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Menu_Detail_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Menu_Sub[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Menu_Sub[]>;
        }));
    }

    protected processSYS_Menu_Detail_Search(response: HttpResponseBase): Observable<SYS_Menu_Sub[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Menu_Sub.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Menu_Sub[]>(null as any);
    }

    /**
     * @param cODE (optional) 
     * @param userID (optional) 
     * @param type (optional) 
     * @return Success
     */
    sYS_Menu_Search_byID(cODE: string | null | undefined, userID: number | undefined, type: string | null | undefined): Observable<SYS_Menu> {
        let url_ = this.baseUrl + "/api/Menu/SYS_Menu_Search_byID?";
        if (cODE !== undefined && cODE !== null)
            url_ += "CODE=" + encodeURIComponent("" + cODE) + "&";
        if (userID === null)
            throw new Error("The parameter 'userID' cannot be null.");
        else if (userID !== undefined)
            url_ += "userID=" + encodeURIComponent("" + userID) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Menu_Search_byID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Menu_Search_byID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Menu>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Menu>;
        }));
    }

    protected processSYS_Menu_Search_byID(response: HttpResponseBase): Observable<SYS_Menu> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SYS_Menu.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Menu>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    sYS_Menu_Delete(id: number | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Menu/SYS_Menu_Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Menu_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Menu_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Menu_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Menu_Inserst(body: SYS_Menu | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Menu/SYS_Menu_Inserst";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Menu_Inserst(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Menu_Inserst(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Menu_Inserst(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Menu_Update(body: SYS_Menu | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Menu/SYS_Menu_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Menu_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Menu_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Menu_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @return Success
     */
    sYS_Account_Group_Search(): Observable<SYS_Account_Group[]> {
        let url_ = this.baseUrl + "/api/Menu/SYS_Account_Group_Search";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Account_Group_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Account_Group_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Account_Group[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Account_Group[]>;
        }));
    }

    protected processSYS_Account_Group_Search(response: HttpResponseBase): Observable<SYS_Account_Group[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Account_Group.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Account_Group[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Menu_Permission_Update(body: SYS_Menu | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Menu/SYS_Menu_Permission_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Menu_Permission_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Menu_Permission_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Menu_Permission_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Menu_Permission_Search(body: SYS_Menu_Permission_ENTITY | undefined): Observable<SYS_Menu_Permission_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Menu/SYS_Menu_Permission_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Menu_Permission_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Menu_Permission_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Menu_Permission_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Menu_Permission_ENTITY[]>;
        }));
    }

    protected processSYS_Menu_Permission_Search(response: HttpResponseBase): Observable<SYS_Menu_Permission_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Menu_Permission_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Menu_Permission_ENTITY[]>(null as any);
    }
}

@Injectable()
export class MessengerApiService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    realtime_Messenger(body: Messenger | undefined): Observable<Messenger[]> {
        let url_ = this.baseUrl + "/api/MessengerApi/Realtime_Messenger";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRealtime_Messenger(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRealtime_Messenger(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Messenger[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Messenger[]>;
        }));
    }

    protected processRealtime_Messenger(response: HttpResponseBase): Observable<Messenger[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Messenger.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Messenger[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    get_Messenger(body: ChatModel | undefined): Observable<ChatModel[]> {
        let url_ = this.baseUrl + "/api/MessengerApi/Get_Messenger";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet_Messenger(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_Messenger(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatModel[]>;
        }));
    }

    protected processGet_Messenger(response: HttpResponseBase): Observable<ChatModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ChatModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatModel[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    chat_GetHistoryMessenger(body: ChatModel | undefined): Observable<ChatModel[]> {
        let url_ = this.baseUrl + "/api/MessengerApi/Chat_GetHistoryMessenger";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processChat_GetHistoryMessenger(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChat_GetHistoryMessenger(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatModel[]>;
        }));
    }

    protected processChat_GetHistoryMessenger(response: HttpResponseBase): Observable<ChatModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ChatModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatModel[]>(null as any);
    }

    /**
     * @param list_employee (optional) 
     * @param type (optional) 
     * @return Success
     */
    getTokenFirebase(list_employee: string | null | undefined, type: string | null | undefined): Observable<string[]> {
        let url_ = this.baseUrl + "/api/MessengerApi/GetTokenFirebase?";
        if (list_employee !== undefined && list_employee !== null)
            url_ += "list_employee=" + encodeURIComponent("" + list_employee) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetTokenFirebase(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTokenFirebase(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processGetTokenFirebase(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    chat_Friend_Search(body: ChatModel | undefined): Observable<SYS_Account_Infomation[]> {
        let url_ = this.baseUrl + "/api/MessengerApi/Chat_Friend_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processChat_Friend_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChat_Friend_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_Account_Infomation[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_Account_Infomation[]>;
        }));
    }

    protected processChat_Friend_Search(response: HttpResponseBase): Observable<SYS_Account_Infomation[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_Account_Infomation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_Account_Infomation[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    chat_GetHistoryMessenger_By_Chat_ID(body: Chat_ContentModel | undefined): Observable<Chat_ContentModel[]> {
        let url_ = this.baseUrl + "/api/MessengerApi/Chat_GetHistoryMessenger_By_Chat_ID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processChat_GetHistoryMessenger_By_Chat_ID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChat_GetHistoryMessenger_By_Chat_ID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Chat_ContentModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Chat_ContentModel[]>;
        }));
    }

    protected processChat_GetHistoryMessenger_By_Chat_ID(response: HttpResponseBase): Observable<Chat_ContentModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Chat_ContentModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Chat_ContentModel[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    chat_Inserst(body: ChatModel | undefined): Observable<Chat_ContentModel[]> {
        let url_ = this.baseUrl + "/api/MessengerApi/Chat_Inserst";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processChat_Inserst(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChat_Inserst(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Chat_ContentModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Chat_ContentModel[]>;
        }));
    }

    protected processChat_Inserst(response: HttpResponseBase): Observable<Chat_ContentModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Chat_ContentModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Chat_ContentModel[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    chat_Update(body: ChatModel | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/MessengerApi/Chat_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processChat_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChat_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processChat_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param chat_id (optional) 
     * @return Success
     */
    chat_Get_New_Messenger_By_Chat_ID(chat_id: number | undefined): Observable<Chat_ContentModel[]> {
        let url_ = this.baseUrl + "/api/MessengerApi/Chat_Get_New_Messenger_By_Chat_ID?";
        if (chat_id === null)
            throw new Error("The parameter 'chat_id' cannot be null.");
        else if (chat_id !== undefined)
            url_ += "chat_id=" + encodeURIComponent("" + chat_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processChat_Get_New_Messenger_By_Chat_ID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChat_Get_New_Messenger_By_Chat_ID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Chat_ContentModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Chat_ContentModel[]>;
        }));
    }

    protected processChat_Get_New_Messenger_By_Chat_ID(response: HttpResponseBase): Observable<Chat_ContentModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Chat_ContentModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Chat_ContentModel[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Notification_Search(body: NotificationModel | undefined): Observable<NotificationModel[]> {
        let url_ = this.baseUrl + "/api/MessengerApi/HRM_Notification_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Notification_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Notification_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NotificationModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NotificationModel[]>;
        }));
    }

    protected processHRM_Notification_Search(response: HttpResponseBase): Observable<NotificationModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(NotificationModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NotificationModel[]>(null as any);
    }

    /**
     * @param account_id (optional) 
     * @return Success
     */
    hRM_Notification_Read(account_id: number | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/MessengerApi/HRM_Notification_Read?";
        if (account_id === null)
            throw new Error("The parameter 'account_id' cannot be null.");
        else if (account_id !== undefined)
            url_ += "account_id=" + encodeURIComponent("" + account_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Notification_Read(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Notification_Read(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Notification_Read(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param id (optional) 
     * @param account_id (optional) 
     * @return Success
     */
    hRM_Notification_View(id: number | undefined, account_id: number | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/MessengerApi/HRM_Notification_View?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (account_id === null)
            throw new Error("The parameter 'account_id' cannot be null.");
        else if (account_id !== undefined)
            url_ += "account_id=" + encodeURIComponent("" + account_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Notification_View(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Notification_View(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Notification_View(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class NotificationService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    notification_Setting_Update(body: Notification_Setting_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Notification/Notification_Setting_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processNotification_Setting_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNotification_Setting_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processNotification_Setting_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    notification_Setting_Search(body: Notification_Setting_Group_ENTITY | undefined): Observable<Notification_Setting_Group_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Notification/Notification_Setting_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processNotification_Setting_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNotification_Setting_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Notification_Setting_Group_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Notification_Setting_Group_ENTITY[]>;
        }));
    }

    protected processNotification_Setting_Search(response: HttpResponseBase): Observable<Notification_Setting_Group_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Notification_Setting_Group_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Notification_Setting_Group_ENTITY[]>(null as any);
    }
}

@Injectable()
export class NotificationHRMService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    notification_HRM_Search(body: Notification_HRM_ENTITY | undefined): Observable<Notification_HRM_ENTITY[]> {
        let url_ = this.baseUrl + "/api/NotificationHRM/Notification_HRM_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processNotification_HRM_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNotification_HRM_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Notification_HRM_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Notification_HRM_ENTITY[]>;
        }));
    }

    protected processNotification_HRM_Search(response: HttpResponseBase): Observable<Notification_HRM_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Notification_HRM_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Notification_HRM_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Notification_Read(body: Notification_HRM_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/NotificationHRM/HRM_Notification_Read";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Notification_Read(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Notification_Read(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Notification_Read(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Notification_View(body: Notification_HRM_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/NotificationHRM/HRM_Notification_View";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Notification_View(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Notification_View(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Notification_View(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class OBPurchaseService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Account_Delete(body: OB_Account_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBPurchase/OB_Account_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Account_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Account_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Account_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Account_Insert(body: OB_Account_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBPurchase/OB_Account_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Account_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Account_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Account_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Account_Search(body: OB_Account_ENTITY | undefined): Observable<OB_Account_ENTITY[]> {
        let url_ = this.baseUrl + "/api/OBPurchase/OB_Account_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Account_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Account_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OB_Account_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OB_Account_ENTITY[]>;
        }));
    }

    protected processOB_Account_Search(response: HttpResponseBase): Observable<OB_Account_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(OB_Account_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OB_Account_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Account_Update(body: OB_Account_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBPurchase/OB_Account_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Account_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Account_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Account_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Customer_Delete(body: OB_Customer_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBPurchase/OB_Customer_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Customer_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Customer_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Customer_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Customer_Insert(body: OB_Customer_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBPurchase/OB_Customer_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Customer_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Customer_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Customer_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Customer_Search(body: OB_Customer_ENTITY | undefined): Observable<OB_Customer_ENTITY[]> {
        let url_ = this.baseUrl + "/api/OBPurchase/OB_Customer_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Customer_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Customer_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OB_Customer_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OB_Customer_ENTITY[]>;
        }));
    }

    protected processOB_Customer_Search(response: HttpResponseBase): Observable<OB_Customer_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(OB_Customer_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OB_Customer_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Customer_Update(body: OB_Customer_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBPurchase/OB_Customer_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Customer_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Customer_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Customer_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class OBWMSService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Goods_Delete(body: OB_Goods_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBWMS/OB_Goods_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Goods_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Goods_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Goods_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Goods_Update(body: OB_Goods_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBWMS/OB_Goods_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Goods_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Goods_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Goods_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Goods_Insert(body: OB_Goods_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBWMS/OB_Goods_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Goods_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Goods_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Goods_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Goods_Search(body: OB_Goods_ENTITY | undefined): Observable<OB_Goods_ENTITY[]> {
        let url_ = this.baseUrl + "/api/OBWMS/OB_Goods_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Goods_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Goods_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OB_Goods_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OB_Goods_ENTITY[]>;
        }));
    }

    protected processOB_Goods_Search(response: HttpResponseBase): Observable<OB_Goods_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(OB_Goods_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OB_Goods_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Input_Output_Inventory_Delete(body: OB_Input_Output_Inventory_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBWMS/OB_Input_Output_Inventory_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Input_Output_Inventory_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Input_Output_Inventory_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Input_Output_Inventory_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Input_Output_Inventory_Update(body: OB_Input_Output_Inventory_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBWMS/OB_Input_Output_Inventory_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Input_Output_Inventory_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Input_Output_Inventory_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Input_Output_Inventory_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Input_Output_Inventory_Insert(body: OB_Input_Output_Inventory_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBWMS/OB_Input_Output_Inventory_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Input_Output_Inventory_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Input_Output_Inventory_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Input_Output_Inventory_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Input_Output_Inventory_Synchronized(body: OB_Input_Output_Inventory_Synchronized_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/OBWMS/OB_Input_Output_Inventory_Synchronized";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Input_Output_Inventory_Synchronized(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Input_Output_Inventory_Synchronized(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processOB_Input_Output_Inventory_Synchronized(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    oB_Input_Output_Inventory_Search(body: OB_Input_Output_Inventory_ENTITY | undefined): Observable<OB_Input_Output_Inventory_ENTITY[]> {
        let url_ = this.baseUrl + "/api/OBWMS/OB_Input_Output_Inventory_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processOB_Input_Output_Inventory_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOB_Input_Output_Inventory_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OB_Input_Output_Inventory_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OB_Input_Output_Inventory_ENTITY[]>;
        }));
    }

    protected processOB_Input_Output_Inventory_Search(response: HttpResponseBase): Observable<OB_Input_Output_Inventory_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(OB_Input_Output_Inventory_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OB_Input_Output_Inventory_ENTITY[]>(null as any);
    }
}

@Injectable()
export class ProductService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Update(body: POS_Product_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processPOS_Product_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Insert(body: POS_Product_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processPOS_Product_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    pOS_Product_Delete(code: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Delete?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processPOS_Product_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Color_Actions(body: POS_Product_Color_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Color_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Color_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Color_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processPOS_Product_Color_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Group_Actions(body: POS_Product_Group_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Group_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Group_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Group_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processPOS_Product_Group_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Group_Search(body: POS_Product_Group_ENTITY | undefined): Observable<POS_Product_Group_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Group_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Group_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Group_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<POS_Product_Group_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<POS_Product_Group_ENTITY[]>;
        }));
    }

    protected processPOS_Product_Group_Search(response: HttpResponseBase): Observable<POS_Product_Group_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(POS_Product_Group_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<POS_Product_Group_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Search(body: POS_Product_ENTITY | undefined): Observable<POS_Product_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<POS_Product_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<POS_Product_ENTITY[]>;
        }));
    }

    protected processPOS_Product_Search(response: HttpResponseBase): Observable<POS_Product_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(POS_Product_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<POS_Product_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Size_Actions(body: POS_Product_Size_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Size_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Size_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Size_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processPOS_Product_Size_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Unit_Actions(body: POS_Product_Unit_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Unit_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Unit_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Unit_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processPOS_Product_Unit_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Color_Search(body: POS_Product_Color_ENTITY | undefined): Observable<POS_Product_Color_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Color_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Color_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Color_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<POS_Product_Color_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<POS_Product_Color_ENTITY[]>;
        }));
    }

    protected processPOS_Product_Color_Search(response: HttpResponseBase): Observable<POS_Product_Color_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(POS_Product_Color_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<POS_Product_Color_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Size_Search(body: POS_Product_Size_ENTITY | undefined): Observable<POS_Product_Size_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Size_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Size_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Size_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<POS_Product_Size_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<POS_Product_Size_ENTITY[]>;
        }));
    }

    protected processPOS_Product_Size_Search(response: HttpResponseBase): Observable<POS_Product_Size_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(POS_Product_Size_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<POS_Product_Size_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Unit_Search(body: POS_Product_Unit_ENTITY | undefined): Observable<POS_Product_Unit_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Unit_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Unit_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Unit_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<POS_Product_Unit_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<POS_Product_Unit_ENTITY[]>;
        }));
    }

    protected processPOS_Product_Unit_Search(response: HttpResponseBase): Observable<POS_Product_Unit_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(POS_Product_Unit_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<POS_Product_Unit_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Gift_Actions(body: POS_Product_Gift_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Gift_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Gift_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Gift_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processPOS_Product_Gift_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pOS_Product_Gift_Search(body: POS_Product_Gift_ENTITY | undefined): Observable<POS_Product_Gift_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Product/POS_Product_Gift_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPOS_Product_Gift_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPOS_Product_Gift_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<POS_Product_Gift_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<POS_Product_Gift_ENTITY[]>;
        }));
    }

    protected processPOS_Product_Gift_Search(response: HttpResponseBase): Observable<POS_Product_Gift_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(POS_Product_Gift_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<POS_Product_Gift_ENTITY[]>(null as any);
    }
}

@Injectable()
export class ProjectManagementService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Delete(body: HRM_Project_Management_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Insert(body: HRM_Project_Management_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Search(body: HRM_Project_Management_ENTITY | undefined): Observable<HRM_Project_Management_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Search(response: HttpResponseBase): Observable<HRM_Project_Management_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Dashboard_Workflow_Search(body: HRM_Project_Management_Dashboard_Workflow_ENTITY | undefined): Observable<HRM_Project_Management_Dashboard_Workflow_ENTITY> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Dashboard_Workflow_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Dashboard_Workflow_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Dashboard_Workflow_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Dashboard_Workflow_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Dashboard_Workflow_ENTITY>;
        }));
    }

    protected processHRM_Project_Management_Dashboard_Workflow_Search(response: HttpResponseBase): Observable<HRM_Project_Management_Dashboard_Workflow_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Project_Management_Dashboard_Workflow_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Dashboard_Workflow_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Report_Project_Percent_Search(body: HRM_Project_Management_Report_Project_Percent_ENTITY | undefined): Observable<HRM_Project_Management_Report_Project_Percent_ENTITY> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Report_Project_Percent_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Report_Project_Percent_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Report_Project_Percent_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Report_Project_Percent_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Report_Project_Percent_ENTITY>;
        }));
    }

    protected processHRM_Project_Management_Report_Project_Percent_Search(response: HttpResponseBase): Observable<HRM_Project_Management_Report_Project_Percent_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Project_Management_Report_Project_Percent_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Report_Project_Percent_ENTITY>(null as any);
    }

    /**
     * @param task_code (optional) 
     * @param is_pin (optional) 
     * @param account_code (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Pin(task_code: string | null | undefined, is_pin: boolean | undefined, account_code: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Pin?";
        if (task_code !== undefined && task_code !== null)
            url_ += "task_code=" + encodeURIComponent("" + task_code) + "&";
        if (is_pin === null)
            throw new Error("The parameter 'is_pin' cannot be null.");
        else if (is_pin !== undefined)
            url_ += "is_pin=" + encodeURIComponent("" + is_pin) + "&";
        if (account_code !== undefined && account_code !== null)
            url_ += "account_code=" + encodeURIComponent("" + account_code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Pin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Pin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Task_Pin(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Delete(body: HRM_Project_Management_Task_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Task_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Insert(body: HRM_Project_Management_Task_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Task_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Search(body: HRM_Project_Management_Task_ENTITY | undefined): Observable<HRM_Project_Management_Task_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_Search(response: HttpResponseBase): Observable<HRM_Project_Management_Task_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_ENTITY[]>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    hRM_Project_Management_Search_ByCode(code: string | null | undefined): Observable<HRM_Project_Management_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Search_ByCode?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Search_ByCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Search_ByCode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Search_ByCode(response: HttpResponseBase): Observable<HRM_Project_Management_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_ENTITY[]>(null as any);
    }

    /**
     * @return Success
     */
    hRM_Project_Management_Task_Status_Search(): Observable<HRM_Project_Management_Task_Status_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Status_Search";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Status_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Status_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_Status_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_Status_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_Status_Search(response: HttpResponseBase): Observable<HRM_Project_Management_Task_Status_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_Status_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_Status_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Update(body: HRM_Project_Management_Task_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Task_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Update(body: HRM_Project_Management_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Comment_Insert(body: HRM_Project_Management_Task_Comment_ENTITY | undefined): Observable<HRM_Project_Management_Task_Comment_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Comment_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Comment_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Comment_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_Comment_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_Comment_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_Comment_Insert(response: HttpResponseBase): Observable<HRM_Project_Management_Task_Comment_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_Comment_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_Comment_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Comment_Search(body: HRM_Project_Management_Task_Comment_ENTITY | undefined): Observable<HRM_Project_Management_Task_Comment_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Comment_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Comment_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Comment_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_Comment_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_Comment_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_Comment_Search(response: HttpResponseBase): Observable<HRM_Project_Management_Task_Comment_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_Comment_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_Comment_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Type_Search(body: HRM_Project_Management_Task_Type_ENTITY | undefined): Observable<HRM_Project_Management_Task_Type_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Type_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Type_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Type_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_Type_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_Type_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_Type_Search(response: HttpResponseBase): Observable<HRM_Project_Management_Task_Type_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_Type_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_Type_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Type_Actions(body: HRM_Project_Management_Task_Type_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Type_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Type_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Type_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Task_Type_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Proprity_Level_Search(body: HRM_Project_Management_Task_Proprity_Level_ENTITY | undefined): Observable<HRM_Project_Management_Task_Proprity_Level_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Proprity_Level_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Proprity_Level_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Proprity_Level_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_Proprity_Level_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_Proprity_Level_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_Proprity_Level_Search(response: HttpResponseBase): Observable<HRM_Project_Management_Task_Proprity_Level_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_Proprity_Level_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_Proprity_Level_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Proprity_Level_Actions(body: HRM_Project_Management_Task_Proprity_Level_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Proprity_Level_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Proprity_Level_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Proprity_Level_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Task_Proprity_Level_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param code (optional) 
     * @param type (optional) 
     * @param user_login (optional) 
     * @param to_user (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Notification_Update(code: string | null | undefined, type: string | null | undefined, user_login: string | null | undefined, to_user: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Notification_Update?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (user_login !== undefined && user_login !== null)
            url_ += "user_login=" + encodeURIComponent("" + user_login) + "&";
        if (to_user !== undefined && to_user !== null)
            url_ += "to_user=" + encodeURIComponent("" + to_user) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Notification_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Notification_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Project_Management_Task_Notification_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param level_task (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_Search_Menu(level_task: string | null | undefined): Observable<HRM_Project_Management_Task_Level_ENTITY[]> {
        let url_ = this.baseUrl + "/api/ProjectManagement/HRM_Project_Management_Task_Search_Menu?";
        if (level_task !== undefined && level_task !== null)
            url_ += "level_task=" + encodeURIComponent("" + level_task) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_Search_Menu(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_Search_Menu(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Project_Management_Task_Level_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Project_Management_Task_Level_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_Search_Menu(response: HttpResponseBase): Observable<HRM_Project_Management_Task_Level_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Project_Management_Task_Level_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Project_Management_Task_Level_ENTITY[]>(null as any);
    }
}

@Injectable()
export class PurchaseReportService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pUR_Accounts_Payable_Ledger_Search(body: PUR_Accounts_Payable_Ledger_ENTITY | undefined): Observable<PUR_Accounts_Payable_Ledger_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseReport/PUR_Accounts_Payable_Ledger_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPUR_Accounts_Payable_Ledger_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPUR_Accounts_Payable_Ledger_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PUR_Accounts_Payable_Ledger_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PUR_Accounts_Payable_Ledger_ENTITY[]>;
        }));
    }

    protected processPUR_Accounts_Payable_Ledger_Search(response: HttpResponseBase): Observable<PUR_Accounts_Payable_Ledger_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(PUR_Accounts_Payable_Ledger_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PUR_Accounts_Payable_Ledger_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pUR_Accounts_Payable_Report_By_Invoice_Search(body: PUR_Accounts_Payable_Report_By_Invoice_ENTITY | undefined): Observable<PUR_Accounts_Payable_Report_By_Invoice_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseReport/PUR_Accounts_Payable_Report_By_Invoice_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPUR_Accounts_Payable_Report_By_Invoice_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPUR_Accounts_Payable_Report_By_Invoice_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PUR_Accounts_Payable_Report_By_Invoice_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PUR_Accounts_Payable_Report_By_Invoice_ENTITY[]>;
        }));
    }

    protected processPUR_Accounts_Payable_Report_By_Invoice_Search(response: HttpResponseBase): Observable<PUR_Accounts_Payable_Report_By_Invoice_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(PUR_Accounts_Payable_Report_By_Invoice_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PUR_Accounts_Payable_Report_By_Invoice_ENTITY[]>(null as any);
    }
}

@Injectable()
export class PurchaseVoucherService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p21_M_Search(body: P21_M_ENTITY | undefined): Observable<P21_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P21_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP21_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP21_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P21_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P21_M_ENTITY[]>;
        }));
    }

    protected processP21_M_Search(response: HttpResponseBase): Observable<P21_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P21_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P21_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p21_D_Search(body: P21_D_ENTITY | undefined): Observable<P21_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P21_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP21_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP21_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P21_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P21_D_ENTITY[]>;
        }));
    }

    protected processP21_D_Search(response: HttpResponseBase): Observable<P21_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P21_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P21_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p21_M_Insert(body: P21_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P21_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP21_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP21_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP21_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p21_M_Update(body: P21_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P21_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP21_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP21_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP21_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p21_M_Delete(body: P21_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P21_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP21_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP21_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP21_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p22_D_Search(body: P22_D_ENTITY | undefined): Observable<P22_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P22_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP22_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP22_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P22_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P22_D_ENTITY[]>;
        }));
    }

    protected processP22_D_Search(response: HttpResponseBase): Observable<P22_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P22_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P22_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p22_M_Search(body: P22_M_ENTITY | undefined): Observable<P22_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P22_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP22_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP22_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P22_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P22_M_ENTITY[]>;
        }));
    }

    protected processP22_M_Search(response: HttpResponseBase): Observable<P22_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P22_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P22_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p22_M_Delete(body: P22_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P22_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP22_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP22_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP22_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p22_M_Insert(body: P22_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P22_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP22_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP22_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP22_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p22_M_Update(body: P22_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P22_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP22_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP22_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP22_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p23_D_Search(body: P23_D_ENTITY | undefined): Observable<P23_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P23_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP23_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP23_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P23_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P23_D_ENTITY[]>;
        }));
    }

    protected processP23_D_Search(response: HttpResponseBase): Observable<P23_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P23_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P23_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p23_M_Search(body: P23_M_ENTITY | undefined): Observable<P23_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P23_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP23_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP23_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P23_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P23_M_ENTITY[]>;
        }));
    }

    protected processP23_M_Search(response: HttpResponseBase): Observable<P23_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P23_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P23_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p23_M_Delete(body: P23_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P23_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP23_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP23_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP23_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p23_M_Insert(body: P23_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P23_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP23_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP23_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP23_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p23_M_Update(body: P23_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P23_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP23_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP23_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP23_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p24_M_Search(body: P24_M_ENTITY | undefined): Observable<P24_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P24_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP24_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP24_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P24_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P24_M_ENTITY[]>;
        }));
    }

    protected processP24_M_Search(response: HttpResponseBase): Observable<P24_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P24_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P24_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p24_D_Search(body: P24_D_ENTITY | undefined): Observable<P24_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P24_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP24_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP24_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P24_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P24_D_ENTITY[]>;
        }));
    }

    protected processP24_D_Search(response: HttpResponseBase): Observable<P24_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P24_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P24_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p24_M_Insert(body: P24_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P24_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP24_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP24_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP24_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p24_M_Update(body: P24_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P24_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP24_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP24_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP24_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p24_M_Delete(body: P24_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P24_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP24_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP24_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP24_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p25_M_Search(body: P25_M_ENTITY | undefined): Observable<P25_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P25_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP25_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP25_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P25_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P25_M_ENTITY[]>;
        }));
    }

    protected processP25_M_Search(response: HttpResponseBase): Observable<P25_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P25_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P25_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p25_D_Search(body: P25_D_ENTITY | undefined): Observable<P25_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P25_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP25_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP25_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P25_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P25_D_ENTITY[]>;
        }));
    }

    protected processP25_D_Search(response: HttpResponseBase): Observable<P25_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P25_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P25_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p25_M_Insert(body: P25_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P25_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP25_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP25_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP25_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p25_M_Update(body: P25_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P25_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP25_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP25_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP25_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p25_M_Delete(body: P25_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P25_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP25_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP25_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP25_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p26_M_Search(body: P26_M_ENTITY | undefined): Observable<P26_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P26_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP26_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP26_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P26_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P26_M_ENTITY[]>;
        }));
    }

    protected processP26_M_Search(response: HttpResponseBase): Observable<P26_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P26_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P26_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p26_D_Search(body: P26_D_ENTITY | undefined): Observable<P26_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P26_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP26_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP26_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<P26_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<P26_D_ENTITY[]>;
        }));
    }

    protected processP26_D_Search(response: HttpResponseBase): Observable<P26_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(P26_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<P26_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p26_M_Insert(body: P26_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P26_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP26_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP26_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP26_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p26_M_Update(body: P26_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P26_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP26_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP26_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP26_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    p26_M_Delete(body: P26_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/PurchaseVoucher/P26_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processP26_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processP26_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processP26_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class ReferenceService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    sYS_Version_UI_Search(): Observable<{ [key: string]: string; }> {
        let url_ = this.baseUrl + "/api/Reference/SYS_Version_UI_Search";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Version_UI_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Version_UI_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: string; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: string; }>;
        }));
    }

    protected processSYS_Version_UI_Search(response: HttpResponseBase): Observable<{ [key: string]: string; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: string; }>(null as any);
    }

    /**
     * @param stored (optional) 
     * @param param (optional) 
     * @return Success
     */
    reference_Search_V2(stored: string | null | undefined, param: string | null | undefined): Observable<REFERENCE_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Reference/Reference_Search_V2?";
        if (stored !== undefined && stored !== null)
            url_ += "stored=" + encodeURIComponent("" + stored) + "&";
        if (param !== undefined && param !== null)
            url_ += "param=" + encodeURIComponent("" + param) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReference_Search_V2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReference_Search_V2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<REFERENCE_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<REFERENCE_ENTITY[]>;
        }));
    }

    protected processReference_Search_V2(response: HttpResponseBase): Observable<REFERENCE_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(REFERENCE_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<REFERENCE_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reference_Search(body: REFERENCE_ENTITY | undefined): Observable<REFERENCE_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Reference/Reference_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReference_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReference_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<REFERENCE_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<REFERENCE_ENTITY[]>;
        }));
    }

    protected processReference_Search(response: HttpResponseBase): Observable<REFERENCE_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(REFERENCE_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<REFERENCE_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reference_V2_Search(body: REFERENCE_ENTITY | undefined): Observable<REFERENCE_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Reference/Reference_V2_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReference_V2_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReference_V2_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<REFERENCE_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<REFERENCE_ENTITY[]>;
        }));
    }

    protected processReference_V2_Search(response: HttpResponseBase): Observable<REFERENCE_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(REFERENCE_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<REFERENCE_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reference_V3_Search(body: REFERENCE_V3_Param | undefined): Observable<REFERENCE_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Reference/Reference_V3_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReference_V3_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReference_V3_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<REFERENCE_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<REFERENCE_ENTITY[]>;
        }));
    }

    protected processReference_V3_Search(response: HttpResponseBase): Observable<REFERENCE_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(REFERENCE_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<REFERENCE_ENTITY[]>(null as any);
    }
}

@Injectable()
export class ReportViewerService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getFile(): Observable<void> {
        let url_ = this.baseUrl + "/api/ReportViewer/GetFile/api/getFile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetFile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

@Injectable()
export class SalesCategoryService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Contract_Action_By_Type(body: CAT_Contract_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Contract_Action_By_Type";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Contract_Action_By_Type(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Contract_Action_By_Type(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Contract_Action_By_Type(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Contract_Search(body: CAT_Contract_ENTITY | undefined): Observable<CAT_Contract_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Contract_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Contract_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Contract_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Contract_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Contract_ENTITY[]>;
        }));
    }

    protected processCAT_Contract_Search(response: HttpResponseBase): Observable<CAT_Contract_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Contract_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Contract_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Customer_Group_Action_By_Type(body: CAT_Customer_Group_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Customer_Group_Action_By_Type";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Customer_Group_Action_By_Type(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Customer_Group_Action_By_Type(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Customer_Group_Action_By_Type(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Customer_Group_Search(body: CAT_Customer_Group_ENTITY | undefined): Observable<CAT_Customer_Group_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Customer_Group_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Customer_Group_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Customer_Group_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Customer_Group_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Customer_Group_ENTITY[]>;
        }));
    }

    protected processCAT_Customer_Group_Search(response: HttpResponseBase): Observable<CAT_Customer_Group_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Customer_Group_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Customer_Group_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Customer_Search(body: CAT_Customer_ENTITY | undefined): Observable<CAT_Customer_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Customer_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Customer_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Customer_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Customer_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Customer_ENTITY[]>;
        }));
    }

    protected processCAT_Customer_Search(response: HttpResponseBase): Observable<CAT_Customer_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Customer_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Customer_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Customer_Insert(body: CAT_Customer_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Customer_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Customer_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Customer_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Customer_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Customer_Update(body: CAT_Customer_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Customer_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Customer_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Customer_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Customer_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Customer_Delete(body: CAT_Customer_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Customer_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Customer_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Customer_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Customer_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Warranty_Certificate_Search(body: CAT_Warranty_Certificate_ENTITY | undefined): Observable<CAT_Warranty_Certificate_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Warranty_Certificate_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Warranty_Certificate_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Warranty_Certificate_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Warranty_Certificate_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Warranty_Certificate_ENTITY[]>;
        }));
    }

    protected processCAT_Warranty_Certificate_Search(response: HttpResponseBase): Observable<CAT_Warranty_Certificate_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Warranty_Certificate_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Warranty_Certificate_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Warranty_Certificate_Insert(body: CAT_Warranty_Certificate_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Warranty_Certificate_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Warranty_Certificate_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Warranty_Certificate_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Warranty_Certificate_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Warranty_Certificate_Update(body: CAT_Warranty_Certificate_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Warranty_Certificate_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Warranty_Certificate_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Warranty_Certificate_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Warranty_Certificate_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Warranty_Certificate_Delete(body: CAT_Warranty_Certificate_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesCategory/CAT_Warranty_Certificate_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Warranty_Certificate_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Warranty_Certificate_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Warranty_Certificate_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class SalesReportService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sales_Report_Of_Accounts_Receivable_Balances_Search(body: Sales_Report_Of_Accounts_Receivable_Balances_ENTITY | undefined): Observable<Sales_Report_Of_Accounts_Receivable_Balances_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/Sales_Report_Of_Accounts_Receivable_Balances_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSales_Report_Of_Accounts_Receivable_Balances_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSales_Report_Of_Accounts_Receivable_Balances_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Sales_Report_Of_Accounts_Receivable_Balances_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Sales_Report_Of_Accounts_Receivable_Balances_ENTITY[]>;
        }));
    }

    protected processSales_Report_Of_Accounts_Receivable_Balances_Search(response: HttpResponseBase): Observable<Sales_Report_Of_Accounts_Receivable_Balances_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Sales_Report_Of_Accounts_Receivable_Balances_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Sales_Report_Of_Accounts_Receivable_Balances_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sales_Report_Inventory_Materials_Search(body: Sales_Report_Inventory_Materials_ENTITY | undefined): Observable<Sales_Report_Inventory_Materials_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/Sales_Report_Inventory_Materials_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSales_Report_Inventory_Materials_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSales_Report_Inventory_Materials_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Sales_Report_Inventory_Materials_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Sales_Report_Inventory_Materials_ENTITY[]>;
        }));
    }

    protected processSales_Report_Inventory_Materials_Search(response: HttpResponseBase): Observable<Sales_Report_Inventory_Materials_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Sales_Report_Inventory_Materials_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Sales_Report_Inventory_Materials_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sALES_Report_S32_Search(body: SALES_Report_S32_ENTITY | undefined): Observable<SALES_Report_S32_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/SALES_Report_S32_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSALES_Report_S32_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSALES_Report_S32_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SALES_Report_S32_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SALES_Report_S32_ENTITY[]>;
        }));
    }

    protected processSALES_Report_S32_Search(response: HttpResponseBase): Observable<SALES_Report_S32_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SALES_Report_S32_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SALES_Report_S32_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sALES_Report_S33_Search(body: SALES_Report_S33_ENTITY | undefined): Observable<SALES_Report_S33_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/SALES_Report_S33_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSALES_Report_S33_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSALES_Report_S33_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SALES_Report_S33_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SALES_Report_S33_ENTITY[]>;
        }));
    }

    protected processSALES_Report_S33_Search(response: HttpResponseBase): Observable<SALES_Report_S33_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SALES_Report_S33_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SALES_Report_S33_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sALES_Report_S32_Sales_Search(body: SALES_Report_S32_Sales_ENTITY | undefined): Observable<SALES_Report_S32_Sales_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/SALES_Report_S32_Sales_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSALES_Report_S32_Sales_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSALES_Report_S32_Sales_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SALES_Report_S32_Sales_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SALES_Report_S32_Sales_ENTITY[]>;
        }));
    }

    protected processSALES_Report_S32_Sales_Search(response: HttpResponseBase): Observable<SALES_Report_S32_Sales_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SALES_Report_S32_Sales_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SALES_Report_S32_Sales_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sALES_Report_Gross_Profit_Search(body: SALES_Report_Gross_Profit_ENTITY | undefined): Observable<SALES_Report_Gross_Profit_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/SALES_Report_Gross_Profit_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSALES_Report_Gross_Profit_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSALES_Report_Gross_Profit_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SALES_Report_Gross_Profit_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SALES_Report_Gross_Profit_ENTITY[]>;
        }));
    }

    protected processSALES_Report_Gross_Profit_Search(response: HttpResponseBase): Observable<SALES_Report_Gross_Profit_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SALES_Report_Gross_Profit_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SALES_Report_Gross_Profit_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sALES_Report_Sales_Daybook_Search(body: SALES_Report_Sales_Daybook_ENTITY | undefined): Observable<SALES_Report_Sales_Daybook_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/SALES_Report_Sales_Daybook_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSALES_Report_Sales_Daybook_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSALES_Report_Sales_Daybook_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SALES_Report_Sales_Daybook_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SALES_Report_Sales_Daybook_ENTITY[]>;
        }));
    }

    protected processSALES_Report_Sales_Daybook_Search(response: HttpResponseBase): Observable<SALES_Report_Sales_Daybook_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SALES_Report_Sales_Daybook_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SALES_Report_Sales_Daybook_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sales_CAT_Goods_Configuration_Report_Search(body: Sales_CAT_Goods_Configuration_Report_ENTITY | undefined): Observable<Sales_CAT_Goods_Configuration_Report_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/Sales_CAT_Goods_Configuration_Report_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSales_CAT_Goods_Configuration_Report_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSales_CAT_Goods_Configuration_Report_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Sales_CAT_Goods_Configuration_Report_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Sales_CAT_Goods_Configuration_Report_ENTITY[]>;
        }));
    }

    protected processSales_CAT_Goods_Configuration_Report_Search(response: HttpResponseBase): Observable<Sales_CAT_Goods_Configuration_Report_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Sales_CAT_Goods_Configuration_Report_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Sales_CAT_Goods_Configuration_Report_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sALE_Accounts_Receivable_Ledger_Search(body: SALE_Accounts_Receivable_Ledger_ENTITY | undefined): Observable<SALE_Accounts_Receivable_Ledger_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/SALE_Accounts_Receivable_Ledger_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSALE_Accounts_Receivable_Ledger_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSALE_Accounts_Receivable_Ledger_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SALE_Accounts_Receivable_Ledger_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SALE_Accounts_Receivable_Ledger_ENTITY[]>;
        }));
    }

    protected processSALE_Accounts_Receivable_Ledger_Search(response: HttpResponseBase): Observable<SALE_Accounts_Receivable_Ledger_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SALE_Accounts_Receivable_Ledger_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SALE_Accounts_Receivable_Ledger_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sALE_Statement_Of_Changes_In_Financial_Position_Search(body: SALE_Statement_Of_Changes_In_Financial_Position_ENTITY | undefined): Observable<SALE_Statement_Of_Changes_In_Financial_Position_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/SALE_Statement_Of_Changes_In_Financial_Position_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSALE_Statement_Of_Changes_In_Financial_Position_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSALE_Statement_Of_Changes_In_Financial_Position_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SALE_Statement_Of_Changes_In_Financial_Position_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SALE_Statement_Of_Changes_In_Financial_Position_ENTITY[]>;
        }));
    }

    protected processSALE_Statement_Of_Changes_In_Financial_Position_Search(response: HttpResponseBase): Observable<SALE_Statement_Of_Changes_In_Financial_Position_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SALE_Statement_Of_Changes_In_Financial_Position_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SALE_Statement_Of_Changes_In_Financial_Position_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_Search(body: SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY | undefined): Observable<SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY[]>;
        }));
    }

    protected processSALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_Search(response: HttpResponseBase): Observable<SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sALE_Year_End_Balance_Sheet_Compilation_Search(body: SALE_Year_End_Balance_Sheet_Compilation_ENTITY | undefined): Observable<SALE_Year_End_Balance_Sheet_Compilation_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesReport/SALE_Year_End_Balance_Sheet_Compilation_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSALE_Year_End_Balance_Sheet_Compilation_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSALE_Year_End_Balance_Sheet_Compilation_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SALE_Year_End_Balance_Sheet_Compilation_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SALE_Year_End_Balance_Sheet_Compilation_ENTITY[]>;
        }));
    }

    protected processSALE_Year_End_Balance_Sheet_Compilation_Search(response: HttpResponseBase): Observable<SALE_Year_End_Balance_Sheet_Compilation_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SALE_Year_End_Balance_Sheet_Compilation_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SALE_Year_End_Balance_Sheet_Compilation_ENTITY[]>(null as any);
    }
}

@Injectable()
export class SalesVATService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    accounting_VAT_Output_Search(body: Accounting_VAT_Output_ENTITY | undefined): Observable<Accounting_VAT_Output_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVAT/Accounting_VAT_Output_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAccounting_VAT_Output_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccounting_VAT_Output_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Accounting_VAT_Output_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Accounting_VAT_Output_ENTITY[]>;
        }));
    }

    protected processAccounting_VAT_Output_Search(response: HttpResponseBase): Observable<Accounting_VAT_Output_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Accounting_VAT_Output_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Accounting_VAT_Output_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    accounting_VAT_Output_Insert(body: Accounting_VAT_Output_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVAT/Accounting_VAT_Output_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAccounting_VAT_Output_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccounting_VAT_Output_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAccounting_VAT_Output_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    accounting_VAT_Output_Update(body: Accounting_VAT_Output_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVAT/Accounting_VAT_Output_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAccounting_VAT_Output_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccounting_VAT_Output_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAccounting_VAT_Output_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    accounting_VAT_Output_Delete(body: Accounting_VAT_Output_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVAT/Accounting_VAT_Output_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAccounting_VAT_Output_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccounting_VAT_Output_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAccounting_VAT_Output_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    accounting_VAT_Input_Search(body: Accounting_VAT_Input_ENTITY | undefined): Observable<Accounting_VAT_Input_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVAT/Accounting_VAT_Input_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAccounting_VAT_Input_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccounting_VAT_Input_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Accounting_VAT_Input_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Accounting_VAT_Input_ENTITY[]>;
        }));
    }

    protected processAccounting_VAT_Input_Search(response: HttpResponseBase): Observable<Accounting_VAT_Input_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Accounting_VAT_Input_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Accounting_VAT_Input_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    accounting_VAT_Input_Insert(body: Accounting_VAT_Input_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVAT/Accounting_VAT_Input_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAccounting_VAT_Input_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccounting_VAT_Input_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAccounting_VAT_Input_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    accounting_VAT_Input_Update(body: Accounting_VAT_Input_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVAT/Accounting_VAT_Input_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAccounting_VAT_Input_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccounting_VAT_Input_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAccounting_VAT_Input_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    accounting_VAT_Input_Delete(body: Accounting_VAT_Input_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVAT/Accounting_VAT_Input_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAccounting_VAT_Input_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccounting_VAT_Input_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processAccounting_VAT_Input_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Tax_Search(body: CAT_Tax_ENTITY | undefined): Observable<CAT_Tax_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVAT/CAT_Tax_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Tax_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Tax_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Tax_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Tax_ENTITY[]>;
        }));
    }

    protected processCAT_Tax_Search(response: HttpResponseBase): Observable<CAT_Tax_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Tax_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Tax_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Tax_Insert(body: CAT_Tax_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVAT/CAT_Tax_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Tax_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Tax_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Tax_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Tax_Update(body: CAT_Tax_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVAT/CAT_Tax_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Tax_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Tax_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Tax_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Tax_Delete(body: CAT_Tax_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVAT/CAT_Tax_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Tax_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Tax_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Tax_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class SalesVoucherService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s31_M_Search(body: S31_M_ENTITY | undefined): Observable<S31_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S31_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS31_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS31_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<S31_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<S31_M_ENTITY[]>;
        }));
    }

    protected processS31_M_Search(response: HttpResponseBase): Observable<S31_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(S31_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<S31_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s31_D_Search(body: S31_D_ENTITY | undefined): Observable<S31_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S31_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS31_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS31_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<S31_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<S31_D_ENTITY[]>;
        }));
    }

    protected processS31_D_Search(response: HttpResponseBase): Observable<S31_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(S31_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<S31_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s31_M_Insert(body: S31_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S31_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS31_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS31_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS31_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s31_M_Update(body: S31_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S31_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS31_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS31_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS31_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s31_M_Delete(body: S31_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S31_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS31_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS31_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS31_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s32_M_Search(body: S32_M_ENTITY | undefined): Observable<S32_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S32_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS32_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS32_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<S32_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<S32_M_ENTITY[]>;
        }));
    }

    protected processS32_M_Search(response: HttpResponseBase): Observable<S32_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(S32_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<S32_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s32_D_Search(body: S32_D_ENTITY | undefined): Observable<S32_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S32_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS32_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS32_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<S32_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<S32_D_ENTITY[]>;
        }));
    }

    protected processS32_D_Search(response: HttpResponseBase): Observable<S32_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(S32_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<S32_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s32_M_Insert(body: S32_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S32_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS32_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS32_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS32_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s32_M_Update(body: S32_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S32_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS32_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS32_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS32_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s32_M_Delete(body: S32_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S32_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS32_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS32_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS32_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s33_M_Search(body: S33_M_ENTITY | undefined): Observable<S33_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S33_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS33_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS33_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<S33_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<S33_M_ENTITY[]>;
        }));
    }

    protected processS33_M_Search(response: HttpResponseBase): Observable<S33_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(S33_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<S33_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s33_D_Search(body: S33_D_ENTITY | undefined): Observable<S33_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S33_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS33_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS33_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<S33_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<S33_D_ENTITY[]>;
        }));
    }

    protected processS33_D_Search(response: HttpResponseBase): Observable<S33_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(S33_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<S33_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s33_M_Insert(body: S33_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S33_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS33_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS33_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS33_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s33_M_Update(body: S33_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S33_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS33_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS33_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS33_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s33_M_Delete(body: S33_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S33_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS33_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS33_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS33_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s34_M_Search(body: S34_M_ENTITY | undefined): Observable<S34_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S34_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS34_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS34_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<S34_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<S34_M_ENTITY[]>;
        }));
    }

    protected processS34_M_Search(response: HttpResponseBase): Observable<S34_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(S34_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<S34_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s34_D_Search(body: S34_D_ENTITY | undefined): Observable<S34_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S34_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS34_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS34_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<S34_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<S34_D_ENTITY[]>;
        }));
    }

    protected processS34_D_Search(response: HttpResponseBase): Observable<S34_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(S34_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<S34_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s34_M_Insert(body: S34_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S34_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS34_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS34_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS34_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s34_M_Update(body: S34_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S34_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS34_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS34_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS34_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    s34_M_Delete(body: S34_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SalesVoucher/S34_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processS34_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processS34_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processS34_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class SignalRService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    messenger_notification(body: Messenger | undefined): Observable<Messenger> {
        let url_ = this.baseUrl + "/api/SignalR/messenger_notification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processMessenger_notification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMessenger_notification(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Messenger>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Messenger>;
        }));
    }

    protected processMessenger_notification(response: HttpResponseBase): Observable<Messenger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Messenger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Messenger>(null as any);
    }

    /**
     * @param to (optional) 
     * @param body (optional) 
     * @param image (optional) 
     * @return Success
     */
    notification(to: string | null | undefined, body: string | null | undefined, image: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/SignalR/Notification?";
        if (to !== undefined && to !== null)
            url_ += "to=" + encodeURIComponent("" + to) + "&";
        if (body !== undefined && body !== null)
            url_ += "body=" + encodeURIComponent("" + body) + "&";
        if (image !== undefined && image !== null)
            url_ += "image=" + encodeURIComponent("" + image) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processNotification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNotification(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processNotification(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @return Success
     */
    timeKeepingNotification(): Observable<void> {
        let url_ = this.baseUrl + "/api/SignalR/TimeKeepingNotification";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTimeKeepingNotification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTimeKeepingNotification(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTimeKeepingNotification(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    chat_history(body: Messenger | undefined): Observable<ChatModel[]> {
        let url_ = this.baseUrl + "/api/SignalR/chat_history";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processChat_history(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChat_history(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatModel[]>;
        }));
    }

    protected processChat_history(response: HttpResponseBase): Observable<ChatModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ChatModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatModel[]>(null as any);
    }
}

@Injectable()
export class SYSCommonService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_List_App_Actions(body: SYS_List_App_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SYSCommon/SYS_List_App_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_List_App_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_List_App_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_List_App_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_List_App_Search(body: SYS_List_App_ENTITY | undefined): Observable<SYS_List_App_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SYSCommon/SYS_List_App_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_List_App_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_List_App_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_List_App_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_List_App_ENTITY[]>;
        }));
    }

    protected processSYS_List_App_Search(response: HttpResponseBase): Observable<SYS_List_App_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_List_App_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_List_App_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_List_Company_Search(body: SYS_List_Company_ENTITY | undefined): Observable<SYS_List_Company_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SYSCommon/SYS_List_Company_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_List_Company_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_List_Company_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_List_Company_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_List_Company_ENTITY[]>;
        }));
    }

    protected processSYS_List_Company_Search(response: HttpResponseBase): Observable<SYS_List_Company_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_List_Company_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_List_Company_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Color_Acctions(body: Colors | undefined): Observable<Colors[]> {
        let url_ = this.baseUrl + "/api/SYSCommon/SYS_Color_Acctions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Color_Acctions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Color_Acctions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Colors[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Colors[]>;
        }));
    }

    protected processSYS_Color_Acctions(response: HttpResponseBase): Observable<Colors[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Colors.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Colors[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Alter_Table_Voucher(body: SYS_Alter_Table_Voucher_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SYSCommon/SYS_Alter_Table_Voucher";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Alter_Table_Voucher(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Alter_Table_Voucher(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_Alter_Table_Voucher(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_List_App_Group_Actions(body: SYS_List_App_Group_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/SYSCommon/SYS_List_App_Group_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_List_App_Group_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_List_App_Group_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processSYS_List_App_Group_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_List_App_Group_Search(body: SYS_List_App_Group_ENTITY | undefined): Observable<SYS_List_App_Group_ENTITY[]> {
        let url_ = this.baseUrl + "/api/SYSCommon/SYS_List_App_Group_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_List_App_Group_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_List_App_Group_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SYS_List_App_Group_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SYS_List_App_Group_ENTITY[]>;
        }));
    }

    protected processSYS_List_App_Group_Search(response: HttpResponseBase): Observable<SYS_List_App_Group_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SYS_List_App_Group_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SYS_List_App_Group_ENTITY[]>(null as any);
    }
}

@Injectable()
export class TestThemeService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    testTheme_Search_byID(code: string | null | undefined): Observable<Tb_TestTheme_ENTITY> {
        let url_ = this.baseUrl + "/api/TestTheme/TestTheme_Search_byID?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTestTheme_Search_byID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestTheme_Search_byID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Tb_TestTheme_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Tb_TestTheme_ENTITY>;
        }));
    }

    protected processTestTheme_Search_byID(response: HttpResponseBase): Observable<Tb_TestTheme_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Tb_TestTheme_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Tb_TestTheme_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    testTheme_Update(body: Tb_TestTheme_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TestTheme/TestTheme_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTestTheme_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestTheme_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processTestTheme_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    testTheme_Insert(body: Tb_TestTheme_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TestTheme/TestTheme_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTestTheme_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestTheme_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processTestTheme_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    testTheme_Search(body: Tb_TestTheme_ENTITY | undefined): Observable<Tb_TestTheme_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TestTheme/TestTheme_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTestTheme_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestTheme_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Tb_TestTheme_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Tb_TestTheme_ENTITY[]>;
        }));
    }

    protected processTestTheme_Search(response: HttpResponseBase): Observable<Tb_TestTheme_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Tb_TestTheme_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Tb_TestTheme_ENTITY[]>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    testTheme_Del(code: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TestTheme/TestTheme_Del?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTestTheme_Del(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestTheme_Del(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processTestTheme_Del(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class TimeSheetService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param iD (optional) 
     * @param constHour (optional) 
     * @param hourStartMonth (optional) 
     * @param employee_ID (optional) 
     * @param employee_code (optional) 
     * @param company_code (optional) 
     * @param title (optional) 
     * @param host (optional) 
     * @param start (optional) 
     * @param allday (optional) 
     * @param type_ID (optional) 
     * @param className (optional) 
     * @param hRM_TimeSheet_Details (optional) 
     * @param code (optional) 
     * @param department (optional) 
     * @param aPPROVE (optional) 
     * @param dATE_ADD (optional) 
     * @param dATE_EDIT (optional) 
     * @param start_date (optional) 
     * @param end_date (optional) 
     * @param aCCOUNT_ID (optional) 
     * @param nOTES (optional) 
     * @param html (optional) 
     * @param base64 (optional) 
     * @param dECENTRALIZATION (optional) 
     * @param check_image_face (optional) 
     * @return Success
     */
    hRM_TimeSheet_Insert(iD: number | null | undefined, constHour: number | null | undefined, hourStartMonth: number | null | undefined, employee_ID: number | null | undefined, employee_code: string | null | undefined, company_code: string | null | undefined, title: string | null | undefined, host: string | null | undefined, start: number | null | undefined, allday: number | null | undefined, type_ID: number | null | undefined, className: string | null | undefined, hRM_TimeSheet_Details: HRM_TimeSheet_Detail_ENTITY[] | null | undefined, code: string | null | undefined, department: string | null | undefined, aPPROVE: boolean | null | undefined, dATE_ADD: moment.Moment | null | undefined, dATE_EDIT: moment.Moment | null | undefined, start_date: moment.Moment | undefined, end_date: moment.Moment | undefined, aCCOUNT_ID: number | null | undefined, nOTES: string | null | undefined, html: string | null | undefined, base64: string | null | undefined, dECENTRALIZATION: string | null | undefined, check_image_face: Base64FormattingOptions | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Insert?";
        if (iD !== undefined && iD !== null)
            url_ += "ID=" + encodeURIComponent("" + iD) + "&";
        if (constHour !== undefined && constHour !== null)
            url_ += "ConstHour=" + encodeURIComponent("" + constHour) + "&";
        if (hourStartMonth !== undefined && hourStartMonth !== null)
            url_ += "HourStartMonth=" + encodeURIComponent("" + hourStartMonth) + "&";
        if (employee_ID !== undefined && employee_ID !== null)
            url_ += "Employee_ID=" + encodeURIComponent("" + employee_ID) + "&";
        if (employee_code !== undefined && employee_code !== null)
            url_ += "employee_code=" + encodeURIComponent("" + employee_code) + "&";
        if (company_code !== undefined && company_code !== null)
            url_ += "company_code=" + encodeURIComponent("" + company_code) + "&";
        if (title !== undefined && title !== null)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (host !== undefined && host !== null)
            url_ += "host=" + encodeURIComponent("" + host) + "&";
        if (start !== undefined && start !== null)
            url_ += "Start=" + encodeURIComponent("" + start) + "&";
        if (allday !== undefined && allday !== null)
            url_ += "Allday=" + encodeURIComponent("" + allday) + "&";
        if (type_ID !== undefined && type_ID !== null)
            url_ += "Type_ID=" + encodeURIComponent("" + type_ID) + "&";
        if (className !== undefined && className !== null)
            url_ += "ClassName=" + encodeURIComponent("" + className) + "&";
        if (hRM_TimeSheet_Details !== undefined && hRM_TimeSheet_Details !== null)
            hRM_TimeSheet_Details && hRM_TimeSheet_Details.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "hRM_TimeSheet_Details[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (department !== undefined && department !== null)
            url_ += "department=" + encodeURIComponent("" + department) + "&";
        if (aPPROVE !== undefined && aPPROVE !== null)
            url_ += "APPROVE=" + encodeURIComponent("" + aPPROVE) + "&";
        if (dATE_ADD !== undefined && dATE_ADD !== null)
            url_ += "DATE_ADD=" + encodeURIComponent(dATE_ADD ? "" + dATE_ADD.toISOString(true) : "") + "&";
        if (dATE_EDIT !== undefined && dATE_EDIT !== null)
            url_ += "DATE_EDIT=" + encodeURIComponent(dATE_EDIT ? "" + dATE_EDIT.toISOString(true) : "") + "&";
        if (start_date === null)
            throw new Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent(start_date ? "" + start_date.toISOString(true) : "") + "&";
        if (end_date === null)
            throw new Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent(end_date ? "" + end_date.toISOString(true) : "") + "&";
        if (aCCOUNT_ID !== undefined && aCCOUNT_ID !== null)
            url_ += "ACCOUNT_ID=" + encodeURIComponent("" + aCCOUNT_ID) + "&";
        if (nOTES !== undefined && nOTES !== null)
            url_ += "NOTES=" + encodeURIComponent("" + nOTES) + "&";
        if (html !== undefined && html !== null)
            url_ += "html=" + encodeURIComponent("" + html) + "&";
        if (base64 !== undefined && base64 !== null)
            url_ += "base64=" + encodeURIComponent("" + base64) + "&";
        if (dECENTRALIZATION !== undefined && dECENTRALIZATION !== null)
            url_ += "DECENTRALIZATION=" + encodeURIComponent("" + dECENTRALIZATION) + "&";
        if (check_image_face === null)
            throw new Error("The parameter 'check_image_face' cannot be null.");
        else if (check_image_face !== undefined)
            url_ += "check_image_face=" + encodeURIComponent("" + check_image_face) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param iD (optional) 
     * @param constHour (optional) 
     * @param hourStartMonth (optional) 
     * @param employee_ID (optional) 
     * @param employee_code (optional) 
     * @param company_code (optional) 
     * @param title (optional) 
     * @param host (optional) 
     * @param start (optional) 
     * @param allday (optional) 
     * @param type_ID (optional) 
     * @param className (optional) 
     * @param hRM_TimeSheet_Details (optional) 
     * @param code (optional) 
     * @param department (optional) 
     * @param aPPROVE (optional) 
     * @param dATE_ADD (optional) 
     * @param dATE_EDIT (optional) 
     * @param start_date (optional) 
     * @param end_date (optional) 
     * @param aCCOUNT_ID (optional) 
     * @param nOTES (optional) 
     * @param html (optional) 
     * @param base64 (optional) 
     * @param dECENTRALIZATION (optional) 
     * @param check_image_face (optional) 
     * @return Success
     */
    hRM_TimeSheet_Search(iD: number | null | undefined, constHour: number | null | undefined, hourStartMonth: number | null | undefined, employee_ID: number | null | undefined, employee_code: string | null | undefined, company_code: string | null | undefined, title: string | null | undefined, host: string | null | undefined, start: number | null | undefined, allday: number | null | undefined, type_ID: number | null | undefined, className: string | null | undefined, hRM_TimeSheet_Details: HRM_TimeSheet_Detail_ENTITY[] | null | undefined, code: string | null | undefined, department: string | null | undefined, aPPROVE: boolean | null | undefined, dATE_ADD: moment.Moment | null | undefined, dATE_EDIT: moment.Moment | null | undefined, start_date: moment.Moment | undefined, end_date: moment.Moment | undefined, aCCOUNT_ID: number | null | undefined, nOTES: string | null | undefined, html: string | null | undefined, base64: string | null | undefined, dECENTRALIZATION: string | null | undefined, check_image_face: Base64FormattingOptions | undefined): Observable<HRM_TimeSheet_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Search?";
        if (iD !== undefined && iD !== null)
            url_ += "ID=" + encodeURIComponent("" + iD) + "&";
        if (constHour !== undefined && constHour !== null)
            url_ += "ConstHour=" + encodeURIComponent("" + constHour) + "&";
        if (hourStartMonth !== undefined && hourStartMonth !== null)
            url_ += "HourStartMonth=" + encodeURIComponent("" + hourStartMonth) + "&";
        if (employee_ID !== undefined && employee_ID !== null)
            url_ += "Employee_ID=" + encodeURIComponent("" + employee_ID) + "&";
        if (employee_code !== undefined && employee_code !== null)
            url_ += "employee_code=" + encodeURIComponent("" + employee_code) + "&";
        if (company_code !== undefined && company_code !== null)
            url_ += "company_code=" + encodeURIComponent("" + company_code) + "&";
        if (title !== undefined && title !== null)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (host !== undefined && host !== null)
            url_ += "host=" + encodeURIComponent("" + host) + "&";
        if (start !== undefined && start !== null)
            url_ += "Start=" + encodeURIComponent("" + start) + "&";
        if (allday !== undefined && allday !== null)
            url_ += "Allday=" + encodeURIComponent("" + allday) + "&";
        if (type_ID !== undefined && type_ID !== null)
            url_ += "Type_ID=" + encodeURIComponent("" + type_ID) + "&";
        if (className !== undefined && className !== null)
            url_ += "ClassName=" + encodeURIComponent("" + className) + "&";
        if (hRM_TimeSheet_Details !== undefined && hRM_TimeSheet_Details !== null)
            hRM_TimeSheet_Details && hRM_TimeSheet_Details.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "hRM_TimeSheet_Details[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (department !== undefined && department !== null)
            url_ += "department=" + encodeURIComponent("" + department) + "&";
        if (aPPROVE !== undefined && aPPROVE !== null)
            url_ += "APPROVE=" + encodeURIComponent("" + aPPROVE) + "&";
        if (dATE_ADD !== undefined && dATE_ADD !== null)
            url_ += "DATE_ADD=" + encodeURIComponent(dATE_ADD ? "" + dATE_ADD.toISOString(true) : "") + "&";
        if (dATE_EDIT !== undefined && dATE_EDIT !== null)
            url_ += "DATE_EDIT=" + encodeURIComponent(dATE_EDIT ? "" + dATE_EDIT.toISOString(true) : "") + "&";
        if (start_date === null)
            throw new Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent(start_date ? "" + start_date.toISOString(true) : "") + "&";
        if (end_date === null)
            throw new Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent(end_date ? "" + end_date.toISOString(true) : "") + "&";
        if (aCCOUNT_ID !== undefined && aCCOUNT_ID !== null)
            url_ += "ACCOUNT_ID=" + encodeURIComponent("" + aCCOUNT_ID) + "&";
        if (nOTES !== undefined && nOTES !== null)
            url_ += "NOTES=" + encodeURIComponent("" + nOTES) + "&";
        if (html !== undefined && html !== null)
            url_ += "html=" + encodeURIComponent("" + html) + "&";
        if (base64 !== undefined && base64 !== null)
            url_ += "base64=" + encodeURIComponent("" + base64) + "&";
        if (dECENTRALIZATION !== undefined && dECENTRALIZATION !== null)
            url_ += "DECENTRALIZATION=" + encodeURIComponent("" + dECENTRALIZATION) + "&";
        if (check_image_face === null)
            throw new Error("The parameter 'check_image_face' cannot be null.");
        else if (check_image_face !== undefined)
            url_ += "check_image_face=" + encodeURIComponent("" + check_image_face) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_ENTITY[]>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    hRM_TimeSheet_Search_Detail(id: number | undefined): Observable<HRM_TimeSheet_Detail_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Search_Detail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Search_Detail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Search_Detail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Detail_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Detail_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Search_Detail(response: HttpResponseBase): Observable<HRM_TimeSheet_Detail_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Detail_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Detail_ENTITY[]>(null as any);
    }

    /**
     * @param iD (optional) 
     * @param constHour (optional) 
     * @param hourStartMonth (optional) 
     * @param employee_ID (optional) 
     * @param employee_code (optional) 
     * @param company_code (optional) 
     * @param title (optional) 
     * @param host (optional) 
     * @param start (optional) 
     * @param allday (optional) 
     * @param type_ID (optional) 
     * @param className (optional) 
     * @param hRM_TimeSheet_Details (optional) 
     * @param code (optional) 
     * @param department (optional) 
     * @param aPPROVE (optional) 
     * @param dATE_ADD (optional) 
     * @param dATE_EDIT (optional) 
     * @param start_date (optional) 
     * @param end_date (optional) 
     * @param aCCOUNT_ID (optional) 
     * @param nOTES (optional) 
     * @param html (optional) 
     * @param base64 (optional) 
     * @param dECENTRALIZATION (optional) 
     * @param check_image_face (optional) 
     * @return Success
     */
    hRM_TimeSheet_Update(iD: number | null | undefined, constHour: number | null | undefined, hourStartMonth: number | null | undefined, employee_ID: number | null | undefined, employee_code: string | null | undefined, company_code: string | null | undefined, title: string | null | undefined, host: string | null | undefined, start: number | null | undefined, allday: number | null | undefined, type_ID: number | null | undefined, className: string | null | undefined, hRM_TimeSheet_Details: HRM_TimeSheet_Detail_ENTITY[] | null | undefined, code: string | null | undefined, department: string | null | undefined, aPPROVE: boolean | null | undefined, dATE_ADD: moment.Moment | null | undefined, dATE_EDIT: moment.Moment | null | undefined, start_date: moment.Moment | undefined, end_date: moment.Moment | undefined, aCCOUNT_ID: number | null | undefined, nOTES: string | null | undefined, html: string | null | undefined, base64: string | null | undefined, dECENTRALIZATION: string | null | undefined, check_image_face: Base64FormattingOptions | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Update?";
        if (iD !== undefined && iD !== null)
            url_ += "ID=" + encodeURIComponent("" + iD) + "&";
        if (constHour !== undefined && constHour !== null)
            url_ += "ConstHour=" + encodeURIComponent("" + constHour) + "&";
        if (hourStartMonth !== undefined && hourStartMonth !== null)
            url_ += "HourStartMonth=" + encodeURIComponent("" + hourStartMonth) + "&";
        if (employee_ID !== undefined && employee_ID !== null)
            url_ += "Employee_ID=" + encodeURIComponent("" + employee_ID) + "&";
        if (employee_code !== undefined && employee_code !== null)
            url_ += "employee_code=" + encodeURIComponent("" + employee_code) + "&";
        if (company_code !== undefined && company_code !== null)
            url_ += "company_code=" + encodeURIComponent("" + company_code) + "&";
        if (title !== undefined && title !== null)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (host !== undefined && host !== null)
            url_ += "host=" + encodeURIComponent("" + host) + "&";
        if (start !== undefined && start !== null)
            url_ += "Start=" + encodeURIComponent("" + start) + "&";
        if (allday !== undefined && allday !== null)
            url_ += "Allday=" + encodeURIComponent("" + allday) + "&";
        if (type_ID !== undefined && type_ID !== null)
            url_ += "Type_ID=" + encodeURIComponent("" + type_ID) + "&";
        if (className !== undefined && className !== null)
            url_ += "ClassName=" + encodeURIComponent("" + className) + "&";
        if (hRM_TimeSheet_Details !== undefined && hRM_TimeSheet_Details !== null)
            hRM_TimeSheet_Details && hRM_TimeSheet_Details.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "hRM_TimeSheet_Details[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (department !== undefined && department !== null)
            url_ += "department=" + encodeURIComponent("" + department) + "&";
        if (aPPROVE !== undefined && aPPROVE !== null)
            url_ += "APPROVE=" + encodeURIComponent("" + aPPROVE) + "&";
        if (dATE_ADD !== undefined && dATE_ADD !== null)
            url_ += "DATE_ADD=" + encodeURIComponent(dATE_ADD ? "" + dATE_ADD.toISOString(true) : "") + "&";
        if (dATE_EDIT !== undefined && dATE_EDIT !== null)
            url_ += "DATE_EDIT=" + encodeURIComponent(dATE_EDIT ? "" + dATE_EDIT.toISOString(true) : "") + "&";
        if (start_date === null)
            throw new Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent(start_date ? "" + start_date.toISOString(true) : "") + "&";
        if (end_date === null)
            throw new Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent(end_date ? "" + end_date.toISOString(true) : "") + "&";
        if (aCCOUNT_ID !== undefined && aCCOUNT_ID !== null)
            url_ += "ACCOUNT_ID=" + encodeURIComponent("" + aCCOUNT_ID) + "&";
        if (nOTES !== undefined && nOTES !== null)
            url_ += "NOTES=" + encodeURIComponent("" + nOTES) + "&";
        if (html !== undefined && html !== null)
            url_ += "html=" + encodeURIComponent("" + html) + "&";
        if (base64 !== undefined && base64 !== null)
            url_ += "base64=" + encodeURIComponent("" + base64) + "&";
        if (dECENTRALIZATION !== undefined && dECENTRALIZATION !== null)
            url_ += "DECENTRALIZATION=" + encodeURIComponent("" + dECENTRALIZATION) + "&";
        if (check_image_face === null)
            throw new Error("The parameter 'check_image_face' cannot be null.");
        else if (check_image_face !== undefined)
            url_ += "check_image_face=" + encodeURIComponent("" + check_image_face) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Project_Management_Task_WorkTime_Report_Search(body: HRM_TimeSheet_ENTITY | undefined): Observable<HRM_TimeSheet_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Project_Management_Task_WorkTime_Report_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Project_Management_Task_WorkTime_Report_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Project_Management_Task_WorkTime_Report_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_ENTITY[]>;
        }));
    }

    protected processHRM_Project_Management_Task_WorkTime_Report_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Work_Shift_Actions(body: HRM_TimeSheet_Work_Shift_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Work_Shift_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Work_Shift_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Work_Shift_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Work_Shift_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Work_Shift_Search(body: HRM_TimeSheet_Work_Shift_ENTITY | undefined): Observable<HRM_TimeSheet_Work_Shift_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Work_Shift_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Work_Shift_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Work_Shift_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Work_Shift_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Work_Shift_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Work_Shift_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_Work_Shift_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Work_Shift_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Work_Shift_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create_Request_Action_Search(body: Create_Request_Action_ENTITY | undefined): Observable<Create_Request_Action_ENTITY> {
        let url_ = this.baseUrl + "/api/TimeSheet/Create_Request_Action_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate_Request_Action_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_Request_Action_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Create_Request_Action_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Create_Request_Action_ENTITY>;
        }));
    }

    protected processCreate_Request_Action_Search(response: HttpResponseBase): Observable<Create_Request_Action_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Create_Request_Action_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Create_Request_Action_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Work_Shift_Delete(body: HRM_TimeSheet_Employee_Work_Shift_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Work_Shift_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Work_Shift_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Work_Shift_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Work_Shift_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Work_Shift_Bycode(body: HRM_TimeSheet_Employee_Work_Shift_ENTITY | undefined): Observable<HRM_TimeSheet_Employee_Work_Shift_ENTITY> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Work_Shift_Bycode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Work_Shift_Bycode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Work_Shift_Bycode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Employee_Work_Shift_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Employee_Work_Shift_ENTITY>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Work_Shift_Bycode(response: HttpResponseBase): Observable<HRM_TimeSheet_Employee_Work_Shift_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_TimeSheet_Employee_Work_Shift_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Employee_Work_Shift_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Work_Shift_Insert(body: HRM_TimeSheet_Employee_Work_Shift_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Work_Shift_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Work_Shift_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Work_Shift_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Work_Shift_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Work_Shift_Search(body: HRM_TimeSheet_Employee_Work_Shift_ENTITY | undefined): Observable<HRM_TimeSheet_Employee_Work_Shift_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Work_Shift_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Work_Shift_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Work_Shift_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Employee_Work_Shift_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Employee_Work_Shift_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Work_Shift_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_Employee_Work_Shift_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Employee_Work_Shift_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Employee_Work_Shift_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Work_Shift_Update(body: HRM_TimeSheet_Employee_Work_Shift_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Work_Shift_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Work_Shift_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Work_Shift_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Work_Shift_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Work_Shift_Detail_All_Day_In_Month(body: HRM_TimeSheet_Employee_Work_Shift_ENTITY | undefined): Observable<HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Work_Shift_Detail_All_Day_In_Month";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Work_Shift_Detail_All_Day_In_Month(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Work_Shift_Detail_All_Day_In_Month(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Work_Shift_Detail_All_Day_In_Month(response: HttpResponseBase): Observable<HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Work_Shift_Update_Name(body: HRM_TimeSheet_Employee_Work_Shift_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Work_Shift_Update_Name";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Work_Shift_Update_Name(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Work_Shift_Update_Name(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Work_Shift_Update_Name(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    checkInOut_FaceID_Setting(body: HRM_TimeSheet_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/CheckInOut_FaceID_Setting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCheckInOut_FaceID_Setting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckInOut_FaceID_Setting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCheckInOut_FaceID_Setting(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    checkInOut(body: HRM_TimeSheet_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/CheckInOut";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCheckInOut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckInOut(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCheckInOut(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Insert(body: HRM_TimeSheet_Attendance_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Search(body: HRM_TimeSheet_Attendance_ENTITY | undefined): Observable<HRM_TimeSheet_Attendance_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Attendance_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Attendance_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_Attendance_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Attendance_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Attendance_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Approve(body: HRM_TimeSheet_Attendance_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Approve";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Approve(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Approve(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Approve(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Search_Detail(body: string | null | undefined): Observable<HRM_TimeSheet_Attendance_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Search_Detail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Search_Detail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Search_Detail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Attendance_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Attendance_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Search_Detail(response: HttpResponseBase): Observable<HRM_TimeSheet_Attendance_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Attendance_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Attendance_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Status_Insert(body: HRM_TimeSheet_Attendance_Status_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Status_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Status_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Status_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Status_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Status_Search(body: HRM_TimeSheet_Attendance_Status_ENTITY | undefined): Observable<HRM_TimeSheet_Attendance_Status_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Status_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Status_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Status_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Attendance_Status_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Attendance_Status_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Status_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_Attendance_Status_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Attendance_Status_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Attendance_Status_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Status_Search_Detail(body: string | null | undefined): Observable<HRM_TimeSheet_Attendance_Status_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Status_Search_Detail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Status_Search_Detail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Status_Search_Detail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Attendance_Status_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Attendance_Status_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Status_Search_Detail(response: HttpResponseBase): Observable<HRM_TimeSheet_Attendance_Status_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Attendance_Status_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Attendance_Status_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Status_Update(body: HRM_TimeSheet_Attendance_Status_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Status_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Status_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Status_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Status_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Type_Off_Insert(body: HRM_TimeSheet_Attendance_Type_Off_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Type_Off_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Type_Off_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Type_Off_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Type_Off_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Type_Off_Search(body: HRM_TimeSheet_Attendance_Type_Off_ENTITY | undefined): Observable<HRM_TimeSheet_Attendance_Type_Off_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Type_Off_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Type_Off_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Type_Off_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Attendance_Type_Off_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Attendance_Type_Off_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Type_Off_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_Attendance_Type_Off_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Attendance_Type_Off_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Attendance_Type_Off_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Type_Off_Search_Detail(body: string | null | undefined): Observable<HRM_TimeSheet_Attendance_Type_Off_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Type_Off_Search_Detail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Type_Off_Search_Detail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Type_Off_Search_Detail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Attendance_Type_Off_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Attendance_Type_Off_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Type_Off_Search_Detail(response: HttpResponseBase): Observable<HRM_TimeSheet_Attendance_Type_Off_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Attendance_Type_Off_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Attendance_Type_Off_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Type_Off_Update(body: HRM_TimeSheet_Attendance_Type_Off_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Type_Off_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Type_Off_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Type_Off_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Type_Off_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Attendance_Update(body: HRM_TimeSheet_Attendance_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Attendance_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Attendance_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Attendance_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Attendance_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Register_Insert(body: HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Register_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Register_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Register_Search(body: HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY | undefined): Observable<HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Register_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Register_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY[]>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Register_Search_Detail(code: string | null | undefined): Observable<HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Register_Search_Detail?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Search_Detail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Search_Detail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Register_Search_Detail(response: HttpResponseBase): Observable<HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Register_Update(body: HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Register_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Register_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Register_Delete(code: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Register_Delete?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Register_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Register_Status_Search(body: HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY | undefined): Observable<HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Register_Status_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Status_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Status_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Register_Status_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Register_Type_Search(body: HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY | undefined): Observable<HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Register_Type_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Type_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Type_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Register_Type_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Register_Approve(body: HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Register_Approve";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Approve(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Approve(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Register_Approve(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Register_Moving(body: HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Register_Moving";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Moving(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Register_Moving(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Register_Moving(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param code (optional) 
     * @param user_login (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Mission_Allowance_Delete(code: string | null | undefined, user_login: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Mission_Allowance_Delete?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (user_login !== undefined && user_login !== null)
            url_ += "user_login=" + encodeURIComponent("" + user_login) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Mission_Allowance_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Mission_Allowance_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Mission_Allowance_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Mission_Allowance_Insert(body: HRM_Timesheet_Employee_Mission_Allowance_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Mission_Allowance_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Mission_Allowance_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Mission_Allowance_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Mission_Allowance_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Mission_Allowance_Search(body: HRM_Timesheet_Employee_Mission_Allowance_ENTITY | undefined): Observable<HRM_Timesheet_Employee_Mission_Allowance_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Mission_Allowance_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Mission_Allowance_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Mission_Allowance_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Timesheet_Employee_Mission_Allowance_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Timesheet_Employee_Mission_Allowance_ENTITY[]>;
        }));
    }

    protected processHRM_Timesheet_Employee_Mission_Allowance_Search(response: HttpResponseBase): Observable<HRM_Timesheet_Employee_Mission_Allowance_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Timesheet_Employee_Mission_Allowance_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Timesheet_Employee_Mission_Allowance_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Mission_Allowance_Update(body: HRM_Timesheet_Employee_Mission_Allowance_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Mission_Allowance_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Mission_Allowance_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Mission_Allowance_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Mission_Allowance_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Mission_Allowance_Approve(body: HRM_Timesheet_Employee_Mission_Allowance_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Mission_Allowance_Approve";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Mission_Allowance_Approve(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Mission_Allowance_Approve(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Mission_Allowance_Approve(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Overtime_Search(body: HRM_Timesheet_Employee_Overtime_ENTITY | undefined): Observable<HRM_Timesheet_Employee_Overtime_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Overtime_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Overtime_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Overtime_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Timesheet_Employee_Overtime_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Timesheet_Employee_Overtime_ENTITY[]>;
        }));
    }

    protected processHRM_Timesheet_Employee_Overtime_Search(response: HttpResponseBase): Observable<HRM_Timesheet_Employee_Overtime_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Timesheet_Employee_Overtime_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Timesheet_Employee_Overtime_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Overtime_Update(body: HRM_Timesheet_Employee_Overtime_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Overtime_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Overtime_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Overtime_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Overtime_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Overtime_Approve(body: HRM_Timesheet_Employee_Overtime_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Overtime_Approve";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Overtime_Approve(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Overtime_Approve(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Overtime_Approve(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Overtime_Insert(body: HRM_Timesheet_Employee_Overtime_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Overtime_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Overtime_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Overtime_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Overtime_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Update_Timkeeping_Search(body: HRM_Timesheet_Employee_Update_Timkeeping_ENTITY | undefined): Observable<HRM_Timesheet_Employee_Update_Timkeeping_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Update_Timkeeping_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Update_Timkeeping_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Update_Timkeeping_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Timesheet_Employee_Update_Timkeeping_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Timesheet_Employee_Update_Timkeeping_ENTITY[]>;
        }));
    }

    protected processHRM_Timesheet_Employee_Update_Timkeeping_Search(response: HttpResponseBase): Observable<HRM_Timesheet_Employee_Update_Timkeeping_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Timesheet_Employee_Update_Timkeeping_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Timesheet_Employee_Update_Timkeeping_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Update_Timkeeping_Update(body: HRM_Timesheet_Employee_Update_Timkeeping_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Update_Timkeeping_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Update_Timkeeping_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Update_Timkeeping_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Update_Timkeeping_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Update_Timkeeping_Approve(body: HRM_Timesheet_Employee_Update_Timkeeping_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Update_Timkeeping_Approve";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Update_Timkeeping_Approve(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Update_Timkeeping_Approve(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Update_Timkeeping_Approve(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Update_Timkeeping_Insert(body: HRM_Timesheet_Employee_Update_Timkeeping_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Update_Timkeeping_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Update_Timkeeping_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Update_Timkeeping_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Update_Timkeeping_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Holiday_Search(body: HRM_Holiday_ENTITY | undefined): Observable<HRM_Holiday_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Holiday_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Holiday_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Holiday_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Holiday_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Holiday_ENTITY[]>;
        }));
    }

    protected processHRM_Holiday_Search(response: HttpResponseBase): Observable<HRM_Holiday_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Holiday_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Holiday_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Holiday_Actions(body: HRM_Holiday_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Holiday_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Holiday_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Holiday_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Holiday_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Report_Attendance_Search(body: HRM_Report_Attendance_ENTITY | undefined): Observable<HRM_Report_Attendance_ENTITY> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Report_Attendance_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Report_Attendance_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Report_Attendance_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Report_Attendance_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Report_Attendance_ENTITY>;
        }));
    }

    protected processHRM_Report_Attendance_Search(response: HttpResponseBase): Observable<HRM_Report_Attendance_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Report_Attendance_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Report_Attendance_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Salary_By_Report_Attendance_Search(body: HRM_Report_Attendance_ENTITY | undefined): Observable<HRM_Report_Attendance_ENTITY> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Employee_Salary_By_Report_Attendance_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Salary_By_Report_Attendance_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Salary_By_Report_Attendance_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Report_Attendance_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Report_Attendance_ENTITY>;
        }));
    }

    protected processHRM_Employee_Salary_By_Report_Attendance_Search(response: HttpResponseBase): Observable<HRM_Report_Attendance_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Report_Attendance_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Report_Attendance_ENTITY>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Employee_Salary_By_Report_Attendance_v2_Search(body: HRM_Report_Attendance_ENTITY | undefined): Observable<HRM_Report_Attendance_ENTITY> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Employee_Salary_By_Report_Attendance_v2_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Employee_Salary_By_Report_Attendance_v2_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Employee_Salary_By_Report_Attendance_v2_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Report_Attendance_ENTITY>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Report_Attendance_ENTITY>;
        }));
    }

    protected processHRM_Employee_Salary_By_Report_Attendance_v2_Search(response: HttpResponseBase): Observable<HRM_Report_Attendance_ENTITY> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HRM_Report_Attendance_ENTITY.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Report_Attendance_ENTITY>(null as any);
    }

    /**
     * @return Success
     */
    hRM_Timesheet_Employee_Overtime_Type_Search(): Observable<HRM_Timesheet_Employee_Overtime_Type_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Overtime_Type_Search";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Overtime_Type_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Overtime_Type_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Timesheet_Employee_Overtime_Type_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Timesheet_Employee_Overtime_Type_ENTITY[]>;
        }));
    }

    protected processHRM_Timesheet_Employee_Overtime_Type_Search(response: HttpResponseBase): Observable<HRM_Timesheet_Employee_Overtime_Type_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Timesheet_Employee_Overtime_Type_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Timesheet_Employee_Overtime_Type_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Timesheet_Employee_Overtime_Type_Actions(body: HRM_Timesheet_Employee_Overtime_Type_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_Timesheet_Employee_Overtime_Type_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Timesheet_Employee_Overtime_Type_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Timesheet_Employee_Overtime_Type_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Timesheet_Employee_Overtime_Type_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Regulation_Search(body: HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY | undefined): Observable<HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY[]> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Regulation_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Regulation_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Regulation_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY[]>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Regulation_Search(response: HttpResponseBase): Observable<HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_TimeSheet_Employee_Soon_Late_Regulation_Update(body: HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY[] | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/TimeSheet/HRM_TimeSheet_Employee_Soon_Late_Regulation_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_TimeSheet_Employee_Soon_Late_Regulation_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_TimeSheet_Employee_Soon_Late_Regulation_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_TimeSheet_Employee_Soon_Late_Regulation_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class ToolService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deCryptString(body: CRYPTModel | undefined): Observable<CRYPTModel> {
        let url_ = this.baseUrl + "/api/Tool/DeCryptString";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeCryptString(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeCryptString(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CRYPTModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CRYPTModel>;
        }));
    }

    protected processDeCryptString(response: HttpResponseBase): Observable<CRYPTModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CRYPTModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CRYPTModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    enCryptString(body: CRYPTModel | undefined): Observable<CRYPTModel> {
        let url_ = this.baseUrl + "/api/Tool/EnCryptString";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEnCryptString(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnCryptString(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CRYPTModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CRYPTModel>;
        }));
    }

    protected processEnCryptString(response: HttpResponseBase): Observable<CRYPTModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CRYPTModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CRYPTModel>(null as any);
    }
}

@Injectable()
export class UploadFilesService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Upload_Get(body: Upload_ENTITY | undefined): Observable<Upload_ENTITY[]> {
        let url_ = this.baseUrl + "/api/UploadFiles/SYS_Upload_Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Upload_Get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Upload_Get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Upload_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Upload_ENTITY[]>;
        }));
    }

    protected processSYS_Upload_Get(response: HttpResponseBase): Observable<Upload_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Upload_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Upload_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Upload_Save(body: Upload_ENTITY[] | null | undefined): Observable<Upload_ENTITY[]> {
        let url_ = this.baseUrl + "/api/UploadFiles/SYS_Upload_Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Upload_Save(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Upload_Save(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Upload_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Upload_ENTITY[]>;
        }));
    }

    protected processSYS_Upload_Save(response: HttpResponseBase): Observable<Upload_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Upload_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Upload_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sYS_Upload_Search(body: Upload_ENTITY | undefined): Observable<Upload_ENTITY[]> {
        let url_ = this.baseUrl + "/api/UploadFiles/SYS_Upload_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSYS_Upload_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSYS_Upload_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Upload_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Upload_ENTITY[]>;
        }));
    }

    protected processSYS_Upload_Search(response: HttpResponseBase): Observable<Upload_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Upload_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Upload_ENTITY[]>(null as any);
    }
}

@Injectable()
export class WarehouseService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Issue_Bycode(code: string | null | undefined): Observable<WMS_Warehouse_Goods_Issue_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Issue_Bycode?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Issue_Bycode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Issue_Bycode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_Goods_Issue_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_Goods_Issue_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_Goods_Issue_Bycode(response: HttpResponseBase): Observable<WMS_Warehouse_Goods_Issue_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_Goods_Issue_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_Goods_Issue_ENTITY[]>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Issue_Delete(code: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Issue_Delete?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Issue_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Issue_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Goods_Issue_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Issue_Search(body: WMS_Warehouse_Goods_Issue_ENTITY | undefined): Observable<WMS_Warehouse_Goods_Issue_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Issue_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Issue_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Issue_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_Goods_Issue_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_Goods_Issue_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_Goods_Issue_Search(response: HttpResponseBase): Observable<WMS_Warehouse_Goods_Issue_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_Goods_Issue_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_Goods_Issue_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Issue_Update(body: WMS_Warehouse_Goods_Issue_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Issue_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Issue_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Issue_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Goods_Issue_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param code (optional) 
     * @param type (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Bycode(code: string | null | undefined, type: string | null | undefined): Observable<WMS_Warehouse_Goods_Receipt_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Bycode?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Bycode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Bycode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_Goods_Receipt_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_Goods_Receipt_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Bycode(response: HttpResponseBase): Observable<WMS_Warehouse_Goods_Receipt_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_Goods_Receipt_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_Goods_Receipt_ENTITY[]>(null as any);
    }

    /**
     * @param code (optional) 
     * @param type (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Detail_Bycode(code: string | null | undefined, type: string | null | undefined): Observable<WMS_Warehouse_Goods_Receipt_Detail_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Detail_Bycode?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Detail_Bycode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Detail_Bycode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_Goods_Receipt_Detail_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_Goods_Receipt_Detail_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Detail_Bycode(response: HttpResponseBase): Observable<WMS_Warehouse_Goods_Receipt_Detail_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_Goods_Receipt_Detail_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_Goods_Receipt_Detail_ENTITY[]>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Delete(code: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Delete?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Insert(body: WMS_Warehouse_Goods_Receipt_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Search(body: WMS_Warehouse_Goods_Receipt_ENTITY | undefined): Observable<WMS_Warehouse_Goods_Receipt_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_Goods_Receipt_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_Goods_Receipt_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Search(response: HttpResponseBase): Observable<WMS_Warehouse_Goods_Receipt_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_Goods_Receipt_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_Goods_Receipt_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Update(body: WMS_Warehouse_Goods_Receipt_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Issue_Insert(body: WMS_Warehouse_Goods_Issue_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Issue_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Issue_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Issue_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Goods_Issue_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Delivery_Partner_Search(body: WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY | undefined): Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Delivery_Partner_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Search(response: HttpResponseBase): Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Delivery_Partner_Insert(body: WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Delivery_Partner_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Delivery_Partner_Update(body: WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Delivery_Partner_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Delivery_Partner_Delete(code: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Delivery_Partner_Delete?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Delivery_Partner_Bycode(code: string | null | undefined): Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Delivery_Partner_Bycode?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Bycode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Bycode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Bycode(response: HttpResponseBase): Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_Search(body: WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY | undefined): Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_Search(response: HttpResponseBase): Observable<WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_Insert(body: WMS_Warehouse_Goods_Issue_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Search(body: WMS_Warehouse_ENTITY | undefined): Observable<WMS_Warehouse_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_Search(response: HttpResponseBase): Observable<WMS_Warehouse_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Insert(body: WMS_Warehouse_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_Update(body: WMS_Warehouse_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    wMS_Warehouse_Delete(code: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Delete?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    wMS_Warehouse_Bycode(code: string | null | undefined): Observable<WMS_Warehouse_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_Bycode?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_Bycode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_Bycode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_Bycode(response: HttpResponseBase): Observable<WMS_Warehouse_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_SKU_Search(body: WMS_Warehouse_SKU_ENTITY | undefined): Observable<WMS_Warehouse_SKU_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_SKU_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_SKU_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_SKU_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Warehouse_SKU_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Warehouse_SKU_ENTITY[]>;
        }));
    }

    protected processWMS_Warehouse_SKU_Search(response: HttpResponseBase): Observable<WMS_Warehouse_SKU_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Warehouse_SKU_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Warehouse_SKU_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Warehouse_SKU_Actions(body: WMS_Warehouse_SKU_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warehouse/WMS_Warehouse_SKU_Actions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Warehouse_SKU_Actions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Warehouse_SKU_Actions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Warehouse_SKU_Actions(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class WarrantyService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    warranty_Laptop_History_Search(body: Warranty_Laptop_ENTITY | undefined): Observable<Warranty_Laptop_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warranty/Warranty_Laptop_History_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWarranty_Laptop_History_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWarranty_Laptop_History_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Warranty_Laptop_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Warranty_Laptop_ENTITY[]>;
        }));
    }

    protected processWarranty_Laptop_History_Search(response: HttpResponseBase): Observable<Warranty_Laptop_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Warranty_Laptop_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Warranty_Laptop_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    warranty_Laptop_Inserst(body: Warranty_Laptop_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warranty/Warranty_Laptop_Inserst";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWarranty_Laptop_Inserst(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWarranty_Laptop_Inserst(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWarranty_Laptop_Inserst(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    warranty_Laptop_Search(body: Warranty_Laptop_ENTITY | undefined): Observable<Warranty_Laptop_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warranty/Warranty_Laptop_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWarranty_Laptop_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWarranty_Laptop_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Warranty_Laptop_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Warranty_Laptop_ENTITY[]>;
        }));
    }

    protected processWarranty_Laptop_Search(response: HttpResponseBase): Observable<Warranty_Laptop_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Warranty_Laptop_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Warranty_Laptop_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    warranty_Laptop_Update(body: Warranty_Laptop_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warranty/Warranty_Laptop_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWarranty_Laptop_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWarranty_Laptop_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWarranty_Laptop_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    warranty_Report_Laptop_Search(body: Warranty_Laptop_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warranty/Warranty_Report_Laptop_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWarranty_Report_Laptop_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWarranty_Report_Laptop_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWarranty_Report_Laptop_Search(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    warranty_Laptop_PrintDocWarranty(body: Warranty_Laptop_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Warranty/Warranty_Laptop_PrintDocWarranty";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWarranty_Laptop_PrintDocWarranty(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWarranty_Laptop_PrintDocWarranty(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWarranty_Laptop_PrintDocWarranty(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    warranty_Laptop_Print_History_Search(body: Warranty_Laptop_Print_History_ENTITY | undefined): Observable<Warranty_Laptop_Print_History_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warranty/Warranty_Laptop_Print_History_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWarranty_Laptop_Print_History_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWarranty_Laptop_Print_History_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Warranty_Laptop_Print_History_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Warranty_Laptop_Print_History_ENTITY[]>;
        }));
    }

    protected processWarranty_Laptop_Print_History_Search(response: HttpResponseBase): Observable<Warranty_Laptop_Print_History_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Warranty_Laptop_Print_History_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Warranty_Laptop_Print_History_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    warranty_Laptop_Log_Update_Search(body: Warranty_Laptop_Log_Update_ENTITY | undefined): Observable<Warranty_Laptop_Log_Update_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Warranty/Warranty_Laptop_Log_Update_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWarranty_Laptop_Log_Update_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWarranty_Laptop_Log_Update_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Warranty_Laptop_Log_Update_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Warranty_Laptop_Log_Update_ENTITY[]>;
        }));
    }

    protected processWarranty_Laptop_Log_Update_Search(response: HttpResponseBase): Observable<Warranty_Laptop_Log_Update_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Warranty_Laptop_Log_Update_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Warranty_Laptop_Log_Update_ENTITY[]>(null as any);
    }
}

@Injectable()
export class WMSCategoryService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Warehouse_Search(body: CAT_Warehouse_ENTITY | undefined): Observable<CAT_Warehouse_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Warehouse_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Warehouse_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Warehouse_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Warehouse_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Warehouse_ENTITY[]>;
        }));
    }

    protected processCAT_Warehouse_Search(response: HttpResponseBase): Observable<CAT_Warehouse_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Warehouse_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Warehouse_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Warehouse_Action_By_Type(body: CAT_Warehouse_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Warehouse_Action_By_Type";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Warehouse_Action_By_Type(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Warehouse_Action_By_Type(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Warehouse_Action_By_Type(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Search(body: CAT_Goods_ENTITY | undefined): Observable<CAT_Goods_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Goods_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Goods_ENTITY[]>;
        }));
    }

    protected processCAT_Goods_Search(response: HttpResponseBase): Observable<CAT_Goods_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Goods_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Goods_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Delete(body: CAT_Goods_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Update(body: CAT_Goods_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Insert(body: CAT_Goods_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Configuration_Search_By_Goods(body: CAT_Goods_Configuration_ENTITY | undefined): Observable<CAT_Goods_Configuration_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Configuration_Search_By_Goods";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Configuration_Search_By_Goods(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Configuration_Search_By_Goods(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Goods_Configuration_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Goods_Configuration_ENTITY[]>;
        }));
    }

    protected processCAT_Goods_Configuration_Search_By_Goods(response: HttpResponseBase): Observable<CAT_Goods_Configuration_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Goods_Configuration_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Goods_Configuration_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Configuration_Search(body: CAT_Goods_Configuration_ENTITY | undefined): Observable<CAT_Goods_Configuration_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Configuration_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Configuration_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Configuration_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Goods_Configuration_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Goods_Configuration_ENTITY[]>;
        }));
    }

    protected processCAT_Goods_Configuration_Search(response: HttpResponseBase): Observable<CAT_Goods_Configuration_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Goods_Configuration_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Goods_Configuration_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Configuration_Delete(body: CAT_Goods_Configuration_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Configuration_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Configuration_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Configuration_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Configuration_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Configuration_Update(body: CAT_Goods_Configuration_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Configuration_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Configuration_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Configuration_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Configuration_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Configuration_Insert(body: CAT_Goods_Configuration_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Configuration_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Configuration_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Configuration_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Configuration_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Group_Action_By_Type(body: CAT_Goods_Group_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Group_Action_By_Type";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Group_Action_By_Type(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Group_Action_By_Type(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Group_Action_By_Type(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Group_Search(body: CAT_Goods_Group_ENTITY | undefined): Observable<CAT_Goods_Group_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Group_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Group_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Group_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Goods_Group_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Goods_Group_ENTITY[]>;
        }));
    }

    protected processCAT_Goods_Group_Search(response: HttpResponseBase): Observable<CAT_Goods_Group_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Goods_Group_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Goods_Group_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Unit_Action_By_Type(body: CAT_Goods_Unit_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Unit_Action_By_Type";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Unit_Action_By_Type(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Unit_Action_By_Type(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Unit_Action_By_Type(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Unit_Search(body: CAT_Goods_Unit_ENTITY | undefined): Observable<CAT_Goods_Unit_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Unit_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Unit_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Unit_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Goods_Unit_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Goods_Unit_ENTITY[]>;
        }));
    }

    protected processCAT_Goods_Unit_Search(response: HttpResponseBase): Observable<CAT_Goods_Unit_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Goods_Unit_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Goods_Unit_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Unit_Conversion_Factor_Delete(body: CAT_Goods_Unit_Conversion_Factor_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Unit_Conversion_Factor_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Unit_Conversion_Factor_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Unit_Conversion_Factor_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Unit_Conversion_Factor_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Unit_Conversion_Factor_Update(body: CAT_Goods_Unit_Conversion_Factor_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Unit_Conversion_Factor_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Unit_Conversion_Factor_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Unit_Conversion_Factor_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Unit_Conversion_Factor_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Unit_Conversion_Factor_Insert(body: CAT_Goods_Unit_Conversion_Factor_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Unit_Conversion_Factor_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Unit_Conversion_Factor_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Unit_Conversion_Factor_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Unit_Conversion_Factor_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Unit_Conversion_Factor_Search(body: CAT_Goods_Unit_Conversion_Factor_ENTITY | undefined): Observable<CAT_Goods_Unit_Conversion_Factor_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Unit_Conversion_Factor_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Unit_Conversion_Factor_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Unit_Conversion_Factor_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Goods_Unit_Conversion_Factor_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Goods_Unit_Conversion_Factor_ENTITY[]>;
        }));
    }

    protected processCAT_Goods_Unit_Conversion_Factor_Search(response: HttpResponseBase): Observable<CAT_Goods_Unit_Conversion_Factor_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Goods_Unit_Conversion_Factor_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Goods_Unit_Conversion_Factor_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Serial_Delete(body: CAT_Goods_Serial_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Serial_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Serial_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Serial_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Serial_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Serial_Update(body: CAT_Goods_Serial_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Serial_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Serial_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Serial_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Serial_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Serial_Insert(body: CAT_Goods_Serial_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Serial_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Serial_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Serial_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processCAT_Goods_Serial_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cAT_Goods_Serial_Search(body: CAT_Goods_Serial_ENTITY | undefined): Observable<CAT_Goods_Serial_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSCategory/CAT_Goods_Serial_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCAT_Goods_Serial_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCAT_Goods_Serial_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CAT_Goods_Serial_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CAT_Goods_Serial_ENTITY[]>;
        }));
    }

    protected processCAT_Goods_Serial_Search(response: HttpResponseBase): Observable<CAT_Goods_Serial_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CAT_Goods_Serial_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CAT_Goods_Serial_ENTITY[]>(null as any);
    }
}

@Injectable()
export class WMSReportService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory_Movement(body: WMS_Report_Inventory_Movement_ENTITY | undefined): Observable<WMS_Report_Inventory_Movement_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory_Movement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory_Movement(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory_Movement(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_Movement_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_Movement_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory_Movement(response: HttpResponseBase): Observable<WMS_Report_Inventory_Movement_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_Movement_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_Movement_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory(body: WMS_Report_Inventory_ENTITY | undefined): Observable<WMS_Report_Inventory_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory(response: HttpResponseBase): Observable<WMS_Report_Inventory_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory_Have_Serial(body: WMS_Report_Inventory_ENTITY | undefined): Observable<WMS_Report_Inventory_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory_Have_Serial";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory_Have_Serial(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory_Have_Serial(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory_Have_Serial(response: HttpResponseBase): Observable<WMS_Report_Inventory_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Prepaid_Expense_Allocation(body: WMS_Prepaid_Expense_Allocation_ENTITY | undefined): Observable<WMS_Prepaid_Expense_Allocation_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Prepaid_Expense_Allocation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Prepaid_Expense_Allocation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Prepaid_Expense_Allocation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Prepaid_Expense_Allocation_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Prepaid_Expense_Allocation_ENTITY[]>;
        }));
    }

    protected processWMS_Prepaid_Expense_Allocation(response: HttpResponseBase): Observable<WMS_Prepaid_Expense_Allocation_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Prepaid_Expense_Allocation_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Prepaid_Expense_Allocation_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Prepaid_Expense_Allocation_Delete(body: WMS_Prepaid_Expense_Allocation_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Prepaid_Expense_Allocation_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Prepaid_Expense_Allocation_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Prepaid_Expense_Allocation_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processWMS_Prepaid_Expense_Allocation_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_I45_Search(body: WMS_Report_I45_ENTITY | undefined): Observable<WMS_Report_I45_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_I45_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_I45_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_I45_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_I45_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_I45_ENTITY[]>;
        }));
    }

    protected processWMS_Report_I45_Search(response: HttpResponseBase): Observable<WMS_Report_I45_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_I45_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_I45_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_I44_Search(body: WMS_Report_I44_ENTITY | undefined): Observable<WMS_Report_I44_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_I44_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_I44_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_I44_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_I44_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_I44_ENTITY[]>;
        }));
    }

    protected processWMS_Report_I44_Search(response: HttpResponseBase): Observable<WMS_Report_I44_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_I44_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_I44_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_I43_Search(body: WMS_Report_I43_ENTITY | undefined): Observable<WMS_Report_I43_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_I43_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_I43_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_I43_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_I43_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_I43_ENTITY[]>;
        }));
    }

    protected processWMS_Report_I43_Search(response: HttpResponseBase): Observable<WMS_Report_I43_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_I43_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_I43_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_I42_Search(body: WMS_Report_I42_ENTITY | undefined): Observable<WMS_Report_I42_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_I42_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_I42_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_I42_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_I42_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_I42_ENTITY[]>;
        }));
    }

    protected processWMS_Report_I42_Search(response: HttpResponseBase): Observable<WMS_Report_I42_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_I42_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_I42_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_I41_Search(body: WMS_Report_I41_ENTITY | undefined): Observable<WMS_Report_I41_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_I41_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_I41_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_I41_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_I41_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_I41_ENTITY[]>;
        }));
    }

    protected processWMS_Report_I41_Search(response: HttpResponseBase): Observable<WMS_Report_I41_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_I41_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_I41_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Allocation_Search(body: WMS_Report_Allocation_ENTITY | undefined): Observable<WMS_Report_Allocation_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Allocation_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Allocation_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Allocation_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Allocation_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Allocation_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Allocation_Search(response: HttpResponseBase): Observable<WMS_Report_Allocation_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Allocation_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Allocation_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Goods_Import_Search(body: WMS_Report_Goods_Import_ENTITY | undefined): Observable<WMS_Report_Goods_Import_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Goods_Import_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Goods_Import_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Goods_Import_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Goods_Import_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Goods_Import_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Goods_Import_Search(response: HttpResponseBase): Observable<WMS_Report_Goods_Import_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Goods_Import_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Goods_Import_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory_Material_Ledger_Search(body: WMS_Report_Inventory_Material_Ledger_ENTITY | undefined): Observable<WMS_Report_Inventory_Material_Ledger_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory_Material_Ledger_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory_Material_Ledger_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory_Material_Ledger_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_Material_Ledger_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_Material_Ledger_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory_Material_Ledger_Search(response: HttpResponseBase): Observable<WMS_Report_Inventory_Material_Ledger_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_Material_Ledger_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_Material_Ledger_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory_Book_Detail_Search(body: WMS_Report_Inventory_Book_Detail_ENTITY | undefined): Observable<WMS_Report_Inventory_Book_Detail_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory_Book_Detail_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory_Book_Detail_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory_Book_Detail_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_Book_Detail_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_Book_Detail_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory_Book_Detail_Search(response: HttpResponseBase): Observable<WMS_Report_Inventory_Book_Detail_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_Book_Detail_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_Book_Detail_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory_By_Warehouse_Search(body: WMS_Report_Inventory_By_Warehouse_ENTITY | undefined): Observable<WMS_Report_Inventory_By_Warehouse_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory_By_Warehouse_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory_By_Warehouse_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory_By_Warehouse_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_By_Warehouse_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_By_Warehouse_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory_By_Warehouse_Search(response: HttpResponseBase): Observable<WMS_Report_Inventory_By_Warehouse_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_By_Warehouse_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_By_Warehouse_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory_Import_Export_Search(body: WMS_Report_Inventory_Import_Export_ENTITY | undefined): Observable<WMS_Report_Inventory_Import_Export_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory_Import_Export_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory_Import_Export_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory_Import_Export_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_Import_Export_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_Import_Export_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory_Import_Export_Search(response: HttpResponseBase): Observable<WMS_Report_Inventory_Import_Export_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_Import_Export_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_Import_Export_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory_Incoming_Summary_Search(body: WMS_Report_Inventory_Incoming_Summary_ENTITY | undefined): Observable<WMS_Report_Inventory_Incoming_Summary_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory_Incoming_Summary_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory_Incoming_Summary_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory_Incoming_Summary_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_Incoming_Summary_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_Incoming_Summary_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory_Incoming_Summary_Search(response: HttpResponseBase): Observable<WMS_Report_Inventory_Incoming_Summary_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_Incoming_Summary_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_Incoming_Summary_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory_Issued_Summary_Search(body: WMS_Report_Inventory_Issued_Summary_ENTITY | undefined): Observable<WMS_Report_Inventory_Issued_Summary_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory_Issued_Summary_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory_Issued_Summary_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory_Issued_Summary_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_Issued_Summary_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_Issued_Summary_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory_Issued_Summary_Search(response: HttpResponseBase): Observable<WMS_Report_Inventory_Issued_Summary_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_Issued_Summary_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_Issued_Summary_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Calculate_The_Average_Costing_Search(body: WMS_Average_Cost_Sheet_ENTITY | undefined): Observable<WMS_Average_Cost_Sheet_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Calculate_The_Average_Costing_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Calculate_The_Average_Costing_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Calculate_The_Average_Costing_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Average_Cost_Sheet_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Average_Cost_Sheet_ENTITY[]>;
        }));
    }

    protected processWMS_Calculate_The_Average_Costing_Search(response: HttpResponseBase): Observable<WMS_Average_Cost_Sheet_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Average_Cost_Sheet_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Average_Cost_Sheet_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Calculate_The_Average_Costing_Data_Search(body: WMS_Average_Cost_Sheet_ENTITY | undefined): Observable<WMS_Average_Cost_Sheet_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Calculate_The_Average_Costing_Data_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Calculate_The_Average_Costing_Data_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Calculate_The_Average_Costing_Data_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Average_Cost_Sheet_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Average_Cost_Sheet_ENTITY[]>;
        }));
    }

    protected processWMS_Calculate_The_Average_Costing_Data_Search(response: HttpResponseBase): Observable<WMS_Average_Cost_Sheet_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Average_Cost_Sheet_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Average_Cost_Sheet_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Calculate_The_Average_Costing_Search(body: WMS_Average_Cost_Sheet_ENTITY | undefined): Observable<WMS_Average_Cost_Sheet_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Calculate_The_Average_Costing_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Calculate_The_Average_Costing_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Calculate_The_Average_Costing_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Average_Cost_Sheet_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Average_Cost_Sheet_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Calculate_The_Average_Costing_Search(response: HttpResponseBase): Observable<WMS_Average_Cost_Sheet_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Average_Cost_Sheet_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Average_Cost_Sheet_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Realtime_Inventory_Search(body: WMS_Report_Inventory_ENTITY | undefined): Observable<WMS_Report_Inventory_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Realtime_Inventory_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Realtime_Inventory_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Realtime_Inventory_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
        }));
    }

    protected processWMS_Realtime_Inventory_Search(response: HttpResponseBase): Observable<WMS_Report_Inventory_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory_Realtime_Search(body: WMS_Report_Inventory_ENTITY | undefined): Observable<WMS_Report_Inventory_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory_Realtime_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory_Realtime_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory_Realtime_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory_Realtime_Search(response: HttpResponseBase): Observable<WMS_Report_Inventory_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Report_Inventory_Realtime_Have_Serial_Search(body: WMS_Report_Inventory_ENTITY | undefined): Observable<WMS_Report_Inventory_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Report_Inventory_Realtime_Have_Serial_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Report_Inventory_Realtime_Have_Serial_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Report_Inventory_Realtime_Have_Serial_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
        }));
    }

    protected processWMS_Report_Inventory_Realtime_Have_Serial_Search(response: HttpResponseBase): Observable<WMS_Report_Inventory_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    wMS_Realtime_Inventory_Check(body: WMS_Report_Inventory_Check_ENTITY | undefined): Observable<WMS_Report_Inventory_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSReport/WMS_Realtime_Inventory_Check";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWMS_Realtime_Inventory_Check(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWMS_Realtime_Inventory_Check(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WMS_Report_Inventory_ENTITY[]>;
        }));
    }

    protected processWMS_Realtime_Inventory_Check(response: HttpResponseBase): Observable<WMS_Report_Inventory_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WMS_Report_Inventory_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WMS_Report_Inventory_ENTITY[]>(null as any);
    }
}

@Injectable()
export class WMSVoucherService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i41_M_Search(body: I41_M_ENTITY | undefined): Observable<I41_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I41_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI41_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI41_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I41_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I41_M_ENTITY[]>;
        }));
    }

    protected processI41_M_Search(response: HttpResponseBase): Observable<I41_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I41_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I41_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i41_M_Insert(body: I41_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I41_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI41_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI41_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI41_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i41_D_Search(body: I41_D_ENTITY | undefined): Observable<I41_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I41_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI41_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI41_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I41_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I41_D_ENTITY[]>;
        }));
    }

    protected processI41_D_Search(response: HttpResponseBase): Observable<I41_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I41_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I41_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i41_M_Update(body: I41_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I41_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI41_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI41_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI41_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i41_M_Delete(body: I41_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I41_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI41_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI41_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI41_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i42_M_Search(body: I42_M_ENTITY | undefined): Observable<I42_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I42_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI42_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI42_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I42_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I42_M_ENTITY[]>;
        }));
    }

    protected processI42_M_Search(response: HttpResponseBase): Observable<I42_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I42_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I42_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i42_M_Insert(body: I42_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I42_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI42_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI42_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI42_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i42_D_Search(body: I42_D_ENTITY | undefined): Observable<I42_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I42_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI42_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI42_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I42_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I42_D_ENTITY[]>;
        }));
    }

    protected processI42_D_Search(response: HttpResponseBase): Observable<I42_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I42_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I42_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i42_M_Update(body: I42_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I42_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI42_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI42_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI42_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i42_M_Delete(body: I42_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I42_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI42_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI42_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI42_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i43_M_Search(body: I43_M_ENTITY | undefined): Observable<I43_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I43_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI43_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI43_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I43_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I43_M_ENTITY[]>;
        }));
    }

    protected processI43_M_Search(response: HttpResponseBase): Observable<I43_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I43_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I43_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i43_M_Insert(body: I43_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I43_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI43_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI43_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI43_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i43_D_Search(body: I43_D_ENTITY | undefined): Observable<I43_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I43_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI43_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI43_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I43_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I43_D_ENTITY[]>;
        }));
    }

    protected processI43_D_Search(response: HttpResponseBase): Observable<I43_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I43_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I43_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i43_M_Update(body: I43_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I43_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI43_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI43_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI43_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i43_M_Delete(body: I43_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I43_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI43_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI43_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI43_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i44_M_Search(body: I44_M_ENTITY | undefined): Observable<I44_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I44_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI44_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI44_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I44_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I44_M_ENTITY[]>;
        }));
    }

    protected processI44_M_Search(response: HttpResponseBase): Observable<I44_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I44_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I44_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i44_M_Insert(body: I44_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I44_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI44_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI44_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI44_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i44_D_Search(body: I44_D_ENTITY | undefined): Observable<I44_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I44_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI44_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI44_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I44_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I44_D_ENTITY[]>;
        }));
    }

    protected processI44_D_Search(response: HttpResponseBase): Observable<I44_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I44_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I44_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i44_M_Update(body: I44_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I44_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI44_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI44_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI44_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i44_M_Delete(body: I44_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I44_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI44_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI44_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI44_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i45_M_Search(body: I45_M_ENTITY | undefined): Observable<I45_M_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I45_M_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI45_M_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI45_M_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I45_M_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I45_M_ENTITY[]>;
        }));
    }

    protected processI45_M_Search(response: HttpResponseBase): Observable<I45_M_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I45_M_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I45_M_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i45_M_Insert(body: I45_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I45_M_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI45_M_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI45_M_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI45_M_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i45_D_Search(body: I45_D_ENTITY | undefined): Observable<I45_D_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I45_D_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI45_D_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI45_D_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I45_D_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I45_D_ENTITY[]>;
        }));
    }

    protected processI45_D_Search(response: HttpResponseBase): Observable<I45_D_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I45_D_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I45_D_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i45_M_Update(body: I45_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I45_M_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI45_M_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI45_M_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI45_M_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i45_M_Delete(body: I45_M_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I45_M_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI45_M_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI45_M_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI45_M_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i45_Damaged_Tools_Equipment_Search(body: I45_Damaged_Tools_Equipment_ENTITY | undefined): Observable<I45_Damaged_Tools_Equipment_ENTITY[]> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I45_Damaged_Tools_Equipment_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI45_Damaged_Tools_Equipment_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI45_Damaged_Tools_Equipment_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<I45_Damaged_Tools_Equipment_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<I45_Damaged_Tools_Equipment_ENTITY[]>;
        }));
    }

    protected processI45_Damaged_Tools_Equipment_Search(response: HttpResponseBase): Observable<I45_Damaged_Tools_Equipment_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(I45_Damaged_Tools_Equipment_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<I45_Damaged_Tools_Equipment_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i45_Damaged_Tools_Equipment_Update(body: I45_Damaged_Tools_Equipment_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I45_Damaged_Tools_Equipment_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI45_Damaged_Tools_Equipment_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI45_Damaged_Tools_Equipment_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI45_Damaged_Tools_Equipment_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i45_Damaged_Tools_Equipment_Insert(body: I45_Damaged_Tools_Equipment_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I45_Damaged_Tools_Equipment_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI45_Damaged_Tools_Equipment_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI45_Damaged_Tools_Equipment_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI45_Damaged_Tools_Equipment_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    i45_Damaged_Tools_Equipment_Delete(body: I45_Damaged_Tools_Equipment_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/WMSVoucher/I45_Damaged_Tools_Equipment_Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processI45_Damaged_Tools_Equipment_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processI45_Damaged_Tools_Equipment_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processI45_Damaged_Tools_Equipment_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

@Injectable()
export class WorkspaceService extends ApiBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AppSession) configuration: AppSession, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    hRM_Workspace_Comment_ByCode_Calendar(code: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Comment_ByCode_Calendar?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Comment_ByCode_Calendar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Comment_ByCode_Calendar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Workspace_Comment_ByCode_Calendar(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param listID (optional) 
     * @return Success
     */
    hRM_Workspace_Delete(listID: string | null | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Delete?";
        if (listID !== undefined && listID !== null)
            url_ += "listID=" + encodeURIComponent("" + listID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Workspace_Delete(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Workspace_Insert(body: HRM_Workspace_Master_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Workspace_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Workspace_Search(body: HRM_Workspace_ENTITY | undefined): Observable<HRM_Workspace_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Workspace_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Workspace_ENTITY[]>;
        }));
    }

    protected processHRM_Workspace_Search(response: HttpResponseBase): Observable<HRM_Workspace_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Workspace_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Workspace_ENTITY[]>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    hRM_Workspace_Search_ByID(id: number | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Search_ByID?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Search_ByID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Search_ByID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Workspace_Search_ByID(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Workspace_Update(body: HRM_Workspace_Master_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Workspace_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Workspace_Comment_Update(body: HRM_Workspace_Comment_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Comment_Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Comment_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Comment_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Workspace_Comment_Update(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Workspace_Comment_Insert(body: HRM_Workspace_Comment_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Comment_Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Comment_Insert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Comment_Insert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Workspace_Comment_Insert(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Workspace_Master_Search(body: HRM_Workspace_Master_ENTITY | undefined): Observable<HRM_Workspace_Master_ENTITY[]> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Master_Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Master_Search(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Master_Search(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HRM_Workspace_Master_ENTITY[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HRM_Workspace_Master_ENTITY[]>;
        }));
    }

    protected processHRM_Workspace_Master_Search(response: HttpResponseBase): Observable<HRM_Workspace_Master_ENTITY[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(HRM_Workspace_Master_ENTITY.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HRM_Workspace_Master_ENTITY[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hRM_Workspace_Update_Timesheet(body: HRM_Workspace_ENTITY | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Update_Timesheet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Update_Timesheet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Update_Timesheet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Workspace_Update_Timesheet(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }

    /**
     * @param code_master (optional) 
     * @param idCalendar (optional) 
     * @param top (optional) 
     * @return Success
     */
    hRM_Workspace_Timesheet_Search_By_IDCalendar(code_master: string | null | undefined, idCalendar: string | null | undefined, top: number | undefined): Observable<{ [key: string]: any; }> {
        let url_ = this.baseUrl + "/api/Workspace/HRM_Workspace_Timesheet_Search_By_IDCalendar?";
        if (code_master !== undefined && code_master !== null)
            url_ += "code_master=" + encodeURIComponent("" + code_master) + "&";
        if (idCalendar !== undefined && idCalendar !== null)
            url_ += "idCalendar=" + encodeURIComponent("" + idCalendar) + "&";
        if (top === null)
            throw new Error("The parameter 'top' cannot be null.");
        else if (top !== undefined)
            url_ += "top=" + encodeURIComponent("" + top) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processHRM_Workspace_Timesheet_Search_By_IDCalendar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHRM_Workspace_Timesheet_Search_By_IDCalendar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: any; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: any; }>;
        }));
    }

    protected processHRM_Workspace_Timesheet_Search_By_IDCalendar(response: HttpResponseBase): Observable<{ [key: string]: any; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: any; }>(null as any);
    }
}

export class SYS_Account_Group implements ISYS_Account_Group {
    id?: number;
    accounT_ID?: number | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    log?: string | undefined;
    notes?: string | undefined;
    name?: string | undefined;
    listaccount?: string | undefined;
    syS_Account_Infomation?: SYS_Account_Group[] | undefined;
    code?: string | undefined;
    type?: string | undefined;
    decentralization?: string | undefined;
    departmenT_CODE?: string | undefined;
    departmenT_NAME?: string | undefined;
    approve?: boolean | undefined;

    constructor(data?: ISYS_Account_Group) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.accounT_ID = _data["accounT_ID"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.log = _data["log"];
            this.notes = _data["notes"];
            this.name = _data["name"];
            this.listaccount = _data["listaccount"];
            if (Array.isArray(_data["syS_Account_Infomation"])) {
                this.syS_Account_Infomation = [] as any;
                for (let item of _data["syS_Account_Infomation"])
                    this.syS_Account_Infomation.push(SYS_Account_Group.fromJS(item));
            }
            this.code = _data["code"];
            this.type = _data["type"];
            this.decentralization = _data["decentralization"];
            this.departmenT_CODE = _data["departmenT_CODE"];
            this.departmenT_NAME = _data["departmenT_NAME"];
            this.approve = _data["approve"];
        }
    }

    static fromJS(data: any): SYS_Account_Group {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Account_Group();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accounT_ID"] = this.accounT_ID;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["log"] = this.log;
        data["notes"] = this.notes;
        data["name"] = this.name;
        data["listaccount"] = this.listaccount;
        if (Array.isArray(this.syS_Account_Infomation)) {
            data["syS_Account_Infomation"] = [];
            for (let item of this.syS_Account_Infomation)
                data["syS_Account_Infomation"].push(item.toJSON());
        }
        data["code"] = this.code;
        data["type"] = this.type;
        data["decentralization"] = this.decentralization;
        data["departmenT_CODE"] = this.departmenT_CODE;
        data["departmenT_NAME"] = this.departmenT_NAME;
        data["approve"] = this.approve;
        return data;
    }

    clone(): SYS_Account_Group {
        const json = this.toJSON();
        let result = new SYS_Account_Group();
        result.init(json);
        return result;
    }
}

export interface ISYS_Account_Group {
    id?: number;
    accounT_ID?: number | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    log?: string | undefined;
    notes?: string | undefined;
    name?: string | undefined;
    listaccount?: string | undefined;
    syS_Account_Infomation?: SYS_Account_Group[] | undefined;
    code?: string | undefined;
    type?: string | undefined;
    decentralization?: string | undefined;
    departmenT_CODE?: string | undefined;
    departmenT_NAME?: string | undefined;
    approve?: boolean | undefined;
}

export class SYS_Account_Group_Permission implements ISYS_Account_Group_Permission {
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: ISYS_Account_Group_Permission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SYS_Account_Group_Permission {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Account_Group_Permission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): SYS_Account_Group_Permission {
        const json = this.toJSON();
        let result = new SYS_Account_Group_Permission();
        result.init(json);
        return result;
    }
}

export interface ISYS_Account_Group_Permission {
    code?: string | undefined;
    name?: string | undefined;
}

export class SYS_Account_Infomation implements ISYS_Account_Infomation {
    id?: number;
    accounT_ID?: number | undefined;
    accounT_GROUP?: number | undefined;
    accounT_GROUP_NAME?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    log?: string | undefined;
    notes?: string | undefined;
    father?: string | undefined;
    useR_NAME?: string | undefined;
    password?: string | undefined;
    passworD_F?: string | undefined;
    code?: string | undefined;
    code_employee?: string | undefined;
    decentralization?: string | undefined;
    active?: boolean | undefined;
    allow_approve_worktime?: string | undefined;
    avarta?: string | undefined;
    lasT_NAME?: string | undefined;
    firsT_NAME?: string | undefined;
    approve?: boolean | undefined;
    mobilE_NUMBER?: string | undefined;
    address?: string | undefined;
    addresS_CURRENT?: string | undefined;
    iD_CARD?: string | undefined;
    birthday?: moment.Moment | undefined;
    birthdaY_F?: string | undefined;
    position?: string | undefined;
    positioN_NAME?: string | undefined;
    email?: string | undefined;
    education?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    experience?: string | undefined;
    additionaL_DETAILS?: string | undefined;
    departmenT_CODE?: string | undefined;
    departmenT_NAME?: string | undefined;
    chat_id?: number | undefined;
    new_message?: number | undefined;
    chat_name?: string | undefined;
    title?: string | undefined;
    body?: string | undefined;
    to?: string | undefined;
    from?: string | undefined;
    arr_to?: any[] | undefined;
    image_url?: string | undefined;
    user_create?: string | undefined;
    tag?: string | undefined;
    type?: string | undefined;
    list_user?: string | undefined;
    chat_review?: string | undefined;
    my_avt?: string | undefined;
    client_avt?: string | undefined;
    group_avt?: string | undefined;
    user_login?: string | undefined;
    xml?: string | undefined;
    chat_time?: moment.Moment | undefined;
    chat_time_f?: string | undefined;
    employee_code?: string | undefined;
    is_view?: boolean | undefined;

    constructor(data?: ISYS_Account_Infomation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.accounT_ID = _data["accounT_ID"];
            this.accounT_GROUP = _data["accounT_GROUP"];
            this.accounT_GROUP_NAME = _data["accounT_GROUP_NAME"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.log = _data["log"];
            this.notes = _data["notes"];
            this.father = _data["father"];
            this.useR_NAME = _data["useR_NAME"];
            this.password = _data["password"];
            this.passworD_F = _data["passworD_F"];
            this.code = _data["code"];
            this.code_employee = _data["code_employee"];
            this.decentralization = _data["decentralization"];
            this.active = _data["active"];
            this.allow_approve_worktime = _data["allow_approve_worktime"];
            this.avarta = _data["avarta"];
            this.lasT_NAME = _data["lasT_NAME"];
            this.firsT_NAME = _data["firsT_NAME"];
            this.approve = _data["approve"];
            this.mobilE_NUMBER = _data["mobilE_NUMBER"];
            this.address = _data["address"];
            this.addresS_CURRENT = _data["addresS_CURRENT"];
            this.iD_CARD = _data["iD_CARD"];
            this.birthday = _data["birthday"] ? moment.parseZone(_data["birthday"].toString()) : <any>undefined;
            this.birthdaY_F = _data["birthdaY_F"];
            this.position = _data["position"];
            this.positioN_NAME = _data["positioN_NAME"];
            this.email = _data["email"];
            this.education = _data["education"];
            this.country = _data["country"];
            this.city = _data["city"];
            this.experience = _data["experience"];
            this.additionaL_DETAILS = _data["additionaL_DETAILS"];
            this.departmenT_CODE = _data["departmenT_CODE"];
            this.departmenT_NAME = _data["departmenT_NAME"];
            this.chat_id = _data["chat_id"];
            this.new_message = _data["new_message"];
            this.chat_name = _data["chat_name"];
            this.title = _data["title"];
            this.body = _data["body"];
            this.to = _data["to"];
            this.from = _data["from"];
            if (Array.isArray(_data["arr_to"])) {
                this.arr_to = [] as any;
                for (let item of _data["arr_to"])
                    this.arr_to.push(item);
            }
            this.image_url = _data["image_url"];
            this.user_create = _data["user_create"];
            this.tag = _data["tag"];
            this.type = _data["type"];
            this.list_user = _data["list_user"];
            this.chat_review = _data["chat_review"];
            this.my_avt = _data["my_avt"];
            this.client_avt = _data["client_avt"];
            this.group_avt = _data["group_avt"];
            this.user_login = _data["user_login"];
            this.xml = _data["xml"];
            this.chat_time = _data["chat_time"] ? moment.parseZone(_data["chat_time"].toString()) : <any>undefined;
            this.chat_time_f = _data["chat_time_f"];
            this.employee_code = _data["employee_code"];
            this.is_view = _data["is_view"];
        }
    }

    static fromJS(data: any): SYS_Account_Infomation {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Account_Infomation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accounT_ID"] = this.accounT_ID;
        data["accounT_GROUP"] = this.accounT_GROUP;
        data["accounT_GROUP_NAME"] = this.accounT_GROUP_NAME;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["log"] = this.log;
        data["notes"] = this.notes;
        data["father"] = this.father;
        data["useR_NAME"] = this.useR_NAME;
        data["password"] = this.password;
        data["passworD_F"] = this.passworD_F;
        data["code"] = this.code;
        data["code_employee"] = this.code_employee;
        data["decentralization"] = this.decentralization;
        data["active"] = this.active;
        data["allow_approve_worktime"] = this.allow_approve_worktime;
        data["avarta"] = this.avarta;
        data["lasT_NAME"] = this.lasT_NAME;
        data["firsT_NAME"] = this.firsT_NAME;
        data["approve"] = this.approve;
        data["mobilE_NUMBER"] = this.mobilE_NUMBER;
        data["address"] = this.address;
        data["addresS_CURRENT"] = this.addresS_CURRENT;
        data["iD_CARD"] = this.iD_CARD;
        data["birthday"] = this.birthday ? this.birthday.toISOString(true) : <any>undefined;
        data["birthdaY_F"] = this.birthdaY_F;
        data["position"] = this.position;
        data["positioN_NAME"] = this.positioN_NAME;
        data["email"] = this.email;
        data["education"] = this.education;
        data["country"] = this.country;
        data["city"] = this.city;
        data["experience"] = this.experience;
        data["additionaL_DETAILS"] = this.additionaL_DETAILS;
        data["departmenT_CODE"] = this.departmenT_CODE;
        data["departmenT_NAME"] = this.departmenT_NAME;
        data["chat_id"] = this.chat_id;
        data["new_message"] = this.new_message;
        data["chat_name"] = this.chat_name;
        data["title"] = this.title;
        data["body"] = this.body;
        data["to"] = this.to;
        data["from"] = this.from;
        if (Array.isArray(this.arr_to)) {
            data["arr_to"] = [];
            for (let item of this.arr_to)
                data["arr_to"].push(item);
        }
        data["image_url"] = this.image_url;
        data["user_create"] = this.user_create;
        data["tag"] = this.tag;
        data["type"] = this.type;
        data["list_user"] = this.list_user;
        data["chat_review"] = this.chat_review;
        data["my_avt"] = this.my_avt;
        data["client_avt"] = this.client_avt;
        data["group_avt"] = this.group_avt;
        data["user_login"] = this.user_login;
        data["xml"] = this.xml;
        data["chat_time"] = this.chat_time ? this.chat_time.toISOString(true) : <any>undefined;
        data["chat_time_f"] = this.chat_time_f;
        data["employee_code"] = this.employee_code;
        data["is_view"] = this.is_view;
        return data;
    }

    clone(): SYS_Account_Infomation {
        const json = this.toJSON();
        let result = new SYS_Account_Infomation();
        result.init(json);
        return result;
    }
}

export interface ISYS_Account_Infomation {
    id?: number;
    accounT_ID?: number | undefined;
    accounT_GROUP?: number | undefined;
    accounT_GROUP_NAME?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    log?: string | undefined;
    notes?: string | undefined;
    father?: string | undefined;
    useR_NAME?: string | undefined;
    password?: string | undefined;
    passworD_F?: string | undefined;
    code?: string | undefined;
    code_employee?: string | undefined;
    decentralization?: string | undefined;
    active?: boolean | undefined;
    allow_approve_worktime?: string | undefined;
    avarta?: string | undefined;
    lasT_NAME?: string | undefined;
    firsT_NAME?: string | undefined;
    approve?: boolean | undefined;
    mobilE_NUMBER?: string | undefined;
    address?: string | undefined;
    addresS_CURRENT?: string | undefined;
    iD_CARD?: string | undefined;
    birthday?: moment.Moment | undefined;
    birthdaY_F?: string | undefined;
    position?: string | undefined;
    positioN_NAME?: string | undefined;
    email?: string | undefined;
    education?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    experience?: string | undefined;
    additionaL_DETAILS?: string | undefined;
    departmenT_CODE?: string | undefined;
    departmenT_NAME?: string | undefined;
    chat_id?: number | undefined;
    new_message?: number | undefined;
    chat_name?: string | undefined;
    title?: string | undefined;
    body?: string | undefined;
    to?: string | undefined;
    from?: string | undefined;
    arr_to?: any[] | undefined;
    image_url?: string | undefined;
    user_create?: string | undefined;
    tag?: string | undefined;
    type?: string | undefined;
    list_user?: string | undefined;
    chat_review?: string | undefined;
    my_avt?: string | undefined;
    client_avt?: string | undefined;
    group_avt?: string | undefined;
    user_login?: string | undefined;
    xml?: string | undefined;
    chat_time?: moment.Moment | undefined;
    chat_time_f?: string | undefined;
    employee_code?: string | undefined;
    is_view?: boolean | undefined;
}

export class RequestManagement_ENTITY implements IRequestManagement_ENTITY {
    username?: string | undefined;
    token?: string | undefined;
    lastRequest?: moment.Moment | undefined;
    firstRequest?: moment.Moment | undefined;
    countLogin?: string | undefined;
    expiryDate?: moment.Moment | undefined;
    timeOut?: number | undefined;
    userAgent?: string | undefined;
    sec_ch_ua?: string | undefined;
    sec_ch_ua_platform?: string | undefined;
    isonline?: boolean | undefined;
    lastonlile?: string | undefined;
    hour_LastLogin?: number | undefined;
    browser?: string | undefined;
    browser_version?: string | undefined;
    device?: string | undefined;
    deviceType?: string | undefined;
    orientation?: string | undefined;
    os?: string | undefined;
    os_version?: string | undefined;

    constructor(data?: IRequestManagement_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.token = _data["token"];
            this.lastRequest = _data["lastRequest"] ? moment.parseZone(_data["lastRequest"].toString()) : <any>undefined;
            this.firstRequest = _data["firstRequest"] ? moment.parseZone(_data["firstRequest"].toString()) : <any>undefined;
            this.countLogin = _data["countLogin"];
            this.expiryDate = _data["expiryDate"] ? moment.parseZone(_data["expiryDate"].toString()) : <any>undefined;
            this.timeOut = _data["timeOut"];
            this.userAgent = _data["userAgent"];
            this.sec_ch_ua = _data["sec_ch_ua"];
            this.sec_ch_ua_platform = _data["sec_ch_ua_platform"];
            this.isonline = _data["isonline"];
            this.lastonlile = _data["lastonlile"];
            this.hour_LastLogin = _data["hour_LastLogin"];
            this.browser = _data["browser"];
            this.browser_version = _data["browser_version"];
            this.device = _data["device"];
            this.deviceType = _data["deviceType"];
            this.orientation = _data["orientation"];
            this.os = _data["os"];
            this.os_version = _data["os_version"];
        }
    }

    static fromJS(data: any): RequestManagement_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new RequestManagement_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["token"] = this.token;
        data["lastRequest"] = this.lastRequest ? this.lastRequest.toISOString(true) : <any>undefined;
        data["firstRequest"] = this.firstRequest ? this.firstRequest.toISOString(true) : <any>undefined;
        data["countLogin"] = this.countLogin;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString(true) : <any>undefined;
        data["timeOut"] = this.timeOut;
        data["userAgent"] = this.userAgent;
        data["sec_ch_ua"] = this.sec_ch_ua;
        data["sec_ch_ua_platform"] = this.sec_ch_ua_platform;
        data["isonline"] = this.isonline;
        data["lastonlile"] = this.lastonlile;
        data["hour_LastLogin"] = this.hour_LastLogin;
        data["browser"] = this.browser;
        data["browser_version"] = this.browser_version;
        data["device"] = this.device;
        data["deviceType"] = this.deviceType;
        data["orientation"] = this.orientation;
        data["os"] = this.os;
        data["os_version"] = this.os_version;
        return data;
    }

    clone(): RequestManagement_ENTITY {
        const json = this.toJSON();
        let result = new RequestManagement_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IRequestManagement_ENTITY {
    username?: string | undefined;
    token?: string | undefined;
    lastRequest?: moment.Moment | undefined;
    firstRequest?: moment.Moment | undefined;
    countLogin?: string | undefined;
    expiryDate?: moment.Moment | undefined;
    timeOut?: number | undefined;
    userAgent?: string | undefined;
    sec_ch_ua?: string | undefined;
    sec_ch_ua_platform?: string | undefined;
    isonline?: boolean | undefined;
    lastonlile?: string | undefined;
    hour_LastLogin?: number | undefined;
    browser?: string | undefined;
    browser_version?: string | undefined;
    device?: string | undefined;
    deviceType?: string | undefined;
    orientation?: string | undefined;
    os?: string | undefined;
    os_version?: string | undefined;
}

export class Mail_ENTITY implements IMail_ENTITY {
    email?: string | undefined;

    constructor(data?: IMail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): Mail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Mail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }

    clone(): Mail_ENTITY {
        const json = this.toJSON();
        let result = new Mail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IMail_ENTITY {
    email?: string | undefined;
}

export class SYS_ActionsOnTable_ENTITY implements ISYS_ActionsOnTable_ENTITY {
    id?: number;
    colAccountID?: number | undefined;
    active?: boolean | undefined;
    role?: boolean | undefined;
    name?: string | undefined;
    indexRow?: number | undefined;
    link?: string | undefined;
    tbName?: string | undefined;
    storedName?: string | undefined;
    onInit?: string | undefined;
    classForm?: string | undefined;
    onForm?: string | undefined;
    icon?: string | undefined;
    position?: number | undefined;
    userID?: number | undefined;
    language_id?: number | undefined;
    keyService?: string | undefined;
    permission?: string | undefined;
    namE_VN?: string | undefined;
    namE_EN?: string | undefined;
    param?: string | undefined;
    rollBack?: string | undefined;
    rollNext?: string | undefined;
    lisT_ACCTIONS?: string | undefined;
    icoN_APP_IOS?: string | undefined;
    icoN_APP_ANDROID?: string | undefined;
    icon_color?: string | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;

    constructor(data?: ISYS_ActionsOnTable_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.colAccountID = _data["colAccountID"];
            this.active = _data["active"];
            this.role = _data["role"];
            this.name = _data["name"];
            this.indexRow = _data["indexRow"];
            this.link = _data["link"];
            this.tbName = _data["tbName"];
            this.storedName = _data["storedName"];
            this.onInit = _data["onInit"];
            this.classForm = _data["classForm"];
            this.onForm = _data["onForm"];
            this.icon = _data["icon"];
            this.position = _data["position"];
            this.userID = _data["userID"];
            this.language_id = _data["language_id"];
            this.keyService = _data["keyService"];
            this.permission = _data["permission"];
            this.namE_VN = _data["namE_VN"];
            this.namE_EN = _data["namE_EN"];
            this.param = _data["param"];
            this.rollBack = _data["rollBack"];
            this.rollNext = _data["rollNext"];
            this.lisT_ACCTIONS = _data["lisT_ACCTIONS"];
            this.icoN_APP_IOS = _data["icoN_APP_IOS"];
            this.icoN_APP_ANDROID = _data["icoN_APP_ANDROID"];
            this.icon_color = _data["icon_color"];
            this.code = _data["code"];
            this.approve = _data["approve"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
        }
    }

    static fromJS(data: any): SYS_ActionsOnTable_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_ActionsOnTable_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["colAccountID"] = this.colAccountID;
        data["active"] = this.active;
        data["role"] = this.role;
        data["name"] = this.name;
        data["indexRow"] = this.indexRow;
        data["link"] = this.link;
        data["tbName"] = this.tbName;
        data["storedName"] = this.storedName;
        data["onInit"] = this.onInit;
        data["classForm"] = this.classForm;
        data["onForm"] = this.onForm;
        data["icon"] = this.icon;
        data["position"] = this.position;
        data["userID"] = this.userID;
        data["language_id"] = this.language_id;
        data["keyService"] = this.keyService;
        data["permission"] = this.permission;
        data["namE_VN"] = this.namE_VN;
        data["namE_EN"] = this.namE_EN;
        data["param"] = this.param;
        data["rollBack"] = this.rollBack;
        data["rollNext"] = this.rollNext;
        data["lisT_ACCTIONS"] = this.lisT_ACCTIONS;
        data["icoN_APP_IOS"] = this.icoN_APP_IOS;
        data["icoN_APP_ANDROID"] = this.icoN_APP_ANDROID;
        data["icon_color"] = this.icon_color;
        data["code"] = this.code;
        data["approve"] = this.approve;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        return data;
    }

    clone(): SYS_ActionsOnTable_ENTITY {
        const json = this.toJSON();
        let result = new SYS_ActionsOnTable_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_ActionsOnTable_ENTITY {
    id?: number;
    colAccountID?: number | undefined;
    active?: boolean | undefined;
    role?: boolean | undefined;
    name?: string | undefined;
    indexRow?: number | undefined;
    link?: string | undefined;
    tbName?: string | undefined;
    storedName?: string | undefined;
    onInit?: string | undefined;
    classForm?: string | undefined;
    onForm?: string | undefined;
    icon?: string | undefined;
    position?: number | undefined;
    userID?: number | undefined;
    language_id?: number | undefined;
    keyService?: string | undefined;
    permission?: string | undefined;
    namE_VN?: string | undefined;
    namE_EN?: string | undefined;
    param?: string | undefined;
    rollBack?: string | undefined;
    rollNext?: string | undefined;
    lisT_ACCTIONS?: string | undefined;
    icoN_APP_IOS?: string | undefined;
    icoN_APP_ANDROID?: string | undefined;
    icon_color?: string | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
}

export class SYS_ActionsOnTable_Permission_Detail_ENTITY implements ISYS_ActionsOnTable_Permission_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    code_menu_sub?: string | undefined;
    name?: string | undefined;
    tbName?: string | undefined;
    xml?: string | undefined;
    userID?: number | undefined;
    language_id?: number | undefined;
    active?: boolean | undefined;
    permission?: string | undefined;

    constructor(data?: ISYS_ActionsOnTable_Permission_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.code_menu_sub = _data["code_menu_sub"];
            this.name = _data["name"];
            this.tbName = _data["tbName"];
            this.xml = _data["xml"];
            this.userID = _data["userID"];
            this.language_id = _data["language_id"];
            this.active = _data["active"];
            this.permission = _data["permission"];
        }
    }

    static fromJS(data: any): SYS_ActionsOnTable_Permission_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_ActionsOnTable_Permission_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["code_menu_sub"] = this.code_menu_sub;
        data["name"] = this.name;
        data["tbName"] = this.tbName;
        data["xml"] = this.xml;
        data["userID"] = this.userID;
        data["language_id"] = this.language_id;
        data["active"] = this.active;
        data["permission"] = this.permission;
        return data;
    }

    clone(): SYS_ActionsOnTable_Permission_Detail_ENTITY {
        const json = this.toJSON();
        let result = new SYS_ActionsOnTable_Permission_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_ActionsOnTable_Permission_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    code_menu_sub?: string | undefined;
    name?: string | undefined;
    tbName?: string | undefined;
    xml?: string | undefined;
    userID?: number | undefined;
    language_id?: number | undefined;
    active?: boolean | undefined;
    permission?: string | undefined;
}

export class SYS_ActionsOnTable_Permission_ENTITY implements ISYS_ActionsOnTable_Permission_ENTITY {
    id?: number;
    tbName?: string | undefined;
    code?: string | undefined;
    code_menu_sub?: string | undefined;
    xml?: string | undefined;
    userID?: number | undefined;
    language_id?: number | undefined;
    details?: SYS_ActionsOnTable_Permission_Detail_ENTITY[] | undefined;

    constructor(data?: ISYS_ActionsOnTable_Permission_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tbName = _data["tbName"];
            this.code = _data["code"];
            this.code_menu_sub = _data["code_menu_sub"];
            this.xml = _data["xml"];
            this.userID = _data["userID"];
            this.language_id = _data["language_id"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details.push(SYS_ActionsOnTable_Permission_Detail_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SYS_ActionsOnTable_Permission_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_ActionsOnTable_Permission_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tbName"] = this.tbName;
        data["code"] = this.code;
        data["code_menu_sub"] = this.code_menu_sub;
        data["xml"] = this.xml;
        data["userID"] = this.userID;
        data["language_id"] = this.language_id;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data;
    }

    clone(): SYS_ActionsOnTable_Permission_ENTITY {
        const json = this.toJSON();
        let result = new SYS_ActionsOnTable_Permission_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_ActionsOnTable_Permission_ENTITY {
    id?: number;
    tbName?: string | undefined;
    code?: string | undefined;
    code_menu_sub?: string | undefined;
    xml?: string | undefined;
    userID?: number | undefined;
    language_id?: number | undefined;
    details?: SYS_ActionsOnTable_Permission_Detail_ENTITY[] | undefined;
}

export class ActionOnTableModel implements IActionOnTableModel {
    tbName?: string | undefined;
    syS_ActionsOnTables?: SYS_ActionsOnTable_ENTITY[] | undefined;

    constructor(data?: IActionOnTableModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tbName = _data["tbName"];
            if (Array.isArray(_data["syS_ActionsOnTables"])) {
                this.syS_ActionsOnTables = [] as any;
                for (let item of _data["syS_ActionsOnTables"])
                    this.syS_ActionsOnTables.push(SYS_ActionsOnTable_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ActionOnTableModel {
        data = typeof data === 'object' ? data : {};
        let result = new ActionOnTableModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tbName"] = this.tbName;
        if (Array.isArray(this.syS_ActionsOnTables)) {
            data["syS_ActionsOnTables"] = [];
            for (let item of this.syS_ActionsOnTables)
                data["syS_ActionsOnTables"].push(item.toJSON());
        }
        return data;
    }

    clone(): ActionOnTableModel {
        const json = this.toJSON();
        let result = new ActionOnTableModel();
        result.init(json);
        return result;
    }
}

export interface IActionOnTableModel {
    tbName?: string | undefined;
    syS_ActionsOnTables?: SYS_ActionsOnTable_ENTITY[] | undefined;
}

export class Token implements IToken {
    value?: string | undefined;
    expiryDate?: moment.Moment;

    constructor(data?: IToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.expiryDate = _data["expiryDate"] ? moment.parseZone(_data["expiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Token {
        data = typeof data === 'object' ? data : {};
        let result = new Token();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString(true) : <any>undefined;
        return data;
    }

    clone(): Token {
        const json = this.toJSON();
        let result = new Token();
        result.init(json);
        return result;
    }
}

export interface IToken {
    value?: string | undefined;
    expiryDate?: moment.Moment;
}

export class RequestModel implements IRequestModel {
    result?: string | undefined;
    errorDesc?: string | undefined;
    statusCode?: number | undefined;
    status?: number | undefined;
    message?: string | undefined;

    constructor(data?: IRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.errorDesc = _data["errorDesc"];
            this.statusCode = _data["statusCode"];
            this.status = _data["status"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): RequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new RequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["errorDesc"] = this.errorDesc;
        data["statusCode"] = this.statusCode;
        data["status"] = this.status;
        data["message"] = this.message;
        return data;
    }

    clone(): RequestModel {
        const json = this.toJSON();
        let result = new RequestModel();
        result.init(json);
        return result;
    }
}

export interface IRequestModel {
    result?: string | undefined;
    errorDesc?: string | undefined;
    statusCode?: number | undefined;
    status?: number | undefined;
    message?: string | undefined;
}

export class Colors implements IColors {
    id?: number;
    buttom?: string | undefined;
    color?: string | undefined;
    background?: string | undefined;
    icon?: string | undefined;
    header?: string | undefined;
    footer?: string | undefined;
    menu?: string | undefined;
    color1?: string | undefined;
    color2?: string | undefined;
    color3?: string | undefined;
    color4?: string | undefined;
    is_default?: boolean | undefined;
    type?: string | undefined;
    employee_code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IColors) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.buttom = _data["buttom"];
            this.color = _data["color"];
            this.background = _data["background"];
            this.icon = _data["icon"];
            this.header = _data["header"];
            this.footer = _data["footer"];
            this.menu = _data["menu"];
            this.color1 = _data["color1"];
            this.color2 = _data["color2"];
            this.color3 = _data["color3"];
            this.color4 = _data["color4"];
            this.is_default = _data["is_default"];
            this.type = _data["type"];
            this.employee_code = _data["employee_code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Colors {
        data = typeof data === 'object' ? data : {};
        let result = new Colors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["buttom"] = this.buttom;
        data["color"] = this.color;
        data["background"] = this.background;
        data["icon"] = this.icon;
        data["header"] = this.header;
        data["footer"] = this.footer;
        data["menu"] = this.menu;
        data["color1"] = this.color1;
        data["color2"] = this.color2;
        data["color3"] = this.color3;
        data["color4"] = this.color4;
        data["is_default"] = this.is_default;
        data["type"] = this.type;
        data["employee_code"] = this.employee_code;
        data["name"] = this.name;
        return data;
    }

    clone(): Colors {
        const json = this.toJSON();
        let result = new Colors();
        result.init(json);
        return result;
    }
}

export interface IColors {
    id?: number;
    buttom?: string | undefined;
    color?: string | undefined;
    background?: string | undefined;
    icon?: string | undefined;
    header?: string | undefined;
    footer?: string | undefined;
    menu?: string | undefined;
    color1?: string | undefined;
    color2?: string | undefined;
    color3?: string | undefined;
    color4?: string | undefined;
    is_default?: boolean | undefined;
    type?: string | undefined;
    employee_code?: string | undefined;
    name?: string | undefined;
}

export class User implements IUser {
    id?: number;
    status?: number;
    language_id?: number;
    message?: string | undefined;
    code?: string | undefined;
    roleID?: number;
    roleName?: string | undefined;
    avatar?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    tokens?: string | undefined;
    token?: Token;
    requestModel?: RequestModel;
    colors?: Colors;
    languageId?: number;
    level?: number | undefined;
    browser?: string | undefined;
    browser_version?: string | undefined;
    device?: string | undefined;
    deviceType?: string | undefined;
    orientation?: string | undefined;
    os?: string | undefined;
    os_version?: string | undefined;
    userAgent?: string | undefined;
    branch?: string | undefined;
    branch_name?: string | undefined;
    department?: string | undefined;
    title_code?: string | undefined;
    position_code?: string | undefined;
    fire_base_token?: string | undefined;
    color_id?: number | undefined;
    is_clear_cache?: boolean | undefined;
    voucher_year?: number;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    mail_domain?: string | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
            this.language_id = _data["language_id"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.roleID = _data["roleID"];
            this.roleName = _data["roleName"];
            this.avatar = _data["avatar"];
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.tokens = _data["tokens"];
            this.token = _data["token"] ? Token.fromJS(_data["token"]) : <any>undefined;
            this.requestModel = _data["requestModel"] ? RequestModel.fromJS(_data["requestModel"]) : <any>undefined;
            this.colors = _data["colors"] ? Colors.fromJS(_data["colors"]) : <any>undefined;
            this.languageId = _data["languageId"];
            this.level = _data["level"];
            this.browser = _data["browser"];
            this.browser_version = _data["browser_version"];
            this.device = _data["device"];
            this.deviceType = _data["deviceType"];
            this.orientation = _data["orientation"];
            this.os = _data["os"];
            this.os_version = _data["os_version"];
            this.userAgent = _data["userAgent"];
            this.branch = _data["branch"];
            this.branch_name = _data["branch_name"];
            this.department = _data["department"];
            this.title_code = _data["title_code"];
            this.position_code = _data["position_code"];
            this.fire_base_token = _data["fire_base_token"];
            this.color_id = _data["color_id"];
            this.is_clear_cache = _data["is_clear_cache"];
            this.voucher_year = _data["voucher_year"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.mail_domain = _data["mail_domain"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["language_id"] = this.language_id;
        data["message"] = this.message;
        data["code"] = this.code;
        data["roleID"] = this.roleID;
        data["roleName"] = this.roleName;
        data["avatar"] = this.avatar;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["username"] = this.username;
        data["password"] = this.password;
        data["tokens"] = this.tokens;
        data["token"] = this.token ? this.token.toJSON() : <any>undefined;
        data["requestModel"] = this.requestModel ? this.requestModel.toJSON() : <any>undefined;
        data["colors"] = this.colors ? this.colors.toJSON() : <any>undefined;
        data["languageId"] = this.languageId;
        data["level"] = this.level;
        data["browser"] = this.browser;
        data["browser_version"] = this.browser_version;
        data["device"] = this.device;
        data["deviceType"] = this.deviceType;
        data["orientation"] = this.orientation;
        data["os"] = this.os;
        data["os_version"] = this.os_version;
        data["userAgent"] = this.userAgent;
        data["branch"] = this.branch;
        data["branch_name"] = this.branch_name;
        data["department"] = this.department;
        data["title_code"] = this.title_code;
        data["position_code"] = this.position_code;
        data["fire_base_token"] = this.fire_base_token;
        data["color_id"] = this.color_id;
        data["is_clear_cache"] = this.is_clear_cache;
        data["voucher_year"] = this.voucher_year;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["mail_domain"] = this.mail_domain;
        return data;
    }

    clone(): User {
        const json = this.toJSON();
        let result = new User();
        result.init(json);
        return result;
    }
}

export interface IUser {
    id?: number;
    status?: number;
    language_id?: number;
    message?: string | undefined;
    code?: string | undefined;
    roleID?: number;
    roleName?: string | undefined;
    avatar?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    tokens?: string | undefined;
    token?: Token;
    requestModel?: RequestModel;
    colors?: Colors;
    languageId?: number;
    level?: number | undefined;
    browser?: string | undefined;
    browser_version?: string | undefined;
    device?: string | undefined;
    deviceType?: string | undefined;
    orientation?: string | undefined;
    os?: string | undefined;
    os_version?: string | undefined;
    userAgent?: string | undefined;
    branch?: string | undefined;
    branch_name?: string | undefined;
    department?: string | undefined;
    title_code?: string | undefined;
    position_code?: string | undefined;
    fire_base_token?: string | undefined;
    color_id?: number | undefined;
    is_clear_cache?: boolean | undefined;
    voucher_year?: number;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    mail_domain?: string | undefined;
}

export class CAT_Foreign_Currency_ENTITY implements ICAT_Foreign_Currency_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    language_id?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    type?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Foreign_Currency_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.exchange_rate = _data["exchange_rate"];
            this.symbol = _data["symbol"];
            this.language_id = _data["language_id"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.type = _data["type"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Foreign_Currency_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Foreign_Currency_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["exchange_rate"] = this.exchange_rate;
        data["symbol"] = this.symbol;
        data["language_id"] = this.language_id;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["type"] = this.type;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Foreign_Currency_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Foreign_Currency_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Foreign_Currency_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    language_id?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    type?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class CASH_Bank_Deposit_Ledger_ENTITY implements ICASH_Bank_Deposit_Ledger_ENTITY {
    code?: string | undefined;
    id?: number;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    grandparent?: string | undefined;
    customer_code?: string | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    exchange_rate?: number | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    debitor_money?: number | undefined;
    arise_debit_fc?: number | undefined;
    arise_credit_fc?: number | undefined;
    debitor_money_fc?: number | undefined;
    stt?: number | undefined;
    customer_name?: string | undefined;
    company_code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    symbol?: string | undefined;
    date_add?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    creditor_account?: string | undefined;
    account?: string | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    type?: string | undefined;
    language_id?: number | undefined;

    constructor(data?: ICASH_Bank_Deposit_Ledger_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.id = _data["id"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.grandparent = _data["grandparent"];
            this.customer_code = _data["customer_code"];
            this.notes = _data["notes"];
            this.debitor_account = _data["debitor_account"];
            this.code_fc = _data["code_fc"];
            this.code_symbol = _data["code_symbol"];
            this.exchange_rate = _data["exchange_rate"];
            this.arise_debit = _data["arise_debit"];
            this.arise_credit = _data["arise_credit"];
            this.debitor_money = _data["debitor_money"];
            this.arise_debit_fc = _data["arise_debit_fc"];
            this.arise_credit_fc = _data["arise_credit_fc"];
            this.debitor_money_fc = _data["debitor_money_fc"];
            this.stt = _data["stt"];
            this.customer_name = _data["customer_name"];
            this.company_code = _data["company_code"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.symbol = _data["symbol"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.creditor_account = _data["creditor_account"];
            this.account = _data["account"];
            this.voucher_year = _data["voucher_year"];
            this.voucher_code = _data["voucher_code"];
            this.type = _data["type"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): CASH_Bank_Deposit_Ledger_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CASH_Bank_Deposit_Ledger_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["id"] = this.id;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["grandparent"] = this.grandparent;
        data["customer_code"] = this.customer_code;
        data["notes"] = this.notes;
        data["debitor_account"] = this.debitor_account;
        data["code_fc"] = this.code_fc;
        data["code_symbol"] = this.code_symbol;
        data["exchange_rate"] = this.exchange_rate;
        data["arise_debit"] = this.arise_debit;
        data["arise_credit"] = this.arise_credit;
        data["debitor_money"] = this.debitor_money;
        data["arise_debit_fc"] = this.arise_debit_fc;
        data["arise_credit_fc"] = this.arise_credit_fc;
        data["debitor_money_fc"] = this.debitor_money_fc;
        data["stt"] = this.stt;
        data["customer_name"] = this.customer_name;
        data["company_code"] = this.company_code;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["symbol"] = this.symbol;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["creditor_account"] = this.creditor_account;
        data["account"] = this.account;
        data["voucher_year"] = this.voucher_year;
        data["voucher_code"] = this.voucher_code;
        data["type"] = this.type;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): CASH_Bank_Deposit_Ledger_ENTITY {
        const json = this.toJSON();
        let result = new CASH_Bank_Deposit_Ledger_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICASH_Bank_Deposit_Ledger_ENTITY {
    code?: string | undefined;
    id?: number;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    grandparent?: string | undefined;
    customer_code?: string | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    exchange_rate?: number | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    debitor_money?: number | undefined;
    arise_debit_fc?: number | undefined;
    arise_credit_fc?: number | undefined;
    debitor_money_fc?: number | undefined;
    stt?: number | undefined;
    customer_name?: string | undefined;
    company_code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    symbol?: string | undefined;
    date_add?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    creditor_account?: string | undefined;
    account?: string | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    type?: string | undefined;
    language_id?: number | undefined;
}

export class CASH_Disbursement_Journal_ENTITY implements ICASH_Disbursement_Journal_ENTITY {
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    grandparent?: string | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    arise?: number | undefined;
    arise_fc?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    description?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    code_symbol?: string | undefined;
    account?: string | undefined;
    type?: string | undefined;

    constructor(data?: ICASH_Disbursement_Journal_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.grandparent = _data["grandparent"];
            this.notes = _data["notes"];
            this.debitor_account = _data["debitor_account"];
            this.creditor_account = _data["creditor_account"];
            this.arise = _data["arise"];
            this.arise_fc = _data["arise_fc"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.description = _data["description"];
            this.exchange_rate = _data["exchange_rate"];
            this.symbol = _data["symbol"];
            this.code_symbol = _data["code_symbol"];
            this.account = _data["account"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CASH_Disbursement_Journal_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CASH_Disbursement_Journal_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["grandparent"] = this.grandparent;
        data["notes"] = this.notes;
        data["debitor_account"] = this.debitor_account;
        data["creditor_account"] = this.creditor_account;
        data["arise"] = this.arise;
        data["arise_fc"] = this.arise_fc;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["description"] = this.description;
        data["exchange_rate"] = this.exchange_rate;
        data["symbol"] = this.symbol;
        data["code_symbol"] = this.code_symbol;
        data["account"] = this.account;
        data["type"] = this.type;
        return data;
    }

    clone(): CASH_Disbursement_Journal_ENTITY {
        const json = this.toJSON();
        let result = new CASH_Disbursement_Journal_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICASH_Disbursement_Journal_ENTITY {
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    grandparent?: string | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    arise?: number | undefined;
    arise_fc?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    description?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    code_symbol?: string | undefined;
    account?: string | undefined;
    type?: string | undefined;
}

export class CASH_Ledger_Report_ENTITY implements ICASH_Ledger_Report_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    date_add?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    customer_code?: string | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    type?: string | undefined;
    id_mt?: number | undefined;
    code_mt?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code_mt?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    id_dt?: number | undefined;
    code_dt?: string | undefined;
    master_code?: string | undefined;
    description_dt?: string | undefined;
    customer_code_dt?: string | undefined;
    customer_name_dt?: string | undefined;
    arise_fc_dt?: number | undefined;
    arise_dt?: number | undefined;
    credit_money?: number | undefined;
    credit_money_fc?: number | undefined;
    creditor_account_dt?: string | undefined;
    account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    language_id?: number | undefined;
    code_symbol?: string | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    debitor_money?: number | undefined;
    arise_debit_fc?: number | undefined;
    arise_credit_fc?: number | undefined;
    debitor_money_fc?: number | undefined;

    constructor(data?: ICASH_Ledger_Report_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.exchange_rate = _data["exchange_rate"];
            this.symbol = _data["symbol"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.customer_code = _data["customer_code"];
            this.debitor_account = _data["debitor_account"];
            this.creditor_account = _data["creditor_account"];
            this.voucher_year = _data["voucher_year"];
            this.voucher_code = _data["voucher_code"];
            this.type = _data["type"];
            this.id_mt = _data["id_mt"];
            this.code_mt = _data["code_mt"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code_mt = _data["customer_code_mt"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.id_dt = _data["id_dt"];
            this.code_dt = _data["code_dt"];
            this.master_code = _data["master_code"];
            this.description_dt = _data["description_dt"];
            this.customer_code_dt = _data["customer_code_dt"];
            this.customer_name_dt = _data["customer_name_dt"];
            this.arise_fc_dt = _data["arise_fc_dt"];
            this.arise_dt = _data["arise_dt"];
            this.credit_money = _data["credit_money"];
            this.credit_money_fc = _data["credit_money_fc"];
            this.creditor_account_dt = _data["creditor_account_dt"];
            this.account = _data["account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.goods_code = _data["goods_code"];
            this.construction_id = _data["construction_id"];
            this.language_id = _data["language_id"];
            this.code_symbol = _data["code_symbol"];
            this.arise_debit = _data["arise_debit"];
            this.arise_credit = _data["arise_credit"];
            this.debitor_money = _data["debitor_money"];
            this.arise_debit_fc = _data["arise_debit_fc"];
            this.arise_credit_fc = _data["arise_credit_fc"];
            this.debitor_money_fc = _data["debitor_money_fc"];
        }
    }

    static fromJS(data: any): CASH_Ledger_Report_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CASH_Ledger_Report_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["exchange_rate"] = this.exchange_rate;
        data["symbol"] = this.symbol;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["customer_code"] = this.customer_code;
        data["debitor_account"] = this.debitor_account;
        data["creditor_account"] = this.creditor_account;
        data["voucher_year"] = this.voucher_year;
        data["voucher_code"] = this.voucher_code;
        data["type"] = this.type;
        data["id_mt"] = this.id_mt;
        data["code_mt"] = this.code_mt;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code_mt"] = this.customer_code_mt;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["id_dt"] = this.id_dt;
        data["code_dt"] = this.code_dt;
        data["master_code"] = this.master_code;
        data["description_dt"] = this.description_dt;
        data["customer_code_dt"] = this.customer_code_dt;
        data["customer_name_dt"] = this.customer_name_dt;
        data["arise_fc_dt"] = this.arise_fc_dt;
        data["arise_dt"] = this.arise_dt;
        data["credit_money"] = this.credit_money;
        data["credit_money_fc"] = this.credit_money_fc;
        data["creditor_account_dt"] = this.creditor_account_dt;
        data["account"] = this.account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["goods_code"] = this.goods_code;
        data["construction_id"] = this.construction_id;
        data["language_id"] = this.language_id;
        data["code_symbol"] = this.code_symbol;
        data["arise_debit"] = this.arise_debit;
        data["arise_credit"] = this.arise_credit;
        data["debitor_money"] = this.debitor_money;
        data["arise_debit_fc"] = this.arise_debit_fc;
        data["arise_credit_fc"] = this.arise_credit_fc;
        data["debitor_money_fc"] = this.debitor_money_fc;
        return data;
    }

    clone(): CASH_Ledger_Report_ENTITY {
        const json = this.toJSON();
        let result = new CASH_Ledger_Report_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICASH_Ledger_Report_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    date_add?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    customer_code?: string | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    type?: string | undefined;
    id_mt?: number | undefined;
    code_mt?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code_mt?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    id_dt?: number | undefined;
    code_dt?: string | undefined;
    master_code?: string | undefined;
    description_dt?: string | undefined;
    customer_code_dt?: string | undefined;
    customer_name_dt?: string | undefined;
    arise_fc_dt?: number | undefined;
    arise_dt?: number | undefined;
    credit_money?: number | undefined;
    credit_money_fc?: number | undefined;
    creditor_account_dt?: string | undefined;
    account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    language_id?: number | undefined;
    code_symbol?: string | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    debitor_money?: number | undefined;
    arise_debit_fc?: number | undefined;
    arise_credit_fc?: number | undefined;
    debitor_money_fc?: number | undefined;
}

export class CASH_Receipts_Ledger_ENTITY implements ICASH_Receipts_Ledger_ENTITY {
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    grandparent?: string | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    description?: string | undefined;
    arise?: number | undefined;
    arise_fc?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    code_symbol?: string | undefined;
    account?: string | undefined;
    type?: string | undefined;

    constructor(data?: ICASH_Receipts_Ledger_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.grandparent = _data["grandparent"];
            this.notes = _data["notes"];
            this.debitor_account = _data["debitor_account"];
            this.creditor_account = _data["creditor_account"];
            this.description = _data["description"];
            this.arise = _data["arise"];
            this.arise_fc = _data["arise_fc"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.exchange_rate = _data["exchange_rate"];
            this.symbol = _data["symbol"];
            this.code_symbol = _data["code_symbol"];
            this.account = _data["account"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CASH_Receipts_Ledger_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CASH_Receipts_Ledger_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["grandparent"] = this.grandparent;
        data["notes"] = this.notes;
        data["debitor_account"] = this.debitor_account;
        data["creditor_account"] = this.creditor_account;
        data["description"] = this.description;
        data["arise"] = this.arise;
        data["arise_fc"] = this.arise_fc;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["exchange_rate"] = this.exchange_rate;
        data["symbol"] = this.symbol;
        data["code_symbol"] = this.code_symbol;
        data["account"] = this.account;
        data["type"] = this.type;
        return data;
    }

    clone(): CASH_Receipts_Ledger_ENTITY {
        const json = this.toJSON();
        let result = new CASH_Receipts_Ledger_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICASH_Receipts_Ledger_ENTITY {
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    grandparent?: string | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    description?: string | undefined;
    arise?: number | undefined;
    arise_fc?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    code_symbol?: string | undefined;
    account?: string | undefined;
    type?: string | undefined;
}

export class CASH_Payment_voucher_report_ENTITY implements ICASH_Payment_voucher_report_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    date_add?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    customer_code?: string | undefined;
    tax_account?: string | undefined;
    tax_money?: number | undefined;
    total_arise?: number | undefined;
    total_arise_fc?: number | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    type?: string | undefined;
    id_mt?: number | undefined;
    code_mt?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code_mt?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    fee_name?: string | undefined;
    code_symbol?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    id_dt?: number | undefined;
    code_dt?: string | undefined;
    master_code?: string | undefined;
    description_dt?: string | undefined;
    customer_code_dt?: string | undefined;
    customer_name_dt?: string | undefined;
    arise_fc_dt?: number | undefined;
    arise_dt?: number | undefined;
    creditor_account_dt?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    construction_id?: string | undefined;
    construction_name?: string | undefined;
    language_id?: number | undefined;

    constructor(data?: ICASH_Payment_voucher_report_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.exchange_rate = _data["exchange_rate"];
            this.symbol = _data["symbol"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.customer_code = _data["customer_code"];
            this.tax_account = _data["tax_account"];
            this.tax_money = _data["tax_money"];
            this.total_arise = _data["total_arise"];
            this.total_arise_fc = _data["total_arise_fc"];
            this.debitor_account = _data["debitor_account"];
            this.creditor_account = _data["creditor_account"];
            this.voucher_year = _data["voucher_year"];
            this.voucher_code = _data["voucher_code"];
            this.type = _data["type"];
            this.id_mt = _data["id_mt"];
            this.code_mt = _data["code_mt"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code_mt = _data["customer_code_mt"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.fee_name = _data["fee_name"];
            this.code_symbol = _data["code_symbol"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.id_dt = _data["id_dt"];
            this.code_dt = _data["code_dt"];
            this.master_code = _data["master_code"];
            this.description_dt = _data["description_dt"];
            this.customer_code_dt = _data["customer_code_dt"];
            this.customer_name_dt = _data["customer_name_dt"];
            this.arise_fc_dt = _data["arise_fc_dt"];
            this.arise_dt = _data["arise_dt"];
            this.creditor_account_dt = _data["creditor_account_dt"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.department_name = _data["department_name"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.construction_id = _data["construction_id"];
            this.construction_name = _data["construction_name"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): CASH_Payment_voucher_report_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CASH_Payment_voucher_report_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["exchange_rate"] = this.exchange_rate;
        data["symbol"] = this.symbol;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["customer_code"] = this.customer_code;
        data["tax_account"] = this.tax_account;
        data["tax_money"] = this.tax_money;
        data["total_arise"] = this.total_arise;
        data["total_arise_fc"] = this.total_arise_fc;
        data["debitor_account"] = this.debitor_account;
        data["creditor_account"] = this.creditor_account;
        data["voucher_year"] = this.voucher_year;
        data["voucher_code"] = this.voucher_code;
        data["type"] = this.type;
        data["id_mt"] = this.id_mt;
        data["code_mt"] = this.code_mt;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code_mt"] = this.customer_code_mt;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["fee_name"] = this.fee_name;
        data["code_symbol"] = this.code_symbol;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["id_dt"] = this.id_dt;
        data["code_dt"] = this.code_dt;
        data["master_code"] = this.master_code;
        data["description_dt"] = this.description_dt;
        data["customer_code_dt"] = this.customer_code_dt;
        data["customer_name_dt"] = this.customer_name_dt;
        data["arise_fc_dt"] = this.arise_fc_dt;
        data["arise_dt"] = this.arise_dt;
        data["creditor_account_dt"] = this.creditor_account_dt;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["department_name"] = this.department_name;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["construction_id"] = this.construction_id;
        data["construction_name"] = this.construction_name;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): CASH_Payment_voucher_report_ENTITY {
        const json = this.toJSON();
        let result = new CASH_Payment_voucher_report_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICASH_Payment_voucher_report_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    date_add?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    customer_code?: string | undefined;
    tax_account?: string | undefined;
    tax_money?: number | undefined;
    total_arise?: number | undefined;
    total_arise_fc?: number | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    type?: string | undefined;
    id_mt?: number | undefined;
    code_mt?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code_mt?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    fee_name?: string | undefined;
    code_symbol?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    id_dt?: number | undefined;
    code_dt?: string | undefined;
    master_code?: string | undefined;
    description_dt?: string | undefined;
    customer_code_dt?: string | undefined;
    customer_name_dt?: string | undefined;
    arise_fc_dt?: number | undefined;
    arise_dt?: number | undefined;
    creditor_account_dt?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    construction_id?: string | undefined;
    construction_name?: string | undefined;
    language_id?: number | undefined;
}

export class CASH_Receipt_report_ENTITY implements ICASH_Receipt_report_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    date_add?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    customer_code?: string | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    type?: string | undefined;
    id_mt?: number | undefined;
    code_mt?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code_mt?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    id_dt?: number | undefined;
    code_dt?: string | undefined;
    master_code?: string | undefined;
    description_dt?: string | undefined;
    customer_code_dt?: string | undefined;
    customer_name_dt?: string | undefined;
    arise_fc_dt?: number | undefined;
    arise_dt?: number | undefined;
    creditor_account_dt?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    language_id?: number | undefined;

    constructor(data?: ICASH_Receipt_report_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.exchange_rate = _data["exchange_rate"];
            this.symbol = _data["symbol"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.customer_code = _data["customer_code"];
            this.debitor_account = _data["debitor_account"];
            this.creditor_account = _data["creditor_account"];
            this.voucher_year = _data["voucher_year"];
            this.voucher_code = _data["voucher_code"];
            this.type = _data["type"];
            this.id_mt = _data["id_mt"];
            this.code_mt = _data["code_mt"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code_mt = _data["customer_code_mt"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.code_symbol = _data["code_symbol"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.id_dt = _data["id_dt"];
            this.code_dt = _data["code_dt"];
            this.master_code = _data["master_code"];
            this.description_dt = _data["description_dt"];
            this.customer_code_dt = _data["customer_code_dt"];
            this.customer_name_dt = _data["customer_name_dt"];
            this.arise_fc_dt = _data["arise_fc_dt"];
            this.arise_dt = _data["arise_dt"];
            this.creditor_account_dt = _data["creditor_account_dt"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.goods_code = _data["goods_code"];
            this.construction_id = _data["construction_id"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): CASH_Receipt_report_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CASH_Receipt_report_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["exchange_rate"] = this.exchange_rate;
        data["symbol"] = this.symbol;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["customer_code"] = this.customer_code;
        data["debitor_account"] = this.debitor_account;
        data["creditor_account"] = this.creditor_account;
        data["voucher_year"] = this.voucher_year;
        data["voucher_code"] = this.voucher_code;
        data["type"] = this.type;
        data["id_mt"] = this.id_mt;
        data["code_mt"] = this.code_mt;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code_mt"] = this.customer_code_mt;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["code_symbol"] = this.code_symbol;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["id_dt"] = this.id_dt;
        data["code_dt"] = this.code_dt;
        data["master_code"] = this.master_code;
        data["description_dt"] = this.description_dt;
        data["customer_code_dt"] = this.customer_code_dt;
        data["customer_name_dt"] = this.customer_name_dt;
        data["arise_fc_dt"] = this.arise_fc_dt;
        data["arise_dt"] = this.arise_dt;
        data["creditor_account_dt"] = this.creditor_account_dt;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["goods_code"] = this.goods_code;
        data["construction_id"] = this.construction_id;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): CASH_Receipt_report_ENTITY {
        const json = this.toJSON();
        let result = new CASH_Receipt_report_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICASH_Receipt_report_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    exchange_rate?: number | undefined;
    symbol?: string | undefined;
    date_add?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    customer_code?: string | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    type?: string | undefined;
    id_mt?: number | undefined;
    code_mt?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code_mt?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    id_dt?: number | undefined;
    code_dt?: string | undefined;
    master_code?: string | undefined;
    description_dt?: string | undefined;
    customer_code_dt?: string | undefined;
    customer_name_dt?: string | undefined;
    arise_fc_dt?: number | undefined;
    arise_dt?: number | undefined;
    creditor_account_dt?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    language_id?: number | undefined;
}

export class C11_D_ENTITY implements IC11_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IC11_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.master_code = _data["master_code"];
            this.description = _data["description"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.creditor_account = _data["creditor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.goods_code = _data["goods_code"];
            this.construction_id = _data["construction_id"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): C11_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new C11_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["master_code"] = this.master_code;
        data["description"] = this.description;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["creditor_account"] = this.creditor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["goods_code"] = this.goods_code;
        data["construction_id"] = this.construction_id;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): C11_D_ENTITY {
        const json = this.toJSON();
        let result = new C11_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IC11_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class C11_M_ENTITY implements IC11_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    xml_11d?: string | undefined;
    c11_d?: C11_D_ENTITY[] | undefined;

    constructor(data?: IC11_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.debitor_account = _data["debitor_account"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.xml_11d = _data["xml_11d"];
            if (Array.isArray(_data["c11_d"])) {
                this.c11_d = [] as any;
                for (let item of _data["c11_d"])
                    this.c11_d.push(C11_D_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): C11_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new C11_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["debitor_account"] = this.debitor_account;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["xml_11d"] = this.xml_11d;
        if (Array.isArray(this.c11_d)) {
            data["c11_d"] = [];
            for (let item of this.c11_d)
                data["c11_d"].push(item.toJSON());
        }
        return data;
    }

    clone(): C11_M_ENTITY {
        const json = this.toJSON();
        let result = new C11_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IC11_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    xml_11d?: string | undefined;
    c11_d?: C11_D_ENTITY[] | undefined;
}

export class C12_D_ENTITY implements IC12_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IC12_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.master_code = _data["master_code"];
            this.description = _data["description"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.debitor_account = _data["debitor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.goods_code = _data["goods_code"];
            this.construction_id = _data["construction_id"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): C12_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new C12_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["master_code"] = this.master_code;
        data["description"] = this.description;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["debitor_account"] = this.debitor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["goods_code"] = this.goods_code;
        data["construction_id"] = this.construction_id;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): C12_D_ENTITY {
        const json = this.toJSON();
        let result = new C12_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IC12_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class Accounting_VAT_Input_ENTITY implements IAccounting_VAT_Input_ENTITY {
    id?: number;
    code?: string | undefined;
    type?: number | undefined;
    voucher_date?: moment.Moment | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    series_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    description?: string | undefined;
    quantity?: number | undefined;
    price?: number | undefined;
    total_money?: number | undefined;
    tax_code?: string | undefined;
    tax_rate?: number | undefined;
    tax?: number | undefined;
    tax_account?: string | undefined;
    debitor_account?: string | undefined;
    notes?: string | undefined;
    voucher_code_group?: string | undefined;
    voucher_master_code?: string | undefined;
    goods_code?: string | undefined;
    voucher_detail_code?: string | undefined;
    voucher_code?: string | undefined;
    customer_name?: string | undefined;
    tax_fc?: number | undefined;
    total_money_fc?: number | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IAccounting_VAT_Input_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.invoice_no = _data["invoice_no"];
            this.series_no = _data["series_no"];
            this.customer_code = _data["customer_code"];
            this.address = _data["address"];
            this.description = _data["description"];
            this.quantity = _data["quantity"];
            this.price = _data["price"];
            this.total_money = _data["total_money"];
            this.tax_code = _data["tax_code"];
            this.tax_rate = _data["tax_rate"];
            this.tax = _data["tax"];
            this.tax_account = _data["tax_account"];
            this.debitor_account = _data["debitor_account"];
            this.notes = _data["notes"];
            this.voucher_code_group = _data["voucher_code_group"];
            this.voucher_master_code = _data["voucher_master_code"];
            this.goods_code = _data["goods_code"];
            this.voucher_detail_code = _data["voucher_detail_code"];
            this.voucher_code = _data["voucher_code"];
            this.customer_name = _data["customer_name"];
            this.tax_fc = _data["tax_fc"];
            this.total_money_fc = _data["total_money_fc"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.approve = _data["approve"];
            this.account_id = _data["account_id"];
            this.decentralization = _data["decentralization"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): Accounting_VAT_Input_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Accounting_VAT_Input_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["type"] = this.type;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["invoice_no"] = this.invoice_no;
        data["series_no"] = this.series_no;
        data["customer_code"] = this.customer_code;
        data["address"] = this.address;
        data["description"] = this.description;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["total_money"] = this.total_money;
        data["tax_code"] = this.tax_code;
        data["tax_rate"] = this.tax_rate;
        data["tax"] = this.tax;
        data["tax_account"] = this.tax_account;
        data["debitor_account"] = this.debitor_account;
        data["notes"] = this.notes;
        data["voucher_code_group"] = this.voucher_code_group;
        data["voucher_master_code"] = this.voucher_master_code;
        data["goods_code"] = this.goods_code;
        data["voucher_detail_code"] = this.voucher_detail_code;
        data["voucher_code"] = this.voucher_code;
        data["customer_name"] = this.customer_name;
        data["tax_fc"] = this.tax_fc;
        data["total_money_fc"] = this.total_money_fc;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["approve"] = this.approve;
        data["account_id"] = this.account_id;
        data["decentralization"] = this.decentralization;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): Accounting_VAT_Input_ENTITY {
        const json = this.toJSON();
        let result = new Accounting_VAT_Input_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IAccounting_VAT_Input_ENTITY {
    id?: number;
    code?: string | undefined;
    type?: number | undefined;
    voucher_date?: moment.Moment | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    series_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    description?: string | undefined;
    quantity?: number | undefined;
    price?: number | undefined;
    total_money?: number | undefined;
    tax_code?: string | undefined;
    tax_rate?: number | undefined;
    tax?: number | undefined;
    tax_account?: string | undefined;
    debitor_account?: string | undefined;
    notes?: string | undefined;
    voucher_code_group?: string | undefined;
    voucher_master_code?: string | undefined;
    goods_code?: string | undefined;
    voucher_detail_code?: string | undefined;
    voucher_code?: string | undefined;
    customer_name?: string | undefined;
    tax_fc?: number | undefined;
    total_money_fc?: number | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class C12_M_ENTITY implements IC12_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_account?: string | undefined;
    tax_money?: number | undefined;
    tax_money_fc?: number | undefined;
    total_arise?: number | undefined;
    total_arise_fc?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    xml_12d?: string | undefined;
    xml_vat_in?: string | undefined;
    c12_d?: C12_D_ENTITY[] | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;

    constructor(data?: IC12_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.creditor_account = _data["creditor_account"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.tax_account = _data["tax_account"];
            this.tax_money = _data["tax_money"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.total_arise = _data["total_arise"];
            this.total_arise_fc = _data["total_arise_fc"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.xml_12d = _data["xml_12d"];
            this.xml_vat_in = _data["xml_vat_in"];
            if (Array.isArray(_data["c12_d"])) {
                this.c12_d = [] as any;
                for (let item of _data["c12_d"])
                    this.c12_d.push(C12_D_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["accounting_vat_inputs"])) {
                this.accounting_vat_inputs = [] as any;
                for (let item of _data["accounting_vat_inputs"])
                    this.accounting_vat_inputs.push(Accounting_VAT_Input_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): C12_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new C12_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["creditor_account"] = this.creditor_account;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["tax_account"] = this.tax_account;
        data["tax_money"] = this.tax_money;
        data["tax_money_fc"] = this.tax_money_fc;
        data["total_arise"] = this.total_arise;
        data["total_arise_fc"] = this.total_arise_fc;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["xml_12d"] = this.xml_12d;
        data["xml_vat_in"] = this.xml_vat_in;
        if (Array.isArray(this.c12_d)) {
            data["c12_d"] = [];
            for (let item of this.c12_d)
                data["c12_d"].push(item.toJSON());
        }
        if (Array.isArray(this.accounting_vat_inputs)) {
            data["accounting_vat_inputs"] = [];
            for (let item of this.accounting_vat_inputs)
                data["accounting_vat_inputs"].push(item.toJSON());
        }
        return data;
    }

    clone(): C12_M_ENTITY {
        const json = this.toJSON();
        let result = new C12_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IC12_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_account?: string | undefined;
    tax_money?: number | undefined;
    tax_money_fc?: number | undefined;
    total_arise?: number | undefined;
    total_arise_fc?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    xml_12d?: string | undefined;
    xml_vat_in?: string | undefined;
    c12_d?: C12_D_ENTITY[] | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
}

export class C15_D_ENTITY implements IC15_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IC15_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.master_code = _data["master_code"];
            this.description = _data["description"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.creditor_account = _data["creditor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.goods_code = _data["goods_code"];
            this.construction_id = _data["construction_id"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): C15_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new C15_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["master_code"] = this.master_code;
        data["description"] = this.description;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["creditor_account"] = this.creditor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["goods_code"] = this.goods_code;
        data["construction_id"] = this.construction_id;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): C15_D_ENTITY {
        const json = this.toJSON();
        let result = new C15_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IC15_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class C15_M_ENTITY implements IC15_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    xml_15d?: string | undefined;
    c15_d?: C15_D_ENTITY[] | undefined;

    constructor(data?: IC15_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.debitor_account = _data["debitor_account"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.xml_15d = _data["xml_15d"];
            if (Array.isArray(_data["c15_d"])) {
                this.c15_d = [] as any;
                for (let item of _data["c15_d"])
                    this.c15_d.push(C15_D_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): C15_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new C15_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["debitor_account"] = this.debitor_account;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["xml_15d"] = this.xml_15d;
        if (Array.isArray(this.c15_d)) {
            data["c15_d"] = [];
            for (let item of this.c15_d)
                data["c15_d"].push(item.toJSON());
        }
        return data;
    }

    clone(): C15_M_ENTITY {
        const json = this.toJSON();
        let result = new C15_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IC15_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    xml_15d?: string | undefined;
    c15_d?: C15_D_ENTITY[] | undefined;
}

export class C16_D_ENTITY implements IC16_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IC16_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.master_code = _data["master_code"];
            this.description = _data["description"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.debitor_account = _data["debitor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.goods_code = _data["goods_code"];
            this.construction_id = _data["construction_id"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): C16_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new C16_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["master_code"] = this.master_code;
        data["description"] = this.description;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["debitor_account"] = this.debitor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["goods_code"] = this.goods_code;
        data["construction_id"] = this.construction_id;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): C16_D_ENTITY {
        const json = this.toJSON();
        let result = new C16_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IC16_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    construction_id?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class C16_M_ENTITY implements IC16_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_account?: string | undefined;
    tax_money?: number | undefined;
    tax_money_fc?: number | undefined;
    total_arise?: number | undefined;
    total_arise_fc?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    xml_16d?: string | undefined;
    xml_vat_in?: string | undefined;
    c16_d?: C16_D_ENTITY[] | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;

    constructor(data?: IC16_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.creditor_account = _data["creditor_account"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.tax_account = _data["tax_account"];
            this.tax_money = _data["tax_money"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.total_arise = _data["total_arise"];
            this.total_arise_fc = _data["total_arise_fc"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.xml_16d = _data["xml_16d"];
            this.xml_vat_in = _data["xml_vat_in"];
            if (Array.isArray(_data["c16_d"])) {
                this.c16_d = [] as any;
                for (let item of _data["c16_d"])
                    this.c16_d.push(C16_D_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["accounting_vat_inputs"])) {
                this.accounting_vat_inputs = [] as any;
                for (let item of _data["accounting_vat_inputs"])
                    this.accounting_vat_inputs.push(Accounting_VAT_Input_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): C16_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new C16_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["creditor_account"] = this.creditor_account;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["tax_account"] = this.tax_account;
        data["tax_money"] = this.tax_money;
        data["tax_money_fc"] = this.tax_money_fc;
        data["total_arise"] = this.total_arise;
        data["total_arise_fc"] = this.total_arise_fc;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["xml_16d"] = this.xml_16d;
        data["xml_vat_in"] = this.xml_vat_in;
        if (Array.isArray(this.c16_d)) {
            data["c16_d"] = [];
            for (let item of this.c16_d)
                data["c16_d"].push(item.toJSON());
        }
        if (Array.isArray(this.accounting_vat_inputs)) {
            data["accounting_vat_inputs"] = [];
            for (let item of this.accounting_vat_inputs)
                data["accounting_vat_inputs"].push(item.toJSON());
        }
        return data;
    }

    clone(): C16_M_ENTITY {
        const json = this.toJSON();
        let result = new C16_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IC16_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_account?: string | undefined;
    tax_money?: number | undefined;
    tax_money_fc?: number | undefined;
    total_arise?: number | undefined;
    total_arise_fc?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    xml_16d?: string | undefined;
    xml_vat_in?: string | undefined;
    c16_d?: C16_D_ENTITY[] | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
}

export class CAT_Account_ENTITY implements ICAT_Account_ENTITY {
    id?: number;
    account?: string | undefined;
    master_account?: string | undefined;
    account_name?: string | undefined;
    account_name2?: string | undefined;
    is_debt?: boolean | undefined;
    is_ledger?: boolean | undefined;
    is_remind?: boolean | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ICAT_Account_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.account = _data["account"];
            this.master_account = _data["master_account"];
            this.account_name = _data["account_name"];
            this.account_name2 = _data["account_name2"];
            this.is_debt = _data["is_debt"];
            this.is_ledger = _data["is_ledger"];
            this.is_remind = _data["is_remind"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): CAT_Account_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Account_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["account"] = this.account;
        data["master_account"] = this.master_account;
        data["account_name"] = this.account_name;
        data["account_name2"] = this.account_name2;
        data["is_debt"] = this.is_debt;
        data["is_ledger"] = this.is_ledger;
        data["is_remind"] = this.is_remind;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): CAT_Account_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Account_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Account_ENTITY {
    id?: number;
    account?: string | undefined;
    master_account?: string | undefined;
    account_name?: string | undefined;
    account_name2?: string | undefined;
    is_debt?: boolean | undefined;
    is_ledger?: boolean | undefined;
    is_remind?: boolean | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class CAT_Profession_ENTITY implements ICAT_Profession_ENTITY {
    id?: number;
    code?: string | undefined;
    notes?: string | undefined;
    voucher_code?: string | undefined;
    account1?: string | undefined;
    balance_account1?: string | undefined;
    account2?: string | undefined;
    balance_account2?: string | undefined;
    account3?: string | undefined;
    balance_account3?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ICAT_Profession_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.notes = _data["notes"];
            this.voucher_code = _data["voucher_code"];
            this.account1 = _data["account1"];
            this.balance_account1 = _data["balance_account1"];
            this.account2 = _data["account2"];
            this.balance_account2 = _data["balance_account2"];
            this.account3 = _data["account3"];
            this.balance_account3 = _data["balance_account3"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): CAT_Profession_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Profession_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["notes"] = this.notes;
        data["voucher_code"] = this.voucher_code;
        data["account1"] = this.account1;
        data["balance_account1"] = this.balance_account1;
        data["account2"] = this.account2;
        data["balance_account2"] = this.balance_account2;
        data["account3"] = this.account3;
        data["balance_account3"] = this.balance_account3;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): CAT_Profession_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Profession_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Profession_ENTITY {
    id?: number;
    code?: string | undefined;
    notes?: string | undefined;
    voucher_code?: string | undefined;
    account1?: string | undefined;
    balance_account1?: string | undefined;
    account2?: string | undefined;
    balance_account2?: string | undefined;
    account3?: string | undefined;
    balance_account3?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class CAT_Carry_Forward_ENTITY implements ICAT_Carry_Forward_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    source_account?: string | undefined;
    arrive_account?: string | undefined;
    department_code?: boolean | undefined;
    case_code?: boolean | undefined;
    fee_code?: boolean | undefined;
    description?: string | undefined;
    carry_forward_order?: number | undefined;
    goods_code?: boolean | undefined;
    contruction_code?: boolean | undefined;
    carry_forward_type?: number | undefined;
    carry_forward_type_name?: string | undefined;
    classify?: string | undefined;
    classify_name?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Carry_Forward_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.source_account = _data["source_account"];
            this.arrive_account = _data["arrive_account"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.fee_code = _data["fee_code"];
            this.description = _data["description"];
            this.carry_forward_order = _data["carry_forward_order"];
            this.goods_code = _data["goods_code"];
            this.contruction_code = _data["contruction_code"];
            this.carry_forward_type = _data["carry_forward_type"];
            this.carry_forward_type_name = _data["carry_forward_type_name"];
            this.classify = _data["classify"];
            this.classify_name = _data["classify_name"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Carry_Forward_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Carry_Forward_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["source_account"] = this.source_account;
        data["arrive_account"] = this.arrive_account;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["fee_code"] = this.fee_code;
        data["description"] = this.description;
        data["carry_forward_order"] = this.carry_forward_order;
        data["goods_code"] = this.goods_code;
        data["contruction_code"] = this.contruction_code;
        data["carry_forward_type"] = this.carry_forward_type;
        data["carry_forward_type_name"] = this.carry_forward_type_name;
        data["classify"] = this.classify;
        data["classify_name"] = this.classify_name;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Carry_Forward_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Carry_Forward_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Carry_Forward_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    source_account?: string | undefined;
    arrive_account?: string | undefined;
    department_code?: boolean | undefined;
    case_code?: boolean | undefined;
    fee_code?: boolean | undefined;
    description?: string | undefined;
    carry_forward_order?: number | undefined;
    goods_code?: boolean | undefined;
    contruction_code?: boolean | undefined;
    carry_forward_type?: number | undefined;
    carry_forward_type_name?: string | undefined;
    classify?: string | undefined;
    classify_name?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
}

export class CON_Statement_Of_Cash_Flows_Report_ENTITY implements ICON_Statement_Of_Cash_Flows_Report_ENTITY {
    master_account?: string | undefined;
    account?: string | undefined;
    account_name?: string | undefined;
    initial_debt?: number | undefined;
    initial_credt?: number | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    accumulated_debit?: number | undefined;
    accumulated_credit?: number | undefined;
    ending_debt?: number | undefined;
    ending_credt?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ICON_Statement_Of_Cash_Flows_Report_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.master_account = _data["master_account"];
            this.account = _data["account"];
            this.account_name = _data["account_name"];
            this.initial_debt = _data["initial_debt"];
            this.initial_credt = _data["initial_credt"];
            this.arise_debit = _data["arise_debit"];
            this.arise_credit = _data["arise_credit"];
            this.accumulated_debit = _data["accumulated_debit"];
            this.accumulated_credit = _data["accumulated_credit"];
            this.ending_debt = _data["ending_debt"];
            this.ending_credt = _data["ending_credt"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): CON_Statement_Of_Cash_Flows_Report_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CON_Statement_Of_Cash_Flows_Report_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["master_account"] = this.master_account;
        data["account"] = this.account;
        data["account_name"] = this.account_name;
        data["initial_debt"] = this.initial_debt;
        data["initial_credt"] = this.initial_credt;
        data["arise_debit"] = this.arise_debit;
        data["arise_credit"] = this.arise_credit;
        data["accumulated_debit"] = this.accumulated_debit;
        data["accumulated_credit"] = this.accumulated_credit;
        data["ending_debt"] = this.ending_debt;
        data["ending_credt"] = this.ending_credt;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): CON_Statement_Of_Cash_Flows_Report_ENTITY {
        const json = this.toJSON();
        let result = new CON_Statement_Of_Cash_Flows_Report_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICON_Statement_Of_Cash_Flows_Report_ENTITY {
    master_account?: string | undefined;
    account?: string | undefined;
    account_name?: string | undefined;
    initial_debt?: number | undefined;
    initial_credt?: number | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    accumulated_debit?: number | undefined;
    accumulated_credit?: number | undefined;
    ending_debt?: number | undefined;
    ending_credt?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class CON_Account_Consolidation_By_A_Account_ENTITY implements ICON_Account_Consolidation_By_A_Account_ENTITY {
    debitor_account?: string | undefined;
    account_name?: string | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    account?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ICON_Account_Consolidation_By_A_Account_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.debitor_account = _data["debitor_account"];
            this.account_name = _data["account_name"];
            this.arise_debit = _data["arise_debit"];
            this.arise_credit = _data["arise_credit"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.account = _data["account"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): CON_Account_Consolidation_By_A_Account_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CON_Account_Consolidation_By_A_Account_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["debitor_account"] = this.debitor_account;
        data["account_name"] = this.account_name;
        data["arise_debit"] = this.arise_debit;
        data["arise_credit"] = this.arise_credit;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["account"] = this.account;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): CON_Account_Consolidation_By_A_Account_ENTITY {
        const json = this.toJSON();
        let result = new CON_Account_Consolidation_By_A_Account_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICON_Account_Consolidation_By_A_Account_ENTITY {
    debitor_account?: string | undefined;
    account_name?: string | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    account?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class CON_Account_Book_Detail_ENTITY implements ICON_Account_Book_Detail_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_master_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    notes?: string | undefined;
    account?: string | undefined;
    debitor_account?: string | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    stt?: number;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ICON_Account_Book_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_master_code = _data["voucher_master_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.notes = _data["notes"];
            this.account = _data["account"];
            this.debitor_account = _data["debitor_account"];
            this.arise_debit = _data["arise_debit"];
            this.arise_credit = _data["arise_credit"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.stt = _data["stt"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): CON_Account_Book_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CON_Account_Book_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_master_code"] = this.voucher_master_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["notes"] = this.notes;
        data["account"] = this.account;
        data["debitor_account"] = this.debitor_account;
        data["arise_debit"] = this.arise_debit;
        data["arise_credit"] = this.arise_credit;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["stt"] = this.stt;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): CON_Account_Book_Detail_ENTITY {
        const json = this.toJSON();
        let result = new CON_Account_Book_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICON_Account_Book_Detail_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_master_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    notes?: string | undefined;
    account?: string | undefined;
    debitor_account?: string | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    stt?: number;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class CON_General_Ledger_ENTITY implements ICON_General_Ledger_ENTITY {
    id?: number;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_post?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    notes?: string | undefined;
    account?: string | undefined;
    debitor_account_debit?: string | undefined;
    debitor_account_credit?: string | undefined;
    debit1?: number | undefined;
    debit2?: number | undefined;
    debit3?: number | undefined;
    debit4?: number | undefined;
    debit5?: number | undefined;
    debit6?: number | undefined;
    debit7?: number | undefined;
    debit8?: number | undefined;
    debit9?: number | undefined;
    debit10?: number | undefined;
    debit11?: number | undefined;
    debit12?: number | undefined;
    debit13?: number | undefined;
    debit14?: number | undefined;
    debit15?: number | undefined;
    debit16?: number | undefined;
    debit17?: number | undefined;
    debit18?: number | undefined;
    debit19?: number | undefined;
    debit20?: number | undefined;
    debit21?: number | undefined;
    debit22?: number | undefined;
    debit23?: number | undefined;
    debit24?: number | undefined;
    debit25?: number | undefined;
    debit26?: number | undefined;
    debit27?: number | undefined;
    debit28?: number | undefined;
    debit29?: number | undefined;
    debit30?: number | undefined;
    credit1?: number | undefined;
    credit2?: number | undefined;
    credit3?: number | undefined;
    credit4?: number | undefined;
    credit5?: number | undefined;
    credit6?: number | undefined;
    credit7?: number | undefined;
    credit8?: number | undefined;
    credit9?: number | undefined;
    credit10?: number | undefined;
    credit11?: number | undefined;
    credit12?: number | undefined;
    credit13?: number | undefined;
    credit14?: number | undefined;
    credit15?: number | undefined;
    credit16?: number | undefined;
    credit17?: number | undefined;
    credit18?: number | undefined;
    credit19?: number | undefined;
    credit20?: number | undefined;
    credit21?: number | undefined;
    credit22?: number | undefined;
    credit23?: number | undefined;
    credit24?: number | undefined;
    credit25?: number | undefined;
    credit26?: number | undefined;
    credit27?: number | undefined;
    credit28?: number | undefined;
    credit29?: number | undefined;
    credit30?: number | undefined;
    arise?: number | undefined;
    sum_arise?: number | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ICON_General_Ledger_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_post = _data["voucher_date_post"] ? moment.parseZone(_data["voucher_date_post"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            this.account = _data["account"];
            this.debitor_account_debit = _data["debitor_account_debit"];
            this.debitor_account_credit = _data["debitor_account_credit"];
            this.debit1 = _data["debit1"];
            this.debit2 = _data["debit2"];
            this.debit3 = _data["debit3"];
            this.debit4 = _data["debit4"];
            this.debit5 = _data["debit5"];
            this.debit6 = _data["debit6"];
            this.debit7 = _data["debit7"];
            this.debit8 = _data["debit8"];
            this.debit9 = _data["debit9"];
            this.debit10 = _data["debit10"];
            this.debit11 = _data["debit11"];
            this.debit12 = _data["debit12"];
            this.debit13 = _data["debit13"];
            this.debit14 = _data["debit14"];
            this.debit15 = _data["debit15"];
            this.debit16 = _data["debit16"];
            this.debit17 = _data["debit17"];
            this.debit18 = _data["debit18"];
            this.debit19 = _data["debit19"];
            this.debit20 = _data["debit20"];
            this.debit21 = _data["debit21"];
            this.debit22 = _data["debit22"];
            this.debit23 = _data["debit23"];
            this.debit24 = _data["debit24"];
            this.debit25 = _data["debit25"];
            this.debit26 = _data["debit26"];
            this.debit27 = _data["debit27"];
            this.debit28 = _data["debit28"];
            this.debit29 = _data["debit29"];
            this.debit30 = _data["debit30"];
            this.credit1 = _data["credit1"];
            this.credit2 = _data["credit2"];
            this.credit3 = _data["credit3"];
            this.credit4 = _data["credit4"];
            this.credit5 = _data["credit5"];
            this.credit6 = _data["credit6"];
            this.credit7 = _data["credit7"];
            this.credit8 = _data["credit8"];
            this.credit9 = _data["credit9"];
            this.credit10 = _data["credit10"];
            this.credit11 = _data["credit11"];
            this.credit12 = _data["credit12"];
            this.credit13 = _data["credit13"];
            this.credit14 = _data["credit14"];
            this.credit15 = _data["credit15"];
            this.credit16 = _data["credit16"];
            this.credit17 = _data["credit17"];
            this.credit18 = _data["credit18"];
            this.credit19 = _data["credit19"];
            this.credit20 = _data["credit20"];
            this.credit21 = _data["credit21"];
            this.credit22 = _data["credit22"];
            this.credit23 = _data["credit23"];
            this.credit24 = _data["credit24"];
            this.credit25 = _data["credit25"];
            this.credit26 = _data["credit26"];
            this.credit27 = _data["credit27"];
            this.credit28 = _data["credit28"];
            this.credit29 = _data["credit29"];
            this.credit30 = _data["credit30"];
            this.arise = _data["arise"];
            this.sum_arise = _data["sum_arise"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): CON_General_Ledger_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CON_General_Ledger_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_post"] = this.voucher_date_post ? this.voucher_date_post.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["notes"] = this.notes;
        data["account"] = this.account;
        data["debitor_account_debit"] = this.debitor_account_debit;
        data["debitor_account_credit"] = this.debitor_account_credit;
        data["debit1"] = this.debit1;
        data["debit2"] = this.debit2;
        data["debit3"] = this.debit3;
        data["debit4"] = this.debit4;
        data["debit5"] = this.debit5;
        data["debit6"] = this.debit6;
        data["debit7"] = this.debit7;
        data["debit8"] = this.debit8;
        data["debit9"] = this.debit9;
        data["debit10"] = this.debit10;
        data["debit11"] = this.debit11;
        data["debit12"] = this.debit12;
        data["debit13"] = this.debit13;
        data["debit14"] = this.debit14;
        data["debit15"] = this.debit15;
        data["debit16"] = this.debit16;
        data["debit17"] = this.debit17;
        data["debit18"] = this.debit18;
        data["debit19"] = this.debit19;
        data["debit20"] = this.debit20;
        data["debit21"] = this.debit21;
        data["debit22"] = this.debit22;
        data["debit23"] = this.debit23;
        data["debit24"] = this.debit24;
        data["debit25"] = this.debit25;
        data["debit26"] = this.debit26;
        data["debit27"] = this.debit27;
        data["debit28"] = this.debit28;
        data["debit29"] = this.debit29;
        data["debit30"] = this.debit30;
        data["credit1"] = this.credit1;
        data["credit2"] = this.credit2;
        data["credit3"] = this.credit3;
        data["credit4"] = this.credit4;
        data["credit5"] = this.credit5;
        data["credit6"] = this.credit6;
        data["credit7"] = this.credit7;
        data["credit8"] = this.credit8;
        data["credit9"] = this.credit9;
        data["credit10"] = this.credit10;
        data["credit11"] = this.credit11;
        data["credit12"] = this.credit12;
        data["credit13"] = this.credit13;
        data["credit14"] = this.credit14;
        data["credit15"] = this.credit15;
        data["credit16"] = this.credit16;
        data["credit17"] = this.credit17;
        data["credit18"] = this.credit18;
        data["credit19"] = this.credit19;
        data["credit20"] = this.credit20;
        data["credit21"] = this.credit21;
        data["credit22"] = this.credit22;
        data["credit23"] = this.credit23;
        data["credit24"] = this.credit24;
        data["credit25"] = this.credit25;
        data["credit26"] = this.credit26;
        data["credit27"] = this.credit27;
        data["credit28"] = this.credit28;
        data["credit29"] = this.credit29;
        data["credit30"] = this.credit30;
        data["arise"] = this.arise;
        data["sum_arise"] = this.sum_arise;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): CON_General_Ledger_ENTITY {
        const json = this.toJSON();
        let result = new CON_General_Ledger_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICON_General_Ledger_ENTITY {
    id?: number;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_post?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    notes?: string | undefined;
    account?: string | undefined;
    debitor_account_debit?: string | undefined;
    debitor_account_credit?: string | undefined;
    debit1?: number | undefined;
    debit2?: number | undefined;
    debit3?: number | undefined;
    debit4?: number | undefined;
    debit5?: number | undefined;
    debit6?: number | undefined;
    debit7?: number | undefined;
    debit8?: number | undefined;
    debit9?: number | undefined;
    debit10?: number | undefined;
    debit11?: number | undefined;
    debit12?: number | undefined;
    debit13?: number | undefined;
    debit14?: number | undefined;
    debit15?: number | undefined;
    debit16?: number | undefined;
    debit17?: number | undefined;
    debit18?: number | undefined;
    debit19?: number | undefined;
    debit20?: number | undefined;
    debit21?: number | undefined;
    debit22?: number | undefined;
    debit23?: number | undefined;
    debit24?: number | undefined;
    debit25?: number | undefined;
    debit26?: number | undefined;
    debit27?: number | undefined;
    debit28?: number | undefined;
    debit29?: number | undefined;
    debit30?: number | undefined;
    credit1?: number | undefined;
    credit2?: number | undefined;
    credit3?: number | undefined;
    credit4?: number | undefined;
    credit5?: number | undefined;
    credit6?: number | undefined;
    credit7?: number | undefined;
    credit8?: number | undefined;
    credit9?: number | undefined;
    credit10?: number | undefined;
    credit11?: number | undefined;
    credit12?: number | undefined;
    credit13?: number | undefined;
    credit14?: number | undefined;
    credit15?: number | undefined;
    credit16?: number | undefined;
    credit17?: number | undefined;
    credit18?: number | undefined;
    credit19?: number | undefined;
    credit20?: number | undefined;
    credit21?: number | undefined;
    credit22?: number | undefined;
    credit23?: number | undefined;
    credit24?: number | undefined;
    credit25?: number | undefined;
    credit26?: number | undefined;
    credit27?: number | undefined;
    credit28?: number | undefined;
    credit29?: number | undefined;
    credit30?: number | undefined;
    arise?: number | undefined;
    sum_arise?: number | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class CON_Voucher_Ledger_Book_ENTITY implements ICON_Voucher_Ledger_Book_ENTITY {
    serial_number?: string | undefined;
    notes?: string | undefined;
    account?: string | undefined;
    debitor_account?: number | undefined;
    arise_debit?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ICON_Voucher_Ledger_Book_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serial_number = _data["serial_number"];
            this.notes = _data["notes"];
            this.account = _data["account"];
            this.debitor_account = _data["debitor_account"];
            this.arise_debit = _data["arise_debit"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): CON_Voucher_Ledger_Book_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CON_Voucher_Ledger_Book_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serial_number"] = this.serial_number;
        data["notes"] = this.notes;
        data["account"] = this.account;
        data["debitor_account"] = this.debitor_account;
        data["arise_debit"] = this.arise_debit;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): CON_Voucher_Ledger_Book_ENTITY {
        const json = this.toJSON();
        let result = new CON_Voucher_Ledger_Book_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICON_Voucher_Ledger_Book_ENTITY {
    serial_number?: string | undefined;
    notes?: string | undefined;
    account?: string | undefined;
    debitor_account?: number | undefined;
    arise_debit?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class CON_General_Accounting_Ledger_Book_ENTITY implements ICON_General_Accounting_Ledger_Book_ENTITY {
    voucher_code?: string | undefined;
    post_book_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    account?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ICON_General_Accounting_Ledger_Book_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_code = _data["voucher_code"];
            this.post_book_date = _data["post_book_date"] ? moment.parseZone(_data["post_book_date"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.account = _data["account"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            this.debitor_account = _data["debitor_account"];
            this.arise_debit = _data["arise_debit"];
            this.arise_credit = _data["arise_credit"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): CON_General_Accounting_Ledger_Book_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CON_General_Accounting_Ledger_Book_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_code"] = this.voucher_code;
        data["post_book_date"] = this.post_book_date ? this.post_book_date.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["account"] = this.account;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["notes"] = this.notes;
        data["debitor_account"] = this.debitor_account;
        data["arise_debit"] = this.arise_debit;
        data["arise_credit"] = this.arise_credit;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): CON_General_Accounting_Ledger_Book_ENTITY {
        const json = this.toJSON();
        let result = new CON_General_Accounting_Ledger_Book_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICON_General_Accounting_Ledger_Book_ENTITY {
    voucher_code?: string | undefined;
    post_book_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    account?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class CON_General_Accounting_Ledger_ENTITY implements ICON_General_Accounting_Ledger_ENTITY {
    code?: string | undefined;
    voucher_code?: string | undefined;
    post_book_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    notes?: string | undefined;
    account?: string | undefined;
    debitor_account?: string | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    accumulated_debit?: number | undefined;
    accumulated_credit?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ICON_General_Accounting_Ledger_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.post_book_date = _data["post_book_date"] ? moment.parseZone(_data["post_book_date"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            this.account = _data["account"];
            this.debitor_account = _data["debitor_account"];
            this.arise_debit = _data["arise_debit"];
            this.arise_credit = _data["arise_credit"];
            this.accumulated_debit = _data["accumulated_debit"];
            this.accumulated_credit = _data["accumulated_credit"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): CON_General_Accounting_Ledger_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CON_General_Accounting_Ledger_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["post_book_date"] = this.post_book_date ? this.post_book_date.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["notes"] = this.notes;
        data["account"] = this.account;
        data["debitor_account"] = this.debitor_account;
        data["arise_debit"] = this.arise_debit;
        data["arise_credit"] = this.arise_credit;
        data["accumulated_debit"] = this.accumulated_debit;
        data["accumulated_credit"] = this.accumulated_credit;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): CON_General_Accounting_Ledger_ENTITY {
        const json = this.toJSON();
        let result = new CON_General_Accounting_Ledger_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICON_General_Accounting_Ledger_ENTITY {
    code?: string | undefined;
    voucher_code?: string | undefined;
    post_book_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    notes?: string | undefined;
    account?: string | undefined;
    debitor_account?: string | undefined;
    arise_debit?: number | undefined;
    arise_credit?: number | undefined;
    accumulated_debit?: number | undefined;
    accumulated_credit?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class C51_D_ENTITY implements IC51_D_ENTITY {
    id?: number;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    master_code?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    description?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    goods_symbol?: string | undefined;
    serial_no?: string | undefined;
    construction_id?: string | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    arise?: number | undefined;
    arise_fc?: number | undefined;
    tax_money?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;

    constructor(data?: IC51_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.master_code = _data["master_code"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.description = _data["description"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.goods_symbol = _data["goods_symbol"];
            this.serial_no = _data["serial_no"];
            this.construction_id = _data["construction_id"];
            this.debitor_account = _data["debitor_account"];
            this.creditor_account = _data["creditor_account"];
            this.arise = _data["arise"];
            this.arise_fc = _data["arise_fc"];
            this.tax_money = _data["tax_money"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): C51_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new C51_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["master_code"] = this.master_code;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["description"] = this.description;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["goods_symbol"] = this.goods_symbol;
        data["serial_no"] = this.serial_no;
        data["construction_id"] = this.construction_id;
        data["debitor_account"] = this.debitor_account;
        data["creditor_account"] = this.creditor_account;
        data["arise"] = this.arise;
        data["arise_fc"] = this.arise_fc;
        data["tax_money"] = this.tax_money;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): C51_D_ENTITY {
        const json = this.toJSON();
        let result = new C51_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IC51_D_ENTITY {
    id?: number;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    master_code?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    description?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    goods_symbol?: string | undefined;
    serial_no?: string | undefined;
    construction_id?: string | undefined;
    debitor_account?: string | undefined;
    creditor_account?: string | undefined;
    arise?: number | undefined;
    arise_fc?: number | undefined;
    tax_money?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
}

export class C51_M_ENTITY implements IC51_M_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    tax_account?: string | undefined;
    total_tax_money?: number | undefined;
    total_amount_with_tax?: number | undefined;
    profession_code?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    ref_value?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    xml_51d?: string | undefined;
    xml_vat_in?: string | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    is_tax?: boolean | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
    c51_D?: C51_D_ENTITY[] | undefined;

    constructor(data?: IC51_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.tax_account = _data["tax_account"];
            this.total_tax_money = _data["total_tax_money"];
            this.total_amount_with_tax = _data["total_amount_with_tax"];
            this.profession_code = _data["profession_code"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.ref_value = _data["ref_value"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.xml_51d = _data["xml_51d"];
            this.xml_vat_in = _data["xml_vat_in"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            this.is_tax = _data["is_tax"];
            if (Array.isArray(_data["accounting_vat_inputs"])) {
                this.accounting_vat_inputs = [] as any;
                for (let item of _data["accounting_vat_inputs"])
                    this.accounting_vat_inputs.push(Accounting_VAT_Input_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["c51_D"])) {
                this.c51_D = [] as any;
                for (let item of _data["c51_D"])
                    this.c51_D.push(C51_D_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): C51_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new C51_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["tax_account"] = this.tax_account;
        data["total_tax_money"] = this.total_tax_money;
        data["total_amount_with_tax"] = this.total_amount_with_tax;
        data["profession_code"] = this.profession_code;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["ref_value"] = this.ref_value;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["xml_51d"] = this.xml_51d;
        data["xml_vat_in"] = this.xml_vat_in;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        data["is_tax"] = this.is_tax;
        if (Array.isArray(this.accounting_vat_inputs)) {
            data["accounting_vat_inputs"] = [];
            for (let item of this.accounting_vat_inputs)
                data["accounting_vat_inputs"].push(item.toJSON());
        }
        if (Array.isArray(this.c51_D)) {
            data["c51_D"] = [];
            for (let item of this.c51_D)
                data["c51_D"].push(item.toJSON());
        }
        return data;
    }

    clone(): C51_M_ENTITY {
        const json = this.toJSON();
        let result = new C51_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IC51_M_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    tax_account?: string | undefined;
    total_tax_money?: number | undefined;
    total_amount_with_tax?: number | undefined;
    profession_code?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    ref_value?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    xml_51d?: string | undefined;
    xml_vat_in?: string | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    is_tax?: boolean | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
    c51_D?: C51_D_ENTITY[] | undefined;
}

export class Carry_Forward_Execute_ENTITY implements ICarry_Forward_Execute_ENTITY {
    num_row?: number | undefined;
    id?: number;
    month_start?: number | undefined;
    month_end?: number | undefined;
    code?: string | undefined;
    voucher_code?: string | undefined;
    source_account?: string | undefined;
    arrive_account?: string | undefined;
    department_code?: boolean | undefined;
    case_code?: boolean | undefined;
    fee_code?: boolean | undefined;
    description?: string | undefined;
    carry_forward_order?: number | undefined;
    goods_code?: boolean | undefined;
    contruction_code?: boolean | undefined;
    carry_forward_type?: number | undefined;
    classify?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    arise?: number | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICarry_Forward_Execute_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.num_row = _data["num_row"];
            this.id = _data["id"];
            this.month_start = _data["month_start"];
            this.month_end = _data["month_end"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.source_account = _data["source_account"];
            this.arrive_account = _data["arrive_account"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.fee_code = _data["fee_code"];
            this.description = _data["description"];
            this.carry_forward_order = _data["carry_forward_order"];
            this.goods_code = _data["goods_code"];
            this.contruction_code = _data["contruction_code"];
            this.carry_forward_type = _data["carry_forward_type"];
            this.classify = _data["classify"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.arise = _data["arise"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): Carry_Forward_Execute_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Carry_Forward_Execute_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["num_row"] = this.num_row;
        data["id"] = this.id;
        data["month_start"] = this.month_start;
        data["month_end"] = this.month_end;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["source_account"] = this.source_account;
        data["arrive_account"] = this.arrive_account;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["fee_code"] = this.fee_code;
        data["description"] = this.description;
        data["carry_forward_order"] = this.carry_forward_order;
        data["goods_code"] = this.goods_code;
        data["contruction_code"] = this.contruction_code;
        data["carry_forward_type"] = this.carry_forward_type;
        data["classify"] = this.classify;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["arise"] = this.arise;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): Carry_Forward_Execute_ENTITY {
        const json = this.toJSON();
        let result = new Carry_Forward_Execute_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICarry_Forward_Execute_ENTITY {
    num_row?: number | undefined;
    id?: number;
    month_start?: number | undefined;
    month_end?: number | undefined;
    code?: string | undefined;
    voucher_code?: string | undefined;
    source_account?: string | undefined;
    arrive_account?: string | undefined;
    department_code?: boolean | undefined;
    case_code?: boolean | undefined;
    fee_code?: boolean | undefined;
    description?: string | undefined;
    carry_forward_order?: number | undefined;
    goods_code?: boolean | undefined;
    contruction_code?: boolean | undefined;
    carry_forward_type?: number | undefined;
    classify?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    arise?: number | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
}

export class Department_Position_ENTITY implements IDepartment_Position_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    name_f?: string | undefined;
    notes?: string | undefined;
    description?: string | undefined;
    level?: number | undefined;
    allow_approve_worktime?: boolean | undefined;
    department_code?: string | undefined;
    type?: string | undefined;

    constructor(data?: IDepartment_Position_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.name_f = _data["name_f"];
            this.notes = _data["notes"];
            this.description = _data["description"];
            this.level = _data["level"];
            this.allow_approve_worktime = _data["allow_approve_worktime"];
            this.department_code = _data["department_code"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Department_Position_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Department_Position_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["name_f"] = this.name_f;
        data["notes"] = this.notes;
        data["description"] = this.description;
        data["level"] = this.level;
        data["allow_approve_worktime"] = this.allow_approve_worktime;
        data["department_code"] = this.department_code;
        data["type"] = this.type;
        return data;
    }

    clone(): Department_Position_ENTITY {
        const json = this.toJSON();
        let result = new Department_Position_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IDepartment_Position_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    name_f?: string | undefined;
    notes?: string | undefined;
    description?: string | undefined;
    level?: number | undefined;
    allow_approve_worktime?: boolean | undefined;
    department_code?: string | undefined;
    type?: string | undefined;
}

export class Department_Title_ENTITY implements IDepartment_Title_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IDepartment_Title_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Department_Title_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Department_Title_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): Department_Title_ENTITY {
        const json = this.toJSON();
        let result = new Department_Title_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IDepartment_Title_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
}

export class Department_ENTITY implements IDepartment_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    notes?: string | undefined;
    type?: string | undefined;
    allow_approve_worktime?: string | undefined;
    allow_approve_worktime_name?: string | undefined;
    authorize_approve_worktime?: string | undefined;
    xml?: string | undefined;
    department_Positions?: Department_Position_ENTITY[] | undefined;
    department_Titles?: Department_Title_ENTITY[] | undefined;

    constructor(data?: IDepartment_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.notes = _data["notes"];
            this.type = _data["type"];
            this.allow_approve_worktime = _data["allow_approve_worktime"];
            this.allow_approve_worktime_name = _data["allow_approve_worktime_name"];
            this.authorize_approve_worktime = _data["authorize_approve_worktime"];
            this.xml = _data["xml"];
            if (Array.isArray(_data["department_Positions"])) {
                this.department_Positions = [] as any;
                for (let item of _data["department_Positions"])
                    this.department_Positions.push(Department_Position_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["department_Titles"])) {
                this.department_Titles = [] as any;
                for (let item of _data["department_Titles"])
                    this.department_Titles.push(Department_Title_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Department_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Department_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["notes"] = this.notes;
        data["type"] = this.type;
        data["allow_approve_worktime"] = this.allow_approve_worktime;
        data["allow_approve_worktime_name"] = this.allow_approve_worktime_name;
        data["authorize_approve_worktime"] = this.authorize_approve_worktime;
        data["xml"] = this.xml;
        if (Array.isArray(this.department_Positions)) {
            data["department_Positions"] = [];
            for (let item of this.department_Positions)
                data["department_Positions"].push(item.toJSON());
        }
        if (Array.isArray(this.department_Titles)) {
            data["department_Titles"] = [];
            for (let item of this.department_Titles)
                data["department_Titles"].push(item.toJSON());
        }
        return data;
    }

    clone(): Department_ENTITY {
        const json = this.toJSON();
        let result = new Department_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IDepartment_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    notes?: string | undefined;
    type?: string | undefined;
    allow_approve_worktime?: string | undefined;
    allow_approve_worktime_name?: string | undefined;
    authorize_approve_worktime?: string | undefined;
    xml?: string | undefined;
    department_Positions?: Department_Position_ENTITY[] | undefined;
    department_Titles?: Department_Title_ENTITY[] | undefined;
}

export class Employee_Positions_ENTITY implements IEmployee_Positions_ENTITY {
    id?: number;
    name?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IEmployee_Positions_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): Employee_Positions_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Employee_Positions_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["notes"] = this.notes;
        return data;
    }

    clone(): Employee_Positions_ENTITY {
        const json = this.toJSON();
        let result = new Employee_Positions_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IEmployee_Positions_ENTITY {
    id?: number;
    name?: string | undefined;
    notes?: string | undefined;
}

export class AllDayModel implements IAllDayModel {
    code_work_shift_detail?: string | undefined;
    name_en?: string | undefined;
    name_vn?: string | undefined;
    day?: number | undefined;
    date?: moment.Moment | undefined;
    employee_code?: string | undefined;
    value?: boolean | undefined;
    overtime_code?: string | undefined;
    attendance_code?: string | undefined;
    soon_late_request_code?: string | undefined;
    mission_allowance_code?: string | undefined;

    constructor(data?: IAllDayModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code_work_shift_detail = _data["code_work_shift_detail"];
            this.name_en = _data["name_en"];
            this.name_vn = _data["name_vn"];
            this.day = _data["day"];
            this.date = _data["date"] ? moment.parseZone(_data["date"].toString()) : <any>undefined;
            this.employee_code = _data["employee_code"];
            this.value = _data["value"];
            this.overtime_code = _data["overtime_code"];
            this.attendance_code = _data["attendance_code"];
            this.soon_late_request_code = _data["soon_late_request_code"];
            this.mission_allowance_code = _data["mission_allowance_code"];
        }
    }

    static fromJS(data: any): AllDayModel {
        data = typeof data === 'object' ? data : {};
        let result = new AllDayModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code_work_shift_detail"] = this.code_work_shift_detail;
        data["name_en"] = this.name_en;
        data["name_vn"] = this.name_vn;
        data["day"] = this.day;
        data["date"] = this.date ? this.date.toISOString(true) : <any>undefined;
        data["employee_code"] = this.employee_code;
        data["value"] = this.value;
        data["overtime_code"] = this.overtime_code;
        data["attendance_code"] = this.attendance_code;
        data["soon_late_request_code"] = this.soon_late_request_code;
        data["mission_allowance_code"] = this.mission_allowance_code;
        return data;
    }

    clone(): AllDayModel {
        const json = this.toJSON();
        let result = new AllDayModel();
        result.init(json);
        return result;
    }
}

export interface IAllDayModel {
    code_work_shift_detail?: string | undefined;
    name_en?: string | undefined;
    name_vn?: string | undefined;
    day?: number | undefined;
    date?: moment.Moment | undefined;
    employee_code?: string | undefined;
    value?: boolean | undefined;
    overtime_code?: string | undefined;
    attendance_code?: string | undefined;
    soon_late_request_code?: string | undefined;
    mission_allowance_code?: string | undefined;
}

export class HRM_TimeSheet_Work_Shift_Detail_ENTITY implements IHRM_TimeSheet_Work_Shift_Detail_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    work_shift_code?: string | undefined;
    start_time?: moment.Moment | undefined;
    end_time?: moment.Moment | undefined;
    total_time?: number | undefined;
    name?: string | undefined;
    relax?: number | undefined;
    hour_start_relax?: number | undefined;
    hour_end_relax?: number | undefined;
    start_relax?: moment.Moment | undefined;
    end_relax?: moment.Moment | undefined;
    is_apply?: boolean | undefined;
    is_checkin_relax?: boolean | undefined;
    apply_name?: string | undefined;

    constructor(data?: IHRM_TimeSheet_Work_Shift_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.work_shift_code = _data["work_shift_code"];
            this.start_time = _data["start_time"] ? moment.parseZone(_data["start_time"].toString()) : <any>undefined;
            this.end_time = _data["end_time"] ? moment.parseZone(_data["end_time"].toString()) : <any>undefined;
            this.total_time = _data["total_time"];
            this.name = _data["name"];
            this.relax = _data["relax"];
            this.hour_start_relax = _data["hour_start_relax"];
            this.hour_end_relax = _data["hour_end_relax"];
            this.start_relax = _data["start_relax"] ? moment.parseZone(_data["start_relax"].toString()) : <any>undefined;
            this.end_relax = _data["end_relax"] ? moment.parseZone(_data["end_relax"].toString()) : <any>undefined;
            this.is_apply = _data["is_apply"];
            this.is_checkin_relax = _data["is_checkin_relax"];
            this.apply_name = _data["apply_name"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Work_Shift_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Work_Shift_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["work_shift_code"] = this.work_shift_code;
        data["start_time"] = this.start_time ? this.start_time.toISOString(true) : <any>undefined;
        data["end_time"] = this.end_time ? this.end_time.toISOString(true) : <any>undefined;
        data["total_time"] = this.total_time;
        data["name"] = this.name;
        data["relax"] = this.relax;
        data["hour_start_relax"] = this.hour_start_relax;
        data["hour_end_relax"] = this.hour_end_relax;
        data["start_relax"] = this.start_relax ? this.start_relax.toISOString(true) : <any>undefined;
        data["end_relax"] = this.end_relax ? this.end_relax.toISOString(true) : <any>undefined;
        data["is_apply"] = this.is_apply;
        data["is_checkin_relax"] = this.is_checkin_relax;
        data["apply_name"] = this.apply_name;
        return data;
    }

    clone(): HRM_TimeSheet_Work_Shift_Detail_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Work_Shift_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Work_Shift_Detail_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    work_shift_code?: string | undefined;
    start_time?: moment.Moment | undefined;
    end_time?: moment.Moment | undefined;
    total_time?: number | undefined;
    name?: string | undefined;
    relax?: number | undefined;
    hour_start_relax?: number | undefined;
    hour_end_relax?: number | undefined;
    start_relax?: moment.Moment | undefined;
    end_relax?: moment.Moment | undefined;
    is_apply?: boolean | undefined;
    is_checkin_relax?: boolean | undefined;
    apply_name?: string | undefined;
}

export class HRM_TimeSheet_Work_Shift_ENTITY implements IHRM_TimeSheet_Work_Shift_ENTITY {
    id?: number;
    code?: string | undefined;
    day_in_week?: string | undefined;
    start_time?: moment.Moment | undefined;
    start_time_f?: string | undefined;
    end_time?: moment.Moment | undefined;
    end_time_f?: string | undefined;
    start_relax?: moment.Moment | undefined;
    start_relax_f?: string | undefined;
    end_relax?: moment.Moment | undefined;
    end_relax_f?: string | undefined;
    total_time?: number | undefined;
    relax?: number | undefined;
    type?: string | undefined;
    name?: string | undefined;
    monday?: boolean | undefined;
    tuesday?: boolean | undefined;
    wednesday?: boolean | undefined;
    thursday?: boolean | undefined;
    friday?: boolean | undefined;
    saturday?: boolean | undefined;
    sunday?: boolean | undefined;
    employee_code?: string | undefined;
    xml?: string | undefined;
    allDay?: AllDayModel[] | undefined;
    hRM_TimeSheet_Work_Shift_Details?: HRM_TimeSheet_Work_Shift_Detail_ENTITY[] | undefined;

    constructor(data?: IHRM_TimeSheet_Work_Shift_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.day_in_week = _data["day_in_week"];
            this.start_time = _data["start_time"] ? moment.parseZone(_data["start_time"].toString()) : <any>undefined;
            this.start_time_f = _data["start_time_f"];
            this.end_time = _data["end_time"] ? moment.parseZone(_data["end_time"].toString()) : <any>undefined;
            this.end_time_f = _data["end_time_f"];
            this.start_relax = _data["start_relax"] ? moment.parseZone(_data["start_relax"].toString()) : <any>undefined;
            this.start_relax_f = _data["start_relax_f"];
            this.end_relax = _data["end_relax"] ? moment.parseZone(_data["end_relax"].toString()) : <any>undefined;
            this.end_relax_f = _data["end_relax_f"];
            this.total_time = _data["total_time"];
            this.relax = _data["relax"];
            this.type = _data["type"];
            this.name = _data["name"];
            this.monday = _data["monday"];
            this.tuesday = _data["tuesday"];
            this.wednesday = _data["wednesday"];
            this.thursday = _data["thursday"];
            this.friday = _data["friday"];
            this.saturday = _data["saturday"];
            this.sunday = _data["sunday"];
            this.employee_code = _data["employee_code"];
            this.xml = _data["xml"];
            if (Array.isArray(_data["allDay"])) {
                this.allDay = [] as any;
                for (let item of _data["allDay"])
                    this.allDay.push(AllDayModel.fromJS(item));
            }
            if (Array.isArray(_data["hRM_TimeSheet_Work_Shift_Details"])) {
                this.hRM_TimeSheet_Work_Shift_Details = [] as any;
                for (let item of _data["hRM_TimeSheet_Work_Shift_Details"])
                    this.hRM_TimeSheet_Work_Shift_Details.push(HRM_TimeSheet_Work_Shift_Detail_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Work_Shift_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Work_Shift_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["day_in_week"] = this.day_in_week;
        data["start_time"] = this.start_time ? this.start_time.toISOString(true) : <any>undefined;
        data["start_time_f"] = this.start_time_f;
        data["end_time"] = this.end_time ? this.end_time.toISOString(true) : <any>undefined;
        data["end_time_f"] = this.end_time_f;
        data["start_relax"] = this.start_relax ? this.start_relax.toISOString(true) : <any>undefined;
        data["start_relax_f"] = this.start_relax_f;
        data["end_relax"] = this.end_relax ? this.end_relax.toISOString(true) : <any>undefined;
        data["end_relax_f"] = this.end_relax_f;
        data["total_time"] = this.total_time;
        data["relax"] = this.relax;
        data["type"] = this.type;
        data["name"] = this.name;
        data["monday"] = this.monday;
        data["tuesday"] = this.tuesday;
        data["wednesday"] = this.wednesday;
        data["thursday"] = this.thursday;
        data["friday"] = this.friday;
        data["saturday"] = this.saturday;
        data["sunday"] = this.sunday;
        data["employee_code"] = this.employee_code;
        data["xml"] = this.xml;
        if (Array.isArray(this.allDay)) {
            data["allDay"] = [];
            for (let item of this.allDay)
                data["allDay"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_TimeSheet_Work_Shift_Details)) {
            data["hRM_TimeSheet_Work_Shift_Details"] = [];
            for (let item of this.hRM_TimeSheet_Work_Shift_Details)
                data["hRM_TimeSheet_Work_Shift_Details"].push(item.toJSON());
        }
        return data;
    }

    clone(): HRM_TimeSheet_Work_Shift_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Work_Shift_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Work_Shift_ENTITY {
    id?: number;
    code?: string | undefined;
    day_in_week?: string | undefined;
    start_time?: moment.Moment | undefined;
    start_time_f?: string | undefined;
    end_time?: moment.Moment | undefined;
    end_time_f?: string | undefined;
    start_relax?: moment.Moment | undefined;
    start_relax_f?: string | undefined;
    end_relax?: moment.Moment | undefined;
    end_relax_f?: string | undefined;
    total_time?: number | undefined;
    relax?: number | undefined;
    type?: string | undefined;
    name?: string | undefined;
    monday?: boolean | undefined;
    tuesday?: boolean | undefined;
    wednesday?: boolean | undefined;
    thursday?: boolean | undefined;
    friday?: boolean | undefined;
    saturday?: boolean | undefined;
    sunday?: boolean | undefined;
    employee_code?: string | undefined;
    xml?: string | undefined;
    allDay?: AllDayModel[] | undefined;
    hRM_TimeSheet_Work_Shift_Details?: HRM_TimeSheet_Work_Shift_Detail_ENTITY[] | undefined;
}

export class HRM_Employee_Academic_Level_ENTITY implements IHRM_Employee_Academic_Level_ENTITY {
    id?: number;
    code?: string | undefined;
    degree?: string | undefined;
    schoools?: string | undefined;
    speciality?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;

    constructor(data?: IHRM_Employee_Academic_Level_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.degree = _data["degree"];
            this.schoools = _data["schoools"];
            this.speciality = _data["speciality"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
        }
    }

    static fromJS(data: any): HRM_Employee_Academic_Level_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Academic_Level_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["degree"] = this.degree;
        data["schoools"] = this.schoools;
        data["speciality"] = this.speciality;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        return data;
    }

    clone(): HRM_Employee_Academic_Level_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Academic_Level_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Academic_Level_ENTITY {
    id?: number;
    code?: string | undefined;
    degree?: string | undefined;
    schoools?: string | undefined;
    speciality?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
}

export class HRM_Employee_Certificate_ENTITY implements IHRM_Employee_Certificate_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    employee_code?: string | undefined;

    constructor(data?: IHRM_Employee_Certificate_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.employee_code = _data["employee_code"];
        }
    }

    static fromJS(data: any): HRM_Employee_Certificate_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Certificate_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["employee_code"] = this.employee_code;
        return data;
    }

    clone(): HRM_Employee_Certificate_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Certificate_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Certificate_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    employee_code?: string | undefined;
}

export class HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY implements IHRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY {
    id?: number | undefined;
    stt?: number | undefined;
    code?: string | undefined;
    group?: number | undefined;
    list_appendix_target_code?: string | undefined;
    appendix_target_code?: string | undefined;
    appendix_target_name?: string | undefined;
    sales?: number | undefined;
    sales_f?: string | undefined;
    notes?: string | undefined;
    type?: string | undefined;
    sales_date?: moment.Moment | undefined;
    sales_date_from?: moment.Moment | undefined;
    sales_date_to?: moment.Moment | undefined;
    sales_date_f?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    contact_code?: string | undefined;
    contact_name?: string | undefined;
    contact_phone?: string | undefined;
    machine_code?: string | undefined;
    machine_serial?: string | undefined;
    machine_name?: string | undefined;
    machine_type?: string | undefined;
    machine_type_name?: string | undefined;
    machine_value?: number | undefined;
    machine_value_f?: string | undefined;
    asia?: number | undefined;
    machine_sale?: number | undefined;
    machine_buy?: number | undefined;
    profit?: number | undefined;
    is_approve?: boolean | undefined;
    is_approve_f?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    name_target?: string | undefined;
    month?: number | undefined;
    year?: number | undefined;

    constructor(data?: IHRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.stt = _data["stt"];
            this.code = _data["code"];
            this.group = _data["group"];
            this.list_appendix_target_code = _data["list_appendix_target_code"];
            this.appendix_target_code = _data["appendix_target_code"];
            this.appendix_target_name = _data["appendix_target_name"];
            this.sales = _data["sales"];
            this.sales_f = _data["sales_f"];
            this.notes = _data["notes"];
            this.type = _data["type"];
            this.sales_date = _data["sales_date"] ? moment.parseZone(_data["sales_date"].toString()) : <any>undefined;
            this.sales_date_from = _data["sales_date_from"] ? moment.parseZone(_data["sales_date_from"].toString()) : <any>undefined;
            this.sales_date_to = _data["sales_date_to"] ? moment.parseZone(_data["sales_date_to"].toString()) : <any>undefined;
            this.sales_date_f = _data["sales_date_f"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.contact_code = _data["contact_code"];
            this.contact_name = _data["contact_name"];
            this.contact_phone = _data["contact_phone"];
            this.machine_code = _data["machine_code"];
            this.machine_serial = _data["machine_serial"];
            this.machine_name = _data["machine_name"];
            this.machine_type = _data["machine_type"];
            this.machine_type_name = _data["machine_type_name"];
            this.machine_value = _data["machine_value"];
            this.machine_value_f = _data["machine_value_f"];
            this.asia = _data["asia"];
            this.machine_sale = _data["machine_sale"];
            this.machine_buy = _data["machine_buy"];
            this.profit = _data["profit"];
            this.is_approve = _data["is_approve"];
            this.is_approve_f = _data["is_approve_f"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.name_target = _data["name_target"];
            this.month = _data["month"];
            this.year = _data["year"];
        }
    }

    static fromJS(data: any): HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["stt"] = this.stt;
        data["code"] = this.code;
        data["group"] = this.group;
        data["list_appendix_target_code"] = this.list_appendix_target_code;
        data["appendix_target_code"] = this.appendix_target_code;
        data["appendix_target_name"] = this.appendix_target_name;
        data["sales"] = this.sales;
        data["sales_f"] = this.sales_f;
        data["notes"] = this.notes;
        data["type"] = this.type;
        data["sales_date"] = this.sales_date ? this.sales_date.toISOString(true) : <any>undefined;
        data["sales_date_from"] = this.sales_date_from ? this.sales_date_from.toISOString(true) : <any>undefined;
        data["sales_date_to"] = this.sales_date_to ? this.sales_date_to.toISOString(true) : <any>undefined;
        data["sales_date_f"] = this.sales_date_f;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["contact_code"] = this.contact_code;
        data["contact_name"] = this.contact_name;
        data["contact_phone"] = this.contact_phone;
        data["machine_code"] = this.machine_code;
        data["machine_serial"] = this.machine_serial;
        data["machine_name"] = this.machine_name;
        data["machine_type"] = this.machine_type;
        data["machine_type_name"] = this.machine_type_name;
        data["machine_value"] = this.machine_value;
        data["machine_value_f"] = this.machine_value_f;
        data["asia"] = this.asia;
        data["machine_sale"] = this.machine_sale;
        data["machine_buy"] = this.machine_buy;
        data["profit"] = this.profit;
        data["is_approve"] = this.is_approve;
        data["is_approve_f"] = this.is_approve_f;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["name_target"] = this.name_target;
        data["month"] = this.month;
        data["year"] = this.year;
        return data;
    }

    clone(): HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY {
    id?: number | undefined;
    stt?: number | undefined;
    code?: string | undefined;
    group?: number | undefined;
    list_appendix_target_code?: string | undefined;
    appendix_target_code?: string | undefined;
    appendix_target_name?: string | undefined;
    sales?: number | undefined;
    sales_f?: string | undefined;
    notes?: string | undefined;
    type?: string | undefined;
    sales_date?: moment.Moment | undefined;
    sales_date_from?: moment.Moment | undefined;
    sales_date_to?: moment.Moment | undefined;
    sales_date_f?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    contact_code?: string | undefined;
    contact_name?: string | undefined;
    contact_phone?: string | undefined;
    machine_code?: string | undefined;
    machine_serial?: string | undefined;
    machine_name?: string | undefined;
    machine_type?: string | undefined;
    machine_type_name?: string | undefined;
    machine_value?: number | undefined;
    machine_value_f?: string | undefined;
    asia?: number | undefined;
    machine_sale?: number | undefined;
    machine_buy?: number | undefined;
    profit?: number | undefined;
    is_approve?: boolean | undefined;
    is_approve_f?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    name_target?: string | undefined;
    month?: number | undefined;
    year?: number | undefined;
}

export class HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY implements IHRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY {
    id?: number;
    code?: string | undefined;
    target_code?: string | undefined;
    target_min?: number | undefined;
    target_max?: number | undefined;
    target_money?: number | undefined;
    percent_for_orther?: number | undefined;
    list_department_code?: string | undefined;
    list_not_allow_employee_code?: string | undefined;
    list_employee_code?: string | undefined;
    contract_code?: string | undefined;

    constructor(data?: IHRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.target_code = _data["target_code"];
            this.target_min = _data["target_min"];
            this.target_max = _data["target_max"];
            this.target_money = _data["target_money"];
            this.percent_for_orther = _data["percent_for_orther"];
            this.list_department_code = _data["list_department_code"];
            this.list_not_allow_employee_code = _data["list_not_allow_employee_code"];
            this.list_employee_code = _data["list_employee_code"];
            this.contract_code = _data["contract_code"];
        }
    }

    static fromJS(data: any): HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["target_code"] = this.target_code;
        data["target_min"] = this.target_min;
        data["target_max"] = this.target_max;
        data["target_money"] = this.target_money;
        data["percent_for_orther"] = this.percent_for_orther;
        data["list_department_code"] = this.list_department_code;
        data["list_not_allow_employee_code"] = this.list_not_allow_employee_code;
        data["list_employee_code"] = this.list_employee_code;
        data["contract_code"] = this.contract_code;
        return data;
    }

    clone(): HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY {
    id?: number;
    code?: string | undefined;
    target_code?: string | undefined;
    target_min?: number | undefined;
    target_max?: number | undefined;
    target_money?: number | undefined;
    percent_for_orther?: number | undefined;
    list_department_code?: string | undefined;
    list_not_allow_employee_code?: string | undefined;
    list_employee_code?: string | undefined;
    contract_code?: string | undefined;
}

export class HRM_Employee_Labour_Contract_Appendix_ENTITY implements IHRM_Employee_Labour_Contract_Appendix_ENTITY {
    id?: number;
    code?: string | undefined;
    contract_code?: string | undefined;
    name?: string | undefined;
    name_f?: string | undefined;
    salary_name?: string | undefined;
    salary?: number | undefined;
    unit?: string | undefined;
    taget?: number | undefined;
    taget_default?: number | undefined;
    taget_default_f?: string | undefined;
    taget_unit?: string | undefined;
    type?: string | undefined;
    action?: string | undefined;
    employee_code?: string | undefined;
    salesed?: number | undefined;
    sales?: number | undefined;
    sales_f?: string | undefined;
    ratio?: number | undefined;
    ratio_f?: string | undefined;
    year?: number | undefined;
    month?: number | undefined;
    is_close?: boolean | undefined;
    appendix_type?: string | undefined;
    html_close?: string | undefined;
    xml_appendex_detail?: string | undefined;
    hRM_Employee_Labour_Contract_Appendix_Target_Details?: HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY[] | undefined;
    hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels?: HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY[] | undefined;

    constructor(data?: IHRM_Employee_Labour_Contract_Appendix_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.contract_code = _data["contract_code"];
            this.name = _data["name"];
            this.name_f = _data["name_f"];
            this.salary_name = _data["salary_name"];
            this.salary = _data["salary"];
            this.unit = _data["unit"];
            this.taget = _data["taget"];
            this.taget_default = _data["taget_default"];
            this.taget_default_f = _data["taget_default_f"];
            this.taget_unit = _data["taget_unit"];
            this.type = _data["type"];
            this.action = _data["action"];
            this.employee_code = _data["employee_code"];
            this.salesed = _data["salesed"];
            this.sales = _data["sales"];
            this.sales_f = _data["sales_f"];
            this.ratio = _data["ratio"];
            this.ratio_f = _data["ratio_f"];
            this.year = _data["year"];
            this.month = _data["month"];
            this.is_close = _data["is_close"];
            this.appendix_type = _data["appendix_type"];
            this.html_close = _data["html_close"];
            this.xml_appendex_detail = _data["xml_appendex_detail"];
            if (Array.isArray(_data["hRM_Employee_Labour_Contract_Appendix_Target_Details"])) {
                this.hRM_Employee_Labour_Contract_Appendix_Target_Details = [] as any;
                for (let item of _data["hRM_Employee_Labour_Contract_Appendix_Target_Details"])
                    this.hRM_Employee_Labour_Contract_Appendix_Target_Details.push(HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels"])) {
                this.hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels = [] as any;
                for (let item of _data["hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels"])
                    this.hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels.push(HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HRM_Employee_Labour_Contract_Appendix_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Labour_Contract_Appendix_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["contract_code"] = this.contract_code;
        data["name"] = this.name;
        data["name_f"] = this.name_f;
        data["salary_name"] = this.salary_name;
        data["salary"] = this.salary;
        data["unit"] = this.unit;
        data["taget"] = this.taget;
        data["taget_default"] = this.taget_default;
        data["taget_default_f"] = this.taget_default_f;
        data["taget_unit"] = this.taget_unit;
        data["type"] = this.type;
        data["action"] = this.action;
        data["employee_code"] = this.employee_code;
        data["salesed"] = this.salesed;
        data["sales"] = this.sales;
        data["sales_f"] = this.sales_f;
        data["ratio"] = this.ratio;
        data["ratio_f"] = this.ratio_f;
        data["year"] = this.year;
        data["month"] = this.month;
        data["is_close"] = this.is_close;
        data["appendix_type"] = this.appendix_type;
        data["html_close"] = this.html_close;
        data["xml_appendex_detail"] = this.xml_appendex_detail;
        if (Array.isArray(this.hRM_Employee_Labour_Contract_Appendix_Target_Details)) {
            data["hRM_Employee_Labour_Contract_Appendix_Target_Details"] = [];
            for (let item of this.hRM_Employee_Labour_Contract_Appendix_Target_Details)
                data["hRM_Employee_Labour_Contract_Appendix_Target_Details"].push(item.toJSON());
        }
        if (Array.isArray(this.hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels)) {
            data["hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels"] = [];
            for (let item of this.hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels)
                data["hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels"].push(item.toJSON());
        }
        return data;
    }

    clone(): HRM_Employee_Labour_Contract_Appendix_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Labour_Contract_Appendix_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Labour_Contract_Appendix_ENTITY {
    id?: number;
    code?: string | undefined;
    contract_code?: string | undefined;
    name?: string | undefined;
    name_f?: string | undefined;
    salary_name?: string | undefined;
    salary?: number | undefined;
    unit?: string | undefined;
    taget?: number | undefined;
    taget_default?: number | undefined;
    taget_default_f?: string | undefined;
    taget_unit?: string | undefined;
    type?: string | undefined;
    action?: string | undefined;
    employee_code?: string | undefined;
    salesed?: number | undefined;
    sales?: number | undefined;
    sales_f?: string | undefined;
    ratio?: number | undefined;
    ratio_f?: string | undefined;
    year?: number | undefined;
    month?: number | undefined;
    is_close?: boolean | undefined;
    appendix_type?: string | undefined;
    html_close?: string | undefined;
    xml_appendex_detail?: string | undefined;
    hRM_Employee_Labour_Contract_Appendix_Target_Details?: HRM_Employee_Labour_Contract_Appendix_Target_Detail_ENTITY[] | undefined;
    hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels?: HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY[] | undefined;
}

export class HRM_Employee_Labour_Contract_Salary_ENTITY implements IHRM_Employee_Labour_Contract_Salary_ENTITY {
    id?: number;
    code?: string | undefined;
    contract_code?: string | undefined;
    name?: string | undefined;
    salary_name?: string | undefined;
    salary?: number | undefined;
    unit?: string | undefined;

    constructor(data?: IHRM_Employee_Labour_Contract_Salary_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.contract_code = _data["contract_code"];
            this.name = _data["name"];
            this.salary_name = _data["salary_name"];
            this.salary = _data["salary"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): HRM_Employee_Labour_Contract_Salary_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Labour_Contract_Salary_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["contract_code"] = this.contract_code;
        data["name"] = this.name;
        data["salary_name"] = this.salary_name;
        data["salary"] = this.salary;
        data["unit"] = this.unit;
        return data;
    }

    clone(): HRM_Employee_Labour_Contract_Salary_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Labour_Contract_Salary_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Labour_Contract_Salary_ENTITY {
    id?: number;
    code?: string | undefined;
    contract_code?: string | undefined;
    name?: string | undefined;
    salary_name?: string | undefined;
    salary?: number | undefined;
    unit?: string | undefined;
}

export class HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY implements IHRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY {
    id?: number;
    code?: string | undefined;
    contract_code?: string | undefined;
    fullname?: string | undefined;
    relationship?: string | undefined;
    id_card?: string | undefined;
    birth_certificate_number?: string | undefined;
    birthplace_district_sub?: string | undefined;
    birthplace_district?: string | undefined;
    birthplace_city?: string | undefined;
    birthplace_detail?: string | undefined;
    phone?: string | undefined;
    tax?: string | undefined;
    birthday?: moment.Moment | undefined;
    registering_dependents_from?: moment.Moment | undefined;
    registering_dependents_end?: moment.Moment | undefined;

    constructor(data?: IHRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.contract_code = _data["contract_code"];
            this.fullname = _data["fullname"];
            this.relationship = _data["relationship"];
            this.id_card = _data["id_card"];
            this.birth_certificate_number = _data["birth_certificate_number"];
            this.birthplace_district_sub = _data["birthplace_district_sub"];
            this.birthplace_district = _data["birthplace_district"];
            this.birthplace_city = _data["birthplace_city"];
            this.birthplace_detail = _data["birthplace_detail"];
            this.phone = _data["phone"];
            this.tax = _data["tax"];
            this.birthday = _data["birthday"] ? moment.parseZone(_data["birthday"].toString()) : <any>undefined;
            this.registering_dependents_from = _data["registering_dependents_from"] ? moment.parseZone(_data["registering_dependents_from"].toString()) : <any>undefined;
            this.registering_dependents_end = _data["registering_dependents_end"] ? moment.parseZone(_data["registering_dependents_end"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["contract_code"] = this.contract_code;
        data["fullname"] = this.fullname;
        data["relationship"] = this.relationship;
        data["id_card"] = this.id_card;
        data["birth_certificate_number"] = this.birth_certificate_number;
        data["birthplace_district_sub"] = this.birthplace_district_sub;
        data["birthplace_district"] = this.birthplace_district;
        data["birthplace_city"] = this.birthplace_city;
        data["birthplace_detail"] = this.birthplace_detail;
        data["phone"] = this.phone;
        data["tax"] = this.tax;
        data["birthday"] = this.birthday ? this.birthday.toISOString(true) : <any>undefined;
        data["registering_dependents_from"] = this.registering_dependents_from ? this.registering_dependents_from.toISOString(true) : <any>undefined;
        data["registering_dependents_end"] = this.registering_dependents_end ? this.registering_dependents_end.toISOString(true) : <any>undefined;
        return data;
    }

    clone(): HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY {
    id?: number;
    code?: string | undefined;
    contract_code?: string | undefined;
    fullname?: string | undefined;
    relationship?: string | undefined;
    id_card?: string | undefined;
    birth_certificate_number?: string | undefined;
    birthplace_district_sub?: string | undefined;
    birthplace_district?: string | undefined;
    birthplace_city?: string | undefined;
    birthplace_detail?: string | undefined;
    phone?: string | undefined;
    tax?: string | undefined;
    birthday?: moment.Moment | undefined;
    registering_dependents_from?: moment.Moment | undefined;
    registering_dependents_end?: moment.Moment | undefined;
}

export class HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY implements IHRM_Employee_Labour_Contract_Salary_Deduction_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    contract_code?: string | undefined;
    name?: string | undefined;
    salary_deduction_name?: string | undefined;
    unit?: string | undefined;
    salary_deduction?: number | undefined;
    salary_deduction_unit?: string | undefined;
    contract_salary_code?: string | undefined;
    contract_salary_name?: string | undefined;

    constructor(data?: IHRM_Employee_Labour_Contract_Salary_Deduction_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.contract_code = _data["contract_code"];
            this.name = _data["name"];
            this.salary_deduction_name = _data["salary_deduction_name"];
            this.unit = _data["unit"];
            this.salary_deduction = _data["salary_deduction"];
            this.salary_deduction_unit = _data["salary_deduction_unit"];
            this.contract_salary_code = _data["contract_salary_code"];
            this.contract_salary_name = _data["contract_salary_name"];
        }
    }

    static fromJS(data: any): HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["contract_code"] = this.contract_code;
        data["name"] = this.name;
        data["salary_deduction_name"] = this.salary_deduction_name;
        data["unit"] = this.unit;
        data["salary_deduction"] = this.salary_deduction;
        data["salary_deduction_unit"] = this.salary_deduction_unit;
        data["contract_salary_code"] = this.contract_salary_code;
        data["contract_salary_name"] = this.contract_salary_name;
        return data;
    }

    clone(): HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Labour_Contract_Salary_Deduction_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    contract_code?: string | undefined;
    name?: string | undefined;
    salary_deduction_name?: string | undefined;
    unit?: string | undefined;
    salary_deduction?: number | undefined;
    salary_deduction_unit?: string | undefined;
    contract_salary_code?: string | undefined;
    contract_salary_name?: string | undefined;
}

export class HRM_Employee_Labour_Contract_ENTITY implements IHRM_Employee_Labour_Contract_ENTITY {
    id?: number;
    code?: string | undefined;
    ref_code?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;
    contract_code?: string | undefined;
    contract_type_code?: string | undefined;
    contract_type_name?: string | undefined;
    employee_id?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    xml_appendex?: string | undefined;
    xml_salary?: string | undefined;
    xml_curriculum_vitae?: string | undefined;
    xml_salary_deduction?: string | undefined;
    xml_sale_level?: string | undefined;
    begin_date?: moment.Moment | undefined;
    begin_date_f?: string | undefined;
    end_date?: moment.Moment | undefined;
    end_date_f?: string | undefined;
    form?: string | undefined;
    salary?: number | undefined;
    salary_percent?: number | undefined;
    allowance_rice?: number | undefined;
    allowance_phone?: number | undefined;
    allowance_petrol?: number | undefined;
    allowance_position?: number | undefined;
    allowance_transportation?: number | undefined;
    allowance_kpi?: number | undefined;
    allowance_holiday?: number | undefined;
    allowance_bonus?: number | undefined;
    paid_holiday?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
    hRM_Employee_Labour_Contract_Appendixs?: HRM_Employee_Labour_Contract_Appendix_ENTITY[] | undefined;
    hRM_Employee_Labour_Contract_Salarys?: HRM_Employee_Labour_Contract_Salary_ENTITY[] | undefined;
    hRM_Employee_Labour_Contract_Curriculum_Vitaes?: HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY[] | undefined;
    hRM_Employee_Labour_Contract_Salary_Deductions?: HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY[] | undefined;
    hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels?: HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY[] | undefined;

    constructor(data?: IHRM_Employee_Labour_Contract_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.ref_code = _data["ref_code"];
            this.status = _data["status"];
            this.message = _data["message"];
            this.contract_code = _data["contract_code"];
            this.contract_type_code = _data["contract_type_code"];
            this.contract_type_name = _data["contract_type_name"];
            this.employee_id = _data["employee_id"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.department_code = _data["department_code"];
            this.department_name = _data["department_name"];
            this.xml_appendex = _data["xml_appendex"];
            this.xml_salary = _data["xml_salary"];
            this.xml_curriculum_vitae = _data["xml_curriculum_vitae"];
            this.xml_salary_deduction = _data["xml_salary_deduction"];
            this.xml_sale_level = _data["xml_sale_level"];
            this.begin_date = _data["begin_date"] ? moment.parseZone(_data["begin_date"].toString()) : <any>undefined;
            this.begin_date_f = _data["begin_date_f"];
            this.end_date = _data["end_date"] ? moment.parseZone(_data["end_date"].toString()) : <any>undefined;
            this.end_date_f = _data["end_date_f"];
            this.form = _data["form"];
            this.salary = _data["salary"];
            this.salary_percent = _data["salary_percent"];
            this.allowance_rice = _data["allowance_rice"];
            this.allowance_phone = _data["allowance_phone"];
            this.allowance_petrol = _data["allowance_petrol"];
            this.allowance_position = _data["allowance_position"];
            this.allowance_transportation = _data["allowance_transportation"];
            this.allowance_kpi = _data["allowance_kpi"];
            this.allowance_holiday = _data["allowance_holiday"];
            this.allowance_bonus = _data["allowance_bonus"];
            this.paid_holiday = _data["paid_holiday"];
            this.month = _data["month"];
            this.year = _data["year"];
            if (Array.isArray(_data["hRM_Employee_Labour_Contract_Appendixs"])) {
                this.hRM_Employee_Labour_Contract_Appendixs = [] as any;
                for (let item of _data["hRM_Employee_Labour_Contract_Appendixs"])
                    this.hRM_Employee_Labour_Contract_Appendixs.push(HRM_Employee_Labour_Contract_Appendix_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Labour_Contract_Salarys"])) {
                this.hRM_Employee_Labour_Contract_Salarys = [] as any;
                for (let item of _data["hRM_Employee_Labour_Contract_Salarys"])
                    this.hRM_Employee_Labour_Contract_Salarys.push(HRM_Employee_Labour_Contract_Salary_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Labour_Contract_Curriculum_Vitaes"])) {
                this.hRM_Employee_Labour_Contract_Curriculum_Vitaes = [] as any;
                for (let item of _data["hRM_Employee_Labour_Contract_Curriculum_Vitaes"])
                    this.hRM_Employee_Labour_Contract_Curriculum_Vitaes.push(HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Labour_Contract_Salary_Deductions"])) {
                this.hRM_Employee_Labour_Contract_Salary_Deductions = [] as any;
                for (let item of _data["hRM_Employee_Labour_Contract_Salary_Deductions"])
                    this.hRM_Employee_Labour_Contract_Salary_Deductions.push(HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels"])) {
                this.hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels = [] as any;
                for (let item of _data["hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels"])
                    this.hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels.push(HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HRM_Employee_Labour_Contract_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Labour_Contract_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["ref_code"] = this.ref_code;
        data["status"] = this.status;
        data["message"] = this.message;
        data["contract_code"] = this.contract_code;
        data["contract_type_code"] = this.contract_type_code;
        data["contract_type_name"] = this.contract_type_name;
        data["employee_id"] = this.employee_id;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["department_code"] = this.department_code;
        data["department_name"] = this.department_name;
        data["xml_appendex"] = this.xml_appendex;
        data["xml_salary"] = this.xml_salary;
        data["xml_curriculum_vitae"] = this.xml_curriculum_vitae;
        data["xml_salary_deduction"] = this.xml_salary_deduction;
        data["xml_sale_level"] = this.xml_sale_level;
        data["begin_date"] = this.begin_date ? this.begin_date.toISOString(true) : <any>undefined;
        data["begin_date_f"] = this.begin_date_f;
        data["end_date"] = this.end_date ? this.end_date.toISOString(true) : <any>undefined;
        data["end_date_f"] = this.end_date_f;
        data["form"] = this.form;
        data["salary"] = this.salary;
        data["salary_percent"] = this.salary_percent;
        data["allowance_rice"] = this.allowance_rice;
        data["allowance_phone"] = this.allowance_phone;
        data["allowance_petrol"] = this.allowance_petrol;
        data["allowance_position"] = this.allowance_position;
        data["allowance_transportation"] = this.allowance_transportation;
        data["allowance_kpi"] = this.allowance_kpi;
        data["allowance_holiday"] = this.allowance_holiday;
        data["allowance_bonus"] = this.allowance_bonus;
        data["paid_holiday"] = this.paid_holiday;
        data["month"] = this.month;
        data["year"] = this.year;
        if (Array.isArray(this.hRM_Employee_Labour_Contract_Appendixs)) {
            data["hRM_Employee_Labour_Contract_Appendixs"] = [];
            for (let item of this.hRM_Employee_Labour_Contract_Appendixs)
                data["hRM_Employee_Labour_Contract_Appendixs"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Labour_Contract_Salarys)) {
            data["hRM_Employee_Labour_Contract_Salarys"] = [];
            for (let item of this.hRM_Employee_Labour_Contract_Salarys)
                data["hRM_Employee_Labour_Contract_Salarys"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Labour_Contract_Curriculum_Vitaes)) {
            data["hRM_Employee_Labour_Contract_Curriculum_Vitaes"] = [];
            for (let item of this.hRM_Employee_Labour_Contract_Curriculum_Vitaes)
                data["hRM_Employee_Labour_Contract_Curriculum_Vitaes"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Labour_Contract_Salary_Deductions)) {
            data["hRM_Employee_Labour_Contract_Salary_Deductions"] = [];
            for (let item of this.hRM_Employee_Labour_Contract_Salary_Deductions)
                data["hRM_Employee_Labour_Contract_Salary_Deductions"].push(item.toJSON());
        }
        if (Array.isArray(this.hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels)) {
            data["hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels"] = [];
            for (let item of this.hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels)
                data["hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels"].push(item.toJSON());
        }
        return data;
    }

    clone(): HRM_Employee_Labour_Contract_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Labour_Contract_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Labour_Contract_ENTITY {
    id?: number;
    code?: string | undefined;
    ref_code?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;
    contract_code?: string | undefined;
    contract_type_code?: string | undefined;
    contract_type_name?: string | undefined;
    employee_id?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    xml_appendex?: string | undefined;
    xml_salary?: string | undefined;
    xml_curriculum_vitae?: string | undefined;
    xml_salary_deduction?: string | undefined;
    xml_sale_level?: string | undefined;
    begin_date?: moment.Moment | undefined;
    begin_date_f?: string | undefined;
    end_date?: moment.Moment | undefined;
    end_date_f?: string | undefined;
    form?: string | undefined;
    salary?: number | undefined;
    salary_percent?: number | undefined;
    allowance_rice?: number | undefined;
    allowance_phone?: number | undefined;
    allowance_petrol?: number | undefined;
    allowance_position?: number | undefined;
    allowance_transportation?: number | undefined;
    allowance_kpi?: number | undefined;
    allowance_holiday?: number | undefined;
    allowance_bonus?: number | undefined;
    paid_holiday?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
    hRM_Employee_Labour_Contract_Appendixs?: HRM_Employee_Labour_Contract_Appendix_ENTITY[] | undefined;
    hRM_Employee_Labour_Contract_Salarys?: HRM_Employee_Labour_Contract_Salary_ENTITY[] | undefined;
    hRM_Employee_Labour_Contract_Curriculum_Vitaes?: HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY[] | undefined;
    hRM_Employee_Labour_Contract_Salary_Deductions?: HRM_Employee_Labour_Contract_Salary_Deduction_ENTITY[] | undefined;
    hrM_Employee_Labour_Contract_Appendix_Target_Sale_Levels?: HRM_Employee_Labour_Contract_Appendix_Target_Sale_Level_ENTITY[] | undefined;
}

export class HRM_Employee_Bonus_ENTITY implements IHRM_Employee_Bonus_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    employee_code?: string | undefined;
    bobus_code?: string | undefined;
    bobus_date?: moment.Moment | undefined;
    type?: string | undefined;
    value?: number | undefined;

    constructor(data?: IHRM_Employee_Bonus_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.employee_code = _data["employee_code"];
            this.bobus_code = _data["bobus_code"];
            this.bobus_date = _data["bobus_date"] ? moment.parseZone(_data["bobus_date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): HRM_Employee_Bonus_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Bonus_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["employee_code"] = this.employee_code;
        data["bobus_code"] = this.bobus_code;
        data["bobus_date"] = this.bobus_date ? this.bobus_date.toISOString(true) : <any>undefined;
        data["type"] = this.type;
        data["value"] = this.value;
        return data;
    }

    clone(): HRM_Employee_Bonus_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Bonus_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Bonus_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    employee_code?: string | undefined;
    bobus_code?: string | undefined;
    bobus_date?: moment.Moment | undefined;
    type?: string | undefined;
    value?: number | undefined;
}

export class HRM_Employee_Discipline_ENTITY implements IHRM_Employee_Discipline_ENTITY {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    discipline_code?: string | undefined;
    discipline_date?: moment.Moment | undefined;
    end_discipline_date?: moment.Moment | undefined;
    start_discipline_date?: moment.Moment | undefined;
    type?: string | undefined;
    reason?: string | undefined;
    value?: number | undefined;

    constructor(data?: IHRM_Employee_Discipline_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.employee_code = _data["employee_code"];
            this.discipline_code = _data["discipline_code"];
            this.discipline_date = _data["discipline_date"] ? moment.parseZone(_data["discipline_date"].toString()) : <any>undefined;
            this.end_discipline_date = _data["end_discipline_date"] ? moment.parseZone(_data["end_discipline_date"].toString()) : <any>undefined;
            this.start_discipline_date = _data["start_discipline_date"] ? moment.parseZone(_data["start_discipline_date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.reason = _data["reason"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): HRM_Employee_Discipline_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Discipline_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["employee_code"] = this.employee_code;
        data["discipline_code"] = this.discipline_code;
        data["discipline_date"] = this.discipline_date ? this.discipline_date.toISOString(true) : <any>undefined;
        data["end_discipline_date"] = this.end_discipline_date ? this.end_discipline_date.toISOString(true) : <any>undefined;
        data["start_discipline_date"] = this.start_discipline_date ? this.start_discipline_date.toISOString(true) : <any>undefined;
        data["type"] = this.type;
        data["reason"] = this.reason;
        data["value"] = this.value;
        return data;
    }

    clone(): HRM_Employee_Discipline_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Discipline_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Discipline_ENTITY {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    discipline_code?: string | undefined;
    discipline_date?: moment.Moment | undefined;
    end_discipline_date?: moment.Moment | undefined;
    start_discipline_date?: moment.Moment | undefined;
    type?: string | undefined;
    reason?: string | undefined;
    value?: number | undefined;
}

export class HRM_Employee_Training_ENTITY implements IHRM_Employee_Training_ENTITY {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    type?: string | undefined;
    form?: string | undefined;
    name?: string | undefined;
    training_date?: moment.Moment | undefined;
    tuition?: number | undefined;
    training_contract_code?: string | undefined;
    training_from?: string | undefined;

    constructor(data?: IHRM_Employee_Training_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.employee_code = _data["employee_code"];
            this.type = _data["type"];
            this.form = _data["form"];
            this.name = _data["name"];
            this.training_date = _data["training_date"] ? moment.parseZone(_data["training_date"].toString()) : <any>undefined;
            this.tuition = _data["tuition"];
            this.training_contract_code = _data["training_contract_code"];
            this.training_from = _data["training_from"];
        }
    }

    static fromJS(data: any): HRM_Employee_Training_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Training_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["employee_code"] = this.employee_code;
        data["type"] = this.type;
        data["form"] = this.form;
        data["name"] = this.name;
        data["training_date"] = this.training_date ? this.training_date.toISOString(true) : <any>undefined;
        data["tuition"] = this.tuition;
        data["training_contract_code"] = this.training_contract_code;
        data["training_from"] = this.training_from;
        return data;
    }

    clone(): HRM_Employee_Training_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Training_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Training_ENTITY {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    type?: string | undefined;
    form?: string | undefined;
    name?: string | undefined;
    training_date?: moment.Moment | undefined;
    tuition?: number | undefined;
    training_contract_code?: string | undefined;
    training_from?: string | undefined;
}

export class HRM_Employee_Evaluate_ENTITY implements IHRM_Employee_Evaluate_ENTITY {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    evaluate_person_code?: string | undefined;
    classification?: string | undefined;
    type?: string | undefined;
    values?: number | undefined;
    evaluate_date?: moment.Moment | undefined;

    constructor(data?: IHRM_Employee_Evaluate_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.employee_code = _data["employee_code"];
            this.evaluate_person_code = _data["evaluate_person_code"];
            this.classification = _data["classification"];
            this.type = _data["type"];
            this.values = _data["values"];
            this.evaluate_date = _data["evaluate_date"] ? moment.parseZone(_data["evaluate_date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HRM_Employee_Evaluate_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Evaluate_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["employee_code"] = this.employee_code;
        data["evaluate_person_code"] = this.evaluate_person_code;
        data["classification"] = this.classification;
        data["type"] = this.type;
        data["values"] = this.values;
        data["evaluate_date"] = this.evaluate_date ? this.evaluate_date.toISOString(true) : <any>undefined;
        return data;
    }

    clone(): HRM_Employee_Evaluate_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Evaluate_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Evaluate_ENTITY {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    evaluate_person_code?: string | undefined;
    classification?: string | undefined;
    type?: string | undefined;
    values?: number | undefined;
    evaluate_date?: moment.Moment | undefined;
}

export class HRM_Employee_Occupational_Accident_ENTITY implements IHRM_Employee_Occupational_Accident_ENTITY {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    status?: string | undefined;
    reason?: string | undefined;
    benefit_mode?: string | undefined;
    values?: number | undefined;
    description?: string | undefined;
    labor_decline?: number | undefined;
    accident_date?: moment.Moment | undefined;

    constructor(data?: IHRM_Employee_Occupational_Accident_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.employee_code = _data["employee_code"];
            this.status = _data["status"];
            this.reason = _data["reason"];
            this.benefit_mode = _data["benefit_mode"];
            this.values = _data["values"];
            this.description = _data["description"];
            this.labor_decline = _data["labor_decline"];
            this.accident_date = _data["accident_date"] ? moment.parseZone(_data["accident_date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HRM_Employee_Occupational_Accident_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Occupational_Accident_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["employee_code"] = this.employee_code;
        data["status"] = this.status;
        data["reason"] = this.reason;
        data["benefit_mode"] = this.benefit_mode;
        data["values"] = this.values;
        data["description"] = this.description;
        data["labor_decline"] = this.labor_decline;
        data["accident_date"] = this.accident_date ? this.accident_date.toISOString(true) : <any>undefined;
        return data;
    }

    clone(): HRM_Employee_Occupational_Accident_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Occupational_Accident_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Occupational_Accident_ENTITY {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    status?: string | undefined;
    reason?: string | undefined;
    benefit_mode?: string | undefined;
    values?: number | undefined;
    description?: string | undefined;
    labor_decline?: number | undefined;
    accident_date?: moment.Moment | undefined;
}

export class FaceInfo implements IFaceInfo {
    age?: number | undefined;
    gender_probability?: number | undefined;
    gender?: string | undefined;

    constructor(data?: IFaceInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.age = _data["age"];
            this.gender_probability = _data["gender_probability"];
            this.gender = _data["gender"];
        }
    }

    static fromJS(data: any): FaceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FaceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["age"] = this.age;
        data["gender_probability"] = this.gender_probability;
        data["gender"] = this.gender;
        return data;
    }

    clone(): FaceInfo {
        const json = this.toJSON();
        let result = new FaceInfo();
        result.init(json);
        return result;
    }
}

export interface IFaceInfo {
    age?: number | undefined;
    gender_probability?: number | undefined;
    gender?: string | undefined;
}

export class HRM_Employee_Check_In_Out_Image_Training_ENTITY implements IHRM_Employee_Check_In_Out_Image_Training_ENTITY {
    left?: string | undefined;
    face_info_left?: FaceInfo;
    right?: string | undefined;
    face_info_right?: FaceInfo;
    center?: string | undefined;
    face_info_center?: FaceInfo;
    bottom?: string | undefined;
    face_info_bottom?: FaceInfo;
    top?: string | undefined;
    face_info_top?: FaceInfo;
    left_base64?: string | undefined;
    right_base64?: string | undefined;
    center_base64?: string | undefined;
    bottom_base64?: string | undefined;
    top_base64?: string | undefined;
    employee_code?: string | undefined;
    img_left_age?: number | undefined;
    img_right_age?: number | undefined;
    img_top_age?: number | undefined;
    img_bottom_age?: number | undefined;
    min_age?: number | undefined;
    max_age?: number | undefined;
    gender?: string | undefined;

    constructor(data?: IHRM_Employee_Check_In_Out_Image_Training_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.left = _data["left"];
            this.face_info_left = _data["face_info_left"] ? FaceInfo.fromJS(_data["face_info_left"]) : <any>undefined;
            this.right = _data["right"];
            this.face_info_right = _data["face_info_right"] ? FaceInfo.fromJS(_data["face_info_right"]) : <any>undefined;
            this.center = _data["center"];
            this.face_info_center = _data["face_info_center"] ? FaceInfo.fromJS(_data["face_info_center"]) : <any>undefined;
            this.bottom = _data["bottom"];
            this.face_info_bottom = _data["face_info_bottom"] ? FaceInfo.fromJS(_data["face_info_bottom"]) : <any>undefined;
            this.top = _data["top"];
            this.face_info_top = _data["face_info_top"] ? FaceInfo.fromJS(_data["face_info_top"]) : <any>undefined;
            this.left_base64 = _data["left_base64"];
            this.right_base64 = _data["right_base64"];
            this.center_base64 = _data["center_base64"];
            this.bottom_base64 = _data["bottom_base64"];
            this.top_base64 = _data["top_base64"];
            this.employee_code = _data["employee_code"];
            this.img_left_age = _data["img_left_age"];
            this.img_right_age = _data["img_right_age"];
            this.img_top_age = _data["img_top_age"];
            this.img_bottom_age = _data["img_bottom_age"];
            this.min_age = _data["min_age"];
            this.max_age = _data["max_age"];
            this.gender = _data["gender"];
        }
    }

    static fromJS(data: any): HRM_Employee_Check_In_Out_Image_Training_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Check_In_Out_Image_Training_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["left"] = this.left;
        data["face_info_left"] = this.face_info_left ? this.face_info_left.toJSON() : <any>undefined;
        data["right"] = this.right;
        data["face_info_right"] = this.face_info_right ? this.face_info_right.toJSON() : <any>undefined;
        data["center"] = this.center;
        data["face_info_center"] = this.face_info_center ? this.face_info_center.toJSON() : <any>undefined;
        data["bottom"] = this.bottom;
        data["face_info_bottom"] = this.face_info_bottom ? this.face_info_bottom.toJSON() : <any>undefined;
        data["top"] = this.top;
        data["face_info_top"] = this.face_info_top ? this.face_info_top.toJSON() : <any>undefined;
        data["left_base64"] = this.left_base64;
        data["right_base64"] = this.right_base64;
        data["center_base64"] = this.center_base64;
        data["bottom_base64"] = this.bottom_base64;
        data["top_base64"] = this.top_base64;
        data["employee_code"] = this.employee_code;
        data["img_left_age"] = this.img_left_age;
        data["img_right_age"] = this.img_right_age;
        data["img_top_age"] = this.img_top_age;
        data["img_bottom_age"] = this.img_bottom_age;
        data["min_age"] = this.min_age;
        data["max_age"] = this.max_age;
        data["gender"] = this.gender;
        return data;
    }

    clone(): HRM_Employee_Check_In_Out_Image_Training_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Check_In_Out_Image_Training_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Check_In_Out_Image_Training_ENTITY {
    left?: string | undefined;
    face_info_left?: FaceInfo;
    right?: string | undefined;
    face_info_right?: FaceInfo;
    center?: string | undefined;
    face_info_center?: FaceInfo;
    bottom?: string | undefined;
    face_info_bottom?: FaceInfo;
    top?: string | undefined;
    face_info_top?: FaceInfo;
    left_base64?: string | undefined;
    right_base64?: string | undefined;
    center_base64?: string | undefined;
    bottom_base64?: string | undefined;
    top_base64?: string | undefined;
    employee_code?: string | undefined;
    img_left_age?: number | undefined;
    img_right_age?: number | undefined;
    img_top_age?: number | undefined;
    img_bottom_age?: number | undefined;
    min_age?: number | undefined;
    max_age?: number | undefined;
    gender?: string | undefined;
}

export class HRM_Employee_Check_In_Out_ENTITY implements IHRM_Employee_Check_In_Out_ENTITY {
    id?: number;
    code?: string | undefined;
    title?: string | undefined;
    dates?: string | undefined;
    check_in?: string | undefined;
    is_check_in?: boolean | undefined;
    check_out?: string | undefined;
    username?: string | undefined;
    is_check_out?: boolean | undefined;
    check_in_relax?: string | undefined;
    check_out_relax?: string | undefined;
    is_checkin_relax?: boolean | undefined;
    employee_code?: string | undefined;
    status_checkin?: number | undefined;
    status?: number | undefined;
    message?: string | undefined;
    message_checkin?: string | undefined;
    result_checkin?: number | undefined;
    is_ready_checkin?: boolean | undefined;
    device_id?: string | undefined;
    machine_id?: string | undefined;
    machine_employee_id?: string | undefined;
    base64?: string | undefined;
    branch_code?: string | undefined;
    branch_name_in?: string | undefined;
    branch_name_out?: string | undefined;
    branch_address_in?: string | undefined;
    branch_address_out?: string | undefined;
    type?: string | undefined;
    _day?: number | undefined;
    soon?: number | undefined;
    late?: number | undefined;
    link_image?: string | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;
    check_time?: moment.Moment | undefined;
    filter_date?: moment.Moment | undefined;
    work_hour?: number | undefined;
    work_unit?: number | undefined;
    work_hour_total?: number | undefined;
    work_day_total?: number | undefined;
    path?: string | undefined;
    percent_success?: number | undefined;
    date_check_in?: moment.Moment | undefined;
    date_check_out?: moment.Moment | undefined;
    link_image_in?: string | undefined;
    link_image_out?: string | undefined;
    stt?: number | undefined;
    max_dif_face?: number | undefined;
    check_in_time?: moment.Moment | undefined;
    check_in_time_f?: string | undefined;
    check_out_time?: moment.Moment | undefined;
    check_out_time_f?: string | undefined;
    work_shift_code?: string | undefined;
    work_shift_name_in?: string | undefined;
    work_shift_name_out?: string | undefined;
    latitude_in?: number | undefined;
    longitude_in?: number | undefined;
    latitude_out?: number | undefined;
    longitude_out?: number | undefined;
    datetime_in_week?: moment.Moment | undefined;
    date_name_en_in_week?: string | undefined;
    date_name_vn_in_week?: string | undefined;
    age?: number | undefined;
    gender_probability?: number | undefined;
    gender?: string | undefined;
    requestUri?: string | undefined;
    hRM_Employee_Check_In_Out_Image_Trainings?: HRM_Employee_Check_In_Out_Image_Training_ENTITY;

    constructor(data?: IHRM_Employee_Check_In_Out_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.title = _data["title"];
            this.dates = _data["dates"];
            this.check_in = _data["check_in"];
            this.is_check_in = _data["is_check_in"];
            this.check_out = _data["check_out"];
            this.username = _data["username"];
            this.is_check_out = _data["is_check_out"];
            this.check_in_relax = _data["check_in_relax"];
            this.check_out_relax = _data["check_out_relax"];
            this.is_checkin_relax = _data["is_checkin_relax"];
            this.employee_code = _data["employee_code"];
            this.status_checkin = _data["status_checkin"];
            this.status = _data["status"];
            this.message = _data["message"];
            this.message_checkin = _data["message_checkin"];
            this.result_checkin = _data["result_checkin"];
            this.is_ready_checkin = _data["is_ready_checkin"];
            this.device_id = _data["device_id"];
            this.machine_id = _data["machine_id"];
            this.machine_employee_id = _data["machine_employee_id"];
            this.base64 = _data["base64"];
            this.branch_code = _data["branch_code"];
            this.branch_name_in = _data["branch_name_in"];
            this.branch_name_out = _data["branch_name_out"];
            this.branch_address_in = _data["branch_address_in"];
            this.branch_address_out = _data["branch_address_out"];
            this.type = _data["type"];
            this._day = _data["_day"];
            this.soon = _data["soon"];
            this.late = _data["late"];
            this.link_image = _data["link_image"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.check_time = _data["check_time"] ? moment.parseZone(_data["check_time"].toString()) : <any>undefined;
            this.filter_date = _data["filter_date"] ? moment.parseZone(_data["filter_date"].toString()) : <any>undefined;
            this.work_hour = _data["work_hour"];
            this.work_unit = _data["work_unit"];
            this.work_hour_total = _data["work_hour_total"];
            this.work_day_total = _data["work_day_total"];
            this.path = _data["path"];
            this.percent_success = _data["percent_success"];
            this.date_check_in = _data["date_check_in"] ? moment.parseZone(_data["date_check_in"].toString()) : <any>undefined;
            this.date_check_out = _data["date_check_out"] ? moment.parseZone(_data["date_check_out"].toString()) : <any>undefined;
            this.link_image_in = _data["link_image_in"];
            this.link_image_out = _data["link_image_out"];
            this.stt = _data["stt"];
            this.max_dif_face = _data["max_dif_face"];
            this.check_in_time = _data["check_in_time"] ? moment.parseZone(_data["check_in_time"].toString()) : <any>undefined;
            this.check_in_time_f = _data["check_in_time_f"];
            this.check_out_time = _data["check_out_time"] ? moment.parseZone(_data["check_out_time"].toString()) : <any>undefined;
            this.check_out_time_f = _data["check_out_time_f"];
            this.work_shift_code = _data["work_shift_code"];
            this.work_shift_name_in = _data["work_shift_name_in"];
            this.work_shift_name_out = _data["work_shift_name_out"];
            this.latitude_in = _data["latitude_in"];
            this.longitude_in = _data["longitude_in"];
            this.latitude_out = _data["latitude_out"];
            this.longitude_out = _data["longitude_out"];
            this.datetime_in_week = _data["datetime_in_week"] ? moment.parseZone(_data["datetime_in_week"].toString()) : <any>undefined;
            this.date_name_en_in_week = _data["date_name_en_in_week"];
            this.date_name_vn_in_week = _data["date_name_vn_in_week"];
            this.age = _data["age"];
            this.gender_probability = _data["gender_probability"];
            this.gender = _data["gender"];
            this.requestUri = _data["requestUri"];
            this.hRM_Employee_Check_In_Out_Image_Trainings = _data["hRM_Employee_Check_In_Out_Image_Trainings"] ? HRM_Employee_Check_In_Out_Image_Training_ENTITY.fromJS(_data["hRM_Employee_Check_In_Out_Image_Trainings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HRM_Employee_Check_In_Out_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Check_In_Out_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["title"] = this.title;
        data["dates"] = this.dates;
        data["check_in"] = this.check_in;
        data["is_check_in"] = this.is_check_in;
        data["check_out"] = this.check_out;
        data["username"] = this.username;
        data["is_check_out"] = this.is_check_out;
        data["check_in_relax"] = this.check_in_relax;
        data["check_out_relax"] = this.check_out_relax;
        data["is_checkin_relax"] = this.is_checkin_relax;
        data["employee_code"] = this.employee_code;
        data["status_checkin"] = this.status_checkin;
        data["status"] = this.status;
        data["message"] = this.message;
        data["message_checkin"] = this.message_checkin;
        data["result_checkin"] = this.result_checkin;
        data["is_ready_checkin"] = this.is_ready_checkin;
        data["device_id"] = this.device_id;
        data["machine_id"] = this.machine_id;
        data["machine_employee_id"] = this.machine_employee_id;
        data["base64"] = this.base64;
        data["branch_code"] = this.branch_code;
        data["branch_name_in"] = this.branch_name_in;
        data["branch_name_out"] = this.branch_name_out;
        data["branch_address_in"] = this.branch_address_in;
        data["branch_address_out"] = this.branch_address_out;
        data["type"] = this.type;
        data["_day"] = this._day;
        data["soon"] = this.soon;
        data["late"] = this.late;
        data["link_image"] = this.link_image;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["check_time"] = this.check_time ? this.check_time.toISOString(true) : <any>undefined;
        data["filter_date"] = this.filter_date ? this.filter_date.toISOString(true) : <any>undefined;
        data["work_hour"] = this.work_hour;
        data["work_unit"] = this.work_unit;
        data["work_hour_total"] = this.work_hour_total;
        data["work_day_total"] = this.work_day_total;
        data["path"] = this.path;
        data["percent_success"] = this.percent_success;
        data["date_check_in"] = this.date_check_in ? this.date_check_in.toISOString(true) : <any>undefined;
        data["date_check_out"] = this.date_check_out ? this.date_check_out.toISOString(true) : <any>undefined;
        data["link_image_in"] = this.link_image_in;
        data["link_image_out"] = this.link_image_out;
        data["stt"] = this.stt;
        data["max_dif_face"] = this.max_dif_face;
        data["check_in_time"] = this.check_in_time ? this.check_in_time.toISOString(true) : <any>undefined;
        data["check_in_time_f"] = this.check_in_time_f;
        data["check_out_time"] = this.check_out_time ? this.check_out_time.toISOString(true) : <any>undefined;
        data["check_out_time_f"] = this.check_out_time_f;
        data["work_shift_code"] = this.work_shift_code;
        data["work_shift_name_in"] = this.work_shift_name_in;
        data["work_shift_name_out"] = this.work_shift_name_out;
        data["latitude_in"] = this.latitude_in;
        data["longitude_in"] = this.longitude_in;
        data["latitude_out"] = this.latitude_out;
        data["longitude_out"] = this.longitude_out;
        data["datetime_in_week"] = this.datetime_in_week ? this.datetime_in_week.toISOString(true) : <any>undefined;
        data["date_name_en_in_week"] = this.date_name_en_in_week;
        data["date_name_vn_in_week"] = this.date_name_vn_in_week;
        data["age"] = this.age;
        data["gender_probability"] = this.gender_probability;
        data["gender"] = this.gender;
        data["requestUri"] = this.requestUri;
        data["hRM_Employee_Check_In_Out_Image_Trainings"] = this.hRM_Employee_Check_In_Out_Image_Trainings ? this.hRM_Employee_Check_In_Out_Image_Trainings.toJSON() : <any>undefined;
        return data;
    }

    clone(): HRM_Employee_Check_In_Out_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Check_In_Out_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Check_In_Out_ENTITY {
    id?: number;
    code?: string | undefined;
    title?: string | undefined;
    dates?: string | undefined;
    check_in?: string | undefined;
    is_check_in?: boolean | undefined;
    check_out?: string | undefined;
    username?: string | undefined;
    is_check_out?: boolean | undefined;
    check_in_relax?: string | undefined;
    check_out_relax?: string | undefined;
    is_checkin_relax?: boolean | undefined;
    employee_code?: string | undefined;
    status_checkin?: number | undefined;
    status?: number | undefined;
    message?: string | undefined;
    message_checkin?: string | undefined;
    result_checkin?: number | undefined;
    is_ready_checkin?: boolean | undefined;
    device_id?: string | undefined;
    machine_id?: string | undefined;
    machine_employee_id?: string | undefined;
    base64?: string | undefined;
    branch_code?: string | undefined;
    branch_name_in?: string | undefined;
    branch_name_out?: string | undefined;
    branch_address_in?: string | undefined;
    branch_address_out?: string | undefined;
    type?: string | undefined;
    _day?: number | undefined;
    soon?: number | undefined;
    late?: number | undefined;
    link_image?: string | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;
    check_time?: moment.Moment | undefined;
    filter_date?: moment.Moment | undefined;
    work_hour?: number | undefined;
    work_unit?: number | undefined;
    work_hour_total?: number | undefined;
    work_day_total?: number | undefined;
    path?: string | undefined;
    percent_success?: number | undefined;
    date_check_in?: moment.Moment | undefined;
    date_check_out?: moment.Moment | undefined;
    link_image_in?: string | undefined;
    link_image_out?: string | undefined;
    stt?: number | undefined;
    max_dif_face?: number | undefined;
    check_in_time?: moment.Moment | undefined;
    check_in_time_f?: string | undefined;
    check_out_time?: moment.Moment | undefined;
    check_out_time_f?: string | undefined;
    work_shift_code?: string | undefined;
    work_shift_name_in?: string | undefined;
    work_shift_name_out?: string | undefined;
    latitude_in?: number | undefined;
    longitude_in?: number | undefined;
    latitude_out?: number | undefined;
    longitude_out?: number | undefined;
    datetime_in_week?: moment.Moment | undefined;
    date_name_en_in_week?: string | undefined;
    date_name_vn_in_week?: string | undefined;
    age?: number | undefined;
    gender_probability?: number | undefined;
    gender?: string | undefined;
    requestUri?: string | undefined;
    hRM_Employee_Check_In_Out_Image_Trainings?: HRM_Employee_Check_In_Out_Image_Training_ENTITY;
}

export class HRM_Employee_ENTITY implements IHRM_Employee_ENTITY {
    id?: number | undefined;
    status?: number | undefined;
    message?: string | undefined;
    company_code?: string | undefined;
    ref_code?: string | undefined;
    id_employee?: string | undefined;
    marital_status_code?: string | undefined;
    marital_status_name?: string | undefined;
    sex_code?: string | undefined;
    sex_name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    fullName?: string | undefined;
    text?: string | undefined;
    phone?: string | undefined;
    user_login?: string | undefined;
    address_branch?: string | undefined;
    address_detail?: string | undefined;
    address_sub_district_code?: string | undefined;
    address_sub_district_name?: string | undefined;
    address_district_code?: string | undefined;
    address_district_name?: string | undefined;
    address_city_code?: string | undefined;
    address_city_name?: string | undefined;
    address_current_detail?: string | undefined;
    address_current_sub_district_code?: string | undefined;
    address_current_sub_district_name?: string | undefined;
    address_current_district_code?: string | undefined;
    address_current_district_name?: string | undefined;
    address_current_city_code?: string | undefined;
    address_current_city_name?: string | undefined;
    social_insurance_number?: string | undefined;
    date_insurance_number?: moment.Moment | undefined;
    from_insurance_number?: string | undefined;
    fax?: string | undefined;
    tax?: string | undefined;
    bank_account_number?: string | undefined;
    bank_name?: string | undefined;
    nation?: string | undefined;
    religion?: string | undefined;
    date_joining_company_union?: moment.Moment | undefined;
    date_joining_company_union_f?: string | undefined;
    date_joining_communist_party?: moment.Moment | undefined;
    date_joining_communist_party_f?: string | undefined;
    uniform_size?: string | undefined;
    shoes_size?: string | undefined;
    trousers_size?: string | undefined;
    avarta?: string | undefined;
    avarta_html?: string | undefined;
    avarta_base64?: string | undefined;
    avarta_base64_256x256?: string | undefined;
    id_card?: string | undefined;
    date_create_card?: moment.Moment | undefined;
    from_create_card?: string | undefined;
    cccd?: string | undefined;
    date_create_cccd?: moment.Moment | undefined;
    from_create_cccd?: string | undefined;
    birthday?: moment.Moment | undefined;
    birthday_f?: string | undefined;
    title_code?: string | undefined;
    title_name?: string | undefined;
    position_code?: string | undefined;
    position_name?: string | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    email?: string | undefined;
    email_company?: string | undefined;
    working_hour_on_month?: number | undefined;
    code?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    approve?: boolean | undefined;
    active?: boolean | undefined;
    active_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_edit?: moment.Moment | undefined;
    filter_date?: moment.Moment | undefined;
    notes?: string | undefined;
    sub_sign_title_name?: string | undefined;
    type?: string | undefined;
    birthplace_detail?: string | undefined;
    birthplace_sub_district_code?: string | undefined;
    birthplace_sub_district_name?: string | undefined;
    birthplace_district_code?: string | undefined;
    birthplace_district_name?: string | undefined;
    birthplace_city_code?: string | undefined;
    birthplace_city_name?: string | undefined;
    part_code?: string | undefined;
    part_name?: string | undefined;
    date_join_company?: moment.Moment | undefined;
    date_join_company_f?: string | undefined;
    date_quit_company?: moment.Moment | undefined;
    date_quit_company_f?: string | undefined;
    work_day?: number | undefined;
    salary?: number | undefined;
    level?: number | undefined;
    is_show_list_employee?: boolean | undefined;
    group_account_code?: string | undefined;
    tbName?: string | undefined;
    work_shifts?: string | undefined;
    signature?: string | undefined;
    xml_academic?: string | undefined;
    xml_certificates?: string | undefined;
    xml_bonus?: string | undefined;
    xml_discipline?: string | undefined;
    xml_training?: string | undefined;
    xml_evaluate?: string | undefined;
    xml_occupational_accident?: string | undefined;
    allDay?: AllDayModel[] | undefined;
    hRM_TimeSheet_Work_Shifts?: HRM_TimeSheet_Work_Shift_ENTITY[] | undefined;
    hRM_Employee_Academic_Levels?: HRM_Employee_Academic_Level_ENTITY[] | undefined;
    hRM_Employee_Certificates?: HRM_Employee_Certificate_ENTITY[] | undefined;
    hRM_Employee_Labour_Contracts?: HRM_Employee_Labour_Contract_ENTITY[] | undefined;
    hRM_Employee_Labour_Contract_Curriculum_Vitaes?: HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY[] | undefined;
    hRM_Employee_Bonus?: HRM_Employee_Bonus_ENTITY[] | undefined;
    hRM_Employee_Discipline?: HRM_Employee_Discipline_ENTITY[] | undefined;
    hRM_Employee_Training?: HRM_Employee_Training_ENTITY[] | undefined;
    hRM_Employee_Evaluates?: HRM_Employee_Evaluate_ENTITY[] | undefined;
    hRM_Employee_Occupational_Accidents?: HRM_Employee_Occupational_Accident_ENTITY[] | undefined;
    hRM_Employee_Check_In_Outs?: HRM_Employee_Check_In_Out_ENTITY[] | undefined;

    constructor(data?: IHRM_Employee_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
            this.message = _data["message"];
            this.company_code = _data["company_code"];
            this.ref_code = _data["ref_code"];
            this.id_employee = _data["id_employee"];
            this.marital_status_code = _data["marital_status_code"];
            this.marital_status_name = _data["marital_status_name"];
            this.sex_code = _data["sex_code"];
            this.sex_name = _data["sex_name"];
            this.department_code = _data["department_code"];
            this.department_name = _data["department_name"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.fullName = _data["fullName"];
            this.text = _data["text"];
            this.phone = _data["phone"];
            this.user_login = _data["user_login"];
            this.address_branch = _data["address_branch"];
            this.address_detail = _data["address_detail"];
            this.address_sub_district_code = _data["address_sub_district_code"];
            this.address_sub_district_name = _data["address_sub_district_name"];
            this.address_district_code = _data["address_district_code"];
            this.address_district_name = _data["address_district_name"];
            this.address_city_code = _data["address_city_code"];
            this.address_city_name = _data["address_city_name"];
            this.address_current_detail = _data["address_current_detail"];
            this.address_current_sub_district_code = _data["address_current_sub_district_code"];
            this.address_current_sub_district_name = _data["address_current_sub_district_name"];
            this.address_current_district_code = _data["address_current_district_code"];
            this.address_current_district_name = _data["address_current_district_name"];
            this.address_current_city_code = _data["address_current_city_code"];
            this.address_current_city_name = _data["address_current_city_name"];
            this.social_insurance_number = _data["social_insurance_number"];
            this.date_insurance_number = _data["date_insurance_number"] ? moment.parseZone(_data["date_insurance_number"].toString()) : <any>undefined;
            this.from_insurance_number = _data["from_insurance_number"];
            this.fax = _data["fax"];
            this.tax = _data["tax"];
            this.bank_account_number = _data["bank_account_number"];
            this.bank_name = _data["bank_name"];
            this.nation = _data["nation"];
            this.religion = _data["religion"];
            this.date_joining_company_union = _data["date_joining_company_union"] ? moment.parseZone(_data["date_joining_company_union"].toString()) : <any>undefined;
            this.date_joining_company_union_f = _data["date_joining_company_union_f"];
            this.date_joining_communist_party = _data["date_joining_communist_party"] ? moment.parseZone(_data["date_joining_communist_party"].toString()) : <any>undefined;
            this.date_joining_communist_party_f = _data["date_joining_communist_party_f"];
            this.uniform_size = _data["uniform_size"];
            this.shoes_size = _data["shoes_size"];
            this.trousers_size = _data["trousers_size"];
            this.avarta = _data["avarta"];
            this.avarta_html = _data["avarta_html"];
            this.avarta_base64 = _data["avarta_base64"];
            this.avarta_base64_256x256 = _data["avarta_base64_256x256"];
            this.id_card = _data["id_card"];
            this.date_create_card = _data["date_create_card"] ? moment.parseZone(_data["date_create_card"].toString()) : <any>undefined;
            this.from_create_card = _data["from_create_card"];
            this.cccd = _data["cccd"];
            this.date_create_cccd = _data["date_create_cccd"] ? moment.parseZone(_data["date_create_cccd"].toString()) : <any>undefined;
            this.from_create_cccd = _data["from_create_cccd"];
            this.birthday = _data["birthday"] ? moment.parseZone(_data["birthday"].toString()) : <any>undefined;
            this.birthday_f = _data["birthday_f"];
            this.title_code = _data["title_code"];
            this.title_name = _data["title_name"];
            this.position_code = _data["position_code"];
            this.position_name = _data["position_name"];
            this.branch_code = _data["branch_code"];
            this.branch_name = _data["branch_name"];
            this.email = _data["email"];
            this.email_company = _data["email_company"];
            this.working_hour_on_month = _data["working_hour_on_month"];
            this.code = _data["code"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.approve = _data["approve"];
            this.active = _data["active"];
            this.active_name = _data["active_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_edit = _data["date_edit"] ? moment.parseZone(_data["date_edit"].toString()) : <any>undefined;
            this.filter_date = _data["filter_date"] ? moment.parseZone(_data["filter_date"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            this.sub_sign_title_name = _data["sub_sign_title_name"];
            this.type = _data["type"];
            this.birthplace_detail = _data["birthplace_detail"];
            this.birthplace_sub_district_code = _data["birthplace_sub_district_code"];
            this.birthplace_sub_district_name = _data["birthplace_sub_district_name"];
            this.birthplace_district_code = _data["birthplace_district_code"];
            this.birthplace_district_name = _data["birthplace_district_name"];
            this.birthplace_city_code = _data["birthplace_city_code"];
            this.birthplace_city_name = _data["birthplace_city_name"];
            this.part_code = _data["part_code"];
            this.part_name = _data["part_name"];
            this.date_join_company = _data["date_join_company"] ? moment.parseZone(_data["date_join_company"].toString()) : <any>undefined;
            this.date_join_company_f = _data["date_join_company_f"];
            this.date_quit_company = _data["date_quit_company"] ? moment.parseZone(_data["date_quit_company"].toString()) : <any>undefined;
            this.date_quit_company_f = _data["date_quit_company_f"];
            this.work_day = _data["work_day"];
            this.salary = _data["salary"];
            this.level = _data["level"];
            this.is_show_list_employee = _data["is_show_list_employee"];
            this.group_account_code = _data["group_account_code"];
            this.tbName = _data["tbName"];
            this.work_shifts = _data["work_shifts"];
            this.signature = _data["signature"];
            this.xml_academic = _data["xml_academic"];
            this.xml_certificates = _data["xml_certificates"];
            this.xml_bonus = _data["xml_bonus"];
            this.xml_discipline = _data["xml_discipline"];
            this.xml_training = _data["xml_training"];
            this.xml_evaluate = _data["xml_evaluate"];
            this.xml_occupational_accident = _data["xml_occupational_accident"];
            if (Array.isArray(_data["allDay"])) {
                this.allDay = [] as any;
                for (let item of _data["allDay"])
                    this.allDay.push(AllDayModel.fromJS(item));
            }
            if (Array.isArray(_data["hRM_TimeSheet_Work_Shifts"])) {
                this.hRM_TimeSheet_Work_Shifts = [] as any;
                for (let item of _data["hRM_TimeSheet_Work_Shifts"])
                    this.hRM_TimeSheet_Work_Shifts.push(HRM_TimeSheet_Work_Shift_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Academic_Levels"])) {
                this.hRM_Employee_Academic_Levels = [] as any;
                for (let item of _data["hRM_Employee_Academic_Levels"])
                    this.hRM_Employee_Academic_Levels.push(HRM_Employee_Academic_Level_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Certificates"])) {
                this.hRM_Employee_Certificates = [] as any;
                for (let item of _data["hRM_Employee_Certificates"])
                    this.hRM_Employee_Certificates.push(HRM_Employee_Certificate_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Labour_Contracts"])) {
                this.hRM_Employee_Labour_Contracts = [] as any;
                for (let item of _data["hRM_Employee_Labour_Contracts"])
                    this.hRM_Employee_Labour_Contracts.push(HRM_Employee_Labour_Contract_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Labour_Contract_Curriculum_Vitaes"])) {
                this.hRM_Employee_Labour_Contract_Curriculum_Vitaes = [] as any;
                for (let item of _data["hRM_Employee_Labour_Contract_Curriculum_Vitaes"])
                    this.hRM_Employee_Labour_Contract_Curriculum_Vitaes.push(HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Bonus"])) {
                this.hRM_Employee_Bonus = [] as any;
                for (let item of _data["hRM_Employee_Bonus"])
                    this.hRM_Employee_Bonus.push(HRM_Employee_Bonus_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Discipline"])) {
                this.hRM_Employee_Discipline = [] as any;
                for (let item of _data["hRM_Employee_Discipline"])
                    this.hRM_Employee_Discipline.push(HRM_Employee_Discipline_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Training"])) {
                this.hRM_Employee_Training = [] as any;
                for (let item of _data["hRM_Employee_Training"])
                    this.hRM_Employee_Training.push(HRM_Employee_Training_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Evaluates"])) {
                this.hRM_Employee_Evaluates = [] as any;
                for (let item of _data["hRM_Employee_Evaluates"])
                    this.hRM_Employee_Evaluates.push(HRM_Employee_Evaluate_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Occupational_Accidents"])) {
                this.hRM_Employee_Occupational_Accidents = [] as any;
                for (let item of _data["hRM_Employee_Occupational_Accidents"])
                    this.hRM_Employee_Occupational_Accidents.push(HRM_Employee_Occupational_Accident_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Employee_Check_In_Outs"])) {
                this.hRM_Employee_Check_In_Outs = [] as any;
                for (let item of _data["hRM_Employee_Check_In_Outs"])
                    this.hRM_Employee_Check_In_Outs.push(HRM_Employee_Check_In_Out_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HRM_Employee_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["message"] = this.message;
        data["company_code"] = this.company_code;
        data["ref_code"] = this.ref_code;
        data["id_employee"] = this.id_employee;
        data["marital_status_code"] = this.marital_status_code;
        data["marital_status_name"] = this.marital_status_name;
        data["sex_code"] = this.sex_code;
        data["sex_name"] = this.sex_name;
        data["department_code"] = this.department_code;
        data["department_name"] = this.department_name;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["fullName"] = this.fullName;
        data["text"] = this.text;
        data["phone"] = this.phone;
        data["user_login"] = this.user_login;
        data["address_branch"] = this.address_branch;
        data["address_detail"] = this.address_detail;
        data["address_sub_district_code"] = this.address_sub_district_code;
        data["address_sub_district_name"] = this.address_sub_district_name;
        data["address_district_code"] = this.address_district_code;
        data["address_district_name"] = this.address_district_name;
        data["address_city_code"] = this.address_city_code;
        data["address_city_name"] = this.address_city_name;
        data["address_current_detail"] = this.address_current_detail;
        data["address_current_sub_district_code"] = this.address_current_sub_district_code;
        data["address_current_sub_district_name"] = this.address_current_sub_district_name;
        data["address_current_district_code"] = this.address_current_district_code;
        data["address_current_district_name"] = this.address_current_district_name;
        data["address_current_city_code"] = this.address_current_city_code;
        data["address_current_city_name"] = this.address_current_city_name;
        data["social_insurance_number"] = this.social_insurance_number;
        data["date_insurance_number"] = this.date_insurance_number ? this.date_insurance_number.toISOString(true) : <any>undefined;
        data["from_insurance_number"] = this.from_insurance_number;
        data["fax"] = this.fax;
        data["tax"] = this.tax;
        data["bank_account_number"] = this.bank_account_number;
        data["bank_name"] = this.bank_name;
        data["nation"] = this.nation;
        data["religion"] = this.religion;
        data["date_joining_company_union"] = this.date_joining_company_union ? this.date_joining_company_union.toISOString(true) : <any>undefined;
        data["date_joining_company_union_f"] = this.date_joining_company_union_f;
        data["date_joining_communist_party"] = this.date_joining_communist_party ? this.date_joining_communist_party.toISOString(true) : <any>undefined;
        data["date_joining_communist_party_f"] = this.date_joining_communist_party_f;
        data["uniform_size"] = this.uniform_size;
        data["shoes_size"] = this.shoes_size;
        data["trousers_size"] = this.trousers_size;
        data["avarta"] = this.avarta;
        data["avarta_html"] = this.avarta_html;
        data["avarta_base64"] = this.avarta_base64;
        data["avarta_base64_256x256"] = this.avarta_base64_256x256;
        data["id_card"] = this.id_card;
        data["date_create_card"] = this.date_create_card ? this.date_create_card.toISOString(true) : <any>undefined;
        data["from_create_card"] = this.from_create_card;
        data["cccd"] = this.cccd;
        data["date_create_cccd"] = this.date_create_cccd ? this.date_create_cccd.toISOString(true) : <any>undefined;
        data["from_create_cccd"] = this.from_create_cccd;
        data["birthday"] = this.birthday ? this.birthday.toISOString(true) : <any>undefined;
        data["birthday_f"] = this.birthday_f;
        data["title_code"] = this.title_code;
        data["title_name"] = this.title_name;
        data["position_code"] = this.position_code;
        data["position_name"] = this.position_name;
        data["branch_code"] = this.branch_code;
        data["branch_name"] = this.branch_name;
        data["email"] = this.email;
        data["email_company"] = this.email_company;
        data["working_hour_on_month"] = this.working_hour_on_month;
        data["code"] = this.code;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["approve"] = this.approve;
        data["active"] = this.active;
        data["active_name"] = this.active_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_edit"] = this.date_edit ? this.date_edit.toISOString(true) : <any>undefined;
        data["filter_date"] = this.filter_date ? this.filter_date.toISOString(true) : <any>undefined;
        data["notes"] = this.notes;
        data["sub_sign_title_name"] = this.sub_sign_title_name;
        data["type"] = this.type;
        data["birthplace_detail"] = this.birthplace_detail;
        data["birthplace_sub_district_code"] = this.birthplace_sub_district_code;
        data["birthplace_sub_district_name"] = this.birthplace_sub_district_name;
        data["birthplace_district_code"] = this.birthplace_district_code;
        data["birthplace_district_name"] = this.birthplace_district_name;
        data["birthplace_city_code"] = this.birthplace_city_code;
        data["birthplace_city_name"] = this.birthplace_city_name;
        data["part_code"] = this.part_code;
        data["part_name"] = this.part_name;
        data["date_join_company"] = this.date_join_company ? this.date_join_company.toISOString(true) : <any>undefined;
        data["date_join_company_f"] = this.date_join_company_f;
        data["date_quit_company"] = this.date_quit_company ? this.date_quit_company.toISOString(true) : <any>undefined;
        data["date_quit_company_f"] = this.date_quit_company_f;
        data["work_day"] = this.work_day;
        data["salary"] = this.salary;
        data["level"] = this.level;
        data["is_show_list_employee"] = this.is_show_list_employee;
        data["group_account_code"] = this.group_account_code;
        data["tbName"] = this.tbName;
        data["work_shifts"] = this.work_shifts;
        data["signature"] = this.signature;
        data["xml_academic"] = this.xml_academic;
        data["xml_certificates"] = this.xml_certificates;
        data["xml_bonus"] = this.xml_bonus;
        data["xml_discipline"] = this.xml_discipline;
        data["xml_training"] = this.xml_training;
        data["xml_evaluate"] = this.xml_evaluate;
        data["xml_occupational_accident"] = this.xml_occupational_accident;
        if (Array.isArray(this.allDay)) {
            data["allDay"] = [];
            for (let item of this.allDay)
                data["allDay"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_TimeSheet_Work_Shifts)) {
            data["hRM_TimeSheet_Work_Shifts"] = [];
            for (let item of this.hRM_TimeSheet_Work_Shifts)
                data["hRM_TimeSheet_Work_Shifts"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Academic_Levels)) {
            data["hRM_Employee_Academic_Levels"] = [];
            for (let item of this.hRM_Employee_Academic_Levels)
                data["hRM_Employee_Academic_Levels"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Certificates)) {
            data["hRM_Employee_Certificates"] = [];
            for (let item of this.hRM_Employee_Certificates)
                data["hRM_Employee_Certificates"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Labour_Contracts)) {
            data["hRM_Employee_Labour_Contracts"] = [];
            for (let item of this.hRM_Employee_Labour_Contracts)
                data["hRM_Employee_Labour_Contracts"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Labour_Contract_Curriculum_Vitaes)) {
            data["hRM_Employee_Labour_Contract_Curriculum_Vitaes"] = [];
            for (let item of this.hRM_Employee_Labour_Contract_Curriculum_Vitaes)
                data["hRM_Employee_Labour_Contract_Curriculum_Vitaes"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Bonus)) {
            data["hRM_Employee_Bonus"] = [];
            for (let item of this.hRM_Employee_Bonus)
                data["hRM_Employee_Bonus"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Discipline)) {
            data["hRM_Employee_Discipline"] = [];
            for (let item of this.hRM_Employee_Discipline)
                data["hRM_Employee_Discipline"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Training)) {
            data["hRM_Employee_Training"] = [];
            for (let item of this.hRM_Employee_Training)
                data["hRM_Employee_Training"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Evaluates)) {
            data["hRM_Employee_Evaluates"] = [];
            for (let item of this.hRM_Employee_Evaluates)
                data["hRM_Employee_Evaluates"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Occupational_Accidents)) {
            data["hRM_Employee_Occupational_Accidents"] = [];
            for (let item of this.hRM_Employee_Occupational_Accidents)
                data["hRM_Employee_Occupational_Accidents"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Employee_Check_In_Outs)) {
            data["hRM_Employee_Check_In_Outs"] = [];
            for (let item of this.hRM_Employee_Check_In_Outs)
                data["hRM_Employee_Check_In_Outs"].push(item.toJSON());
        }
        return data;
    }

    clone(): HRM_Employee_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_ENTITY {
    id?: number | undefined;
    status?: number | undefined;
    message?: string | undefined;
    company_code?: string | undefined;
    ref_code?: string | undefined;
    id_employee?: string | undefined;
    marital_status_code?: string | undefined;
    marital_status_name?: string | undefined;
    sex_code?: string | undefined;
    sex_name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    fullName?: string | undefined;
    text?: string | undefined;
    phone?: string | undefined;
    user_login?: string | undefined;
    address_branch?: string | undefined;
    address_detail?: string | undefined;
    address_sub_district_code?: string | undefined;
    address_sub_district_name?: string | undefined;
    address_district_code?: string | undefined;
    address_district_name?: string | undefined;
    address_city_code?: string | undefined;
    address_city_name?: string | undefined;
    address_current_detail?: string | undefined;
    address_current_sub_district_code?: string | undefined;
    address_current_sub_district_name?: string | undefined;
    address_current_district_code?: string | undefined;
    address_current_district_name?: string | undefined;
    address_current_city_code?: string | undefined;
    address_current_city_name?: string | undefined;
    social_insurance_number?: string | undefined;
    date_insurance_number?: moment.Moment | undefined;
    from_insurance_number?: string | undefined;
    fax?: string | undefined;
    tax?: string | undefined;
    bank_account_number?: string | undefined;
    bank_name?: string | undefined;
    nation?: string | undefined;
    religion?: string | undefined;
    date_joining_company_union?: moment.Moment | undefined;
    date_joining_company_union_f?: string | undefined;
    date_joining_communist_party?: moment.Moment | undefined;
    date_joining_communist_party_f?: string | undefined;
    uniform_size?: string | undefined;
    shoes_size?: string | undefined;
    trousers_size?: string | undefined;
    avarta?: string | undefined;
    avarta_html?: string | undefined;
    avarta_base64?: string | undefined;
    avarta_base64_256x256?: string | undefined;
    id_card?: string | undefined;
    date_create_card?: moment.Moment | undefined;
    from_create_card?: string | undefined;
    cccd?: string | undefined;
    date_create_cccd?: moment.Moment | undefined;
    from_create_cccd?: string | undefined;
    birthday?: moment.Moment | undefined;
    birthday_f?: string | undefined;
    title_code?: string | undefined;
    title_name?: string | undefined;
    position_code?: string | undefined;
    position_name?: string | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    email?: string | undefined;
    email_company?: string | undefined;
    working_hour_on_month?: number | undefined;
    code?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    approve?: boolean | undefined;
    active?: boolean | undefined;
    active_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_edit?: moment.Moment | undefined;
    filter_date?: moment.Moment | undefined;
    notes?: string | undefined;
    sub_sign_title_name?: string | undefined;
    type?: string | undefined;
    birthplace_detail?: string | undefined;
    birthplace_sub_district_code?: string | undefined;
    birthplace_sub_district_name?: string | undefined;
    birthplace_district_code?: string | undefined;
    birthplace_district_name?: string | undefined;
    birthplace_city_code?: string | undefined;
    birthplace_city_name?: string | undefined;
    part_code?: string | undefined;
    part_name?: string | undefined;
    date_join_company?: moment.Moment | undefined;
    date_join_company_f?: string | undefined;
    date_quit_company?: moment.Moment | undefined;
    date_quit_company_f?: string | undefined;
    work_day?: number | undefined;
    salary?: number | undefined;
    level?: number | undefined;
    is_show_list_employee?: boolean | undefined;
    group_account_code?: string | undefined;
    tbName?: string | undefined;
    work_shifts?: string | undefined;
    signature?: string | undefined;
    xml_academic?: string | undefined;
    xml_certificates?: string | undefined;
    xml_bonus?: string | undefined;
    xml_discipline?: string | undefined;
    xml_training?: string | undefined;
    xml_evaluate?: string | undefined;
    xml_occupational_accident?: string | undefined;
    allDay?: AllDayModel[] | undefined;
    hRM_TimeSheet_Work_Shifts?: HRM_TimeSheet_Work_Shift_ENTITY[] | undefined;
    hRM_Employee_Academic_Levels?: HRM_Employee_Academic_Level_ENTITY[] | undefined;
    hRM_Employee_Certificates?: HRM_Employee_Certificate_ENTITY[] | undefined;
    hRM_Employee_Labour_Contracts?: HRM_Employee_Labour_Contract_ENTITY[] | undefined;
    hRM_Employee_Labour_Contract_Curriculum_Vitaes?: HRM_Employee_Labour_Contract_Curriculum_Vitae_ENTITY[] | undefined;
    hRM_Employee_Bonus?: HRM_Employee_Bonus_ENTITY[] | undefined;
    hRM_Employee_Discipline?: HRM_Employee_Discipline_ENTITY[] | undefined;
    hRM_Employee_Training?: HRM_Employee_Training_ENTITY[] | undefined;
    hRM_Employee_Evaluates?: HRM_Employee_Evaluate_ENTITY[] | undefined;
    hRM_Employee_Occupational_Accidents?: HRM_Employee_Occupational_Accident_ENTITY[] | undefined;
    hRM_Employee_Check_In_Outs?: HRM_Employee_Check_In_Out_ENTITY[] | undefined;
}

export class HRM_Employee_Marital_Status_ENTITY implements IHRM_Employee_Marital_Status_ENTITY {
    id?: number;
    code?: string | undefined;
    name_vn?: string | undefined;
    name_en?: string | undefined;

    constructor(data?: IHRM_Employee_Marital_Status_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name_vn = _data["name_vn"];
            this.name_en = _data["name_en"];
        }
    }

    static fromJS(data: any): HRM_Employee_Marital_Status_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Marital_Status_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name_vn"] = this.name_vn;
        data["name_en"] = this.name_en;
        return data;
    }

    clone(): HRM_Employee_Marital_Status_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Marital_Status_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Marital_Status_ENTITY {
    id?: number;
    code?: string | undefined;
    name_vn?: string | undefined;
    name_en?: string | undefined;
}

export class HRM_District_City_ENTITY implements IHRM_District_City_ENTITY {
    id?: number;
    code?: string | undefined;
    city?: string | undefined;
    city_id?: string | undefined;
    district?: string | undefined;
    district_id?: string | undefined;
    sub_district?: string | undefined;
    sub_district_id?: string | undefined;
    type?: string | undefined;

    constructor(data?: IHRM_District_City_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.city = _data["city"];
            this.city_id = _data["city_id"];
            this.district = _data["district"];
            this.district_id = _data["district_id"];
            this.sub_district = _data["sub_district"];
            this.sub_district_id = _data["sub_district_id"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): HRM_District_City_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_District_City_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["city"] = this.city;
        data["city_id"] = this.city_id;
        data["district"] = this.district;
        data["district_id"] = this.district_id;
        data["sub_district"] = this.sub_district;
        data["sub_district_id"] = this.sub_district_id;
        data["type"] = this.type;
        return data;
    }

    clone(): HRM_District_City_ENTITY {
        const json = this.toJSON();
        let result = new HRM_District_City_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_District_City_ENTITY {
    id?: number;
    code?: string | undefined;
    city?: string | undefined;
    city_id?: string | undefined;
    district?: string | undefined;
    district_id?: string | undefined;
    sub_district?: string | undefined;
    sub_district_id?: string | undefined;
    type?: string | undefined;
}

export class Part_ENTITY implements IPart_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IPart_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Part_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Part_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): Part_ENTITY {
        const json = this.toJSON();
        let result = new Part_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IPart_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
}

export class HRM_Employee_Labour_Contract_Type_ENTITY implements IHRM_Employee_Labour_Contract_Type_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    is_check_in_out?: boolean | undefined;

    constructor(data?: IHRM_Employee_Labour_Contract_Type_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.is_check_in_out = _data["is_check_in_out"];
        }
    }

    static fromJS(data: any): HRM_Employee_Labour_Contract_Type_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Labour_Contract_Type_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["is_check_in_out"] = this.is_check_in_out;
        return data;
    }

    clone(): HRM_Employee_Labour_Contract_Type_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Labour_Contract_Type_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Labour_Contract_Type_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    is_check_in_out?: boolean | undefined;
}

export class ReportModel implements IReportModel {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    type_file?: string | undefined;
    path_files?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;

    constructor(data?: IReportModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.employee_code = _data["employee_code"];
            this.type_file = _data["type_file"];
            this.path_files = _data["path_files"];
            this.status = _data["status"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ReportModel {
        data = typeof data === 'object' ? data : {};
        let result = new ReportModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["employee_code"] = this.employee_code;
        data["type_file"] = this.type_file;
        data["path_files"] = this.path_files;
        data["status"] = this.status;
        data["message"] = this.message;
        return data;
    }

    clone(): ReportModel {
        const json = this.toJSON();
        let result = new ReportModel();
        result.init(json);
        return result;
    }
}

export interface IReportModel {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    type_file?: string | undefined;
    path_files?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;
}

export class HRM_Employee_Check_In_Out_Warning_ENTITY implements IHRM_Employee_Check_In_Out_Warning_ENTITY {
    employee_name?: string | undefined;
    list_datas?: HRM_Employee_Check_In_Out_ENTITY[] | undefined;

    constructor(data?: IHRM_Employee_Check_In_Out_Warning_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employee_name = _data["employee_name"];
            if (Array.isArray(_data["list_datas"])) {
                this.list_datas = [] as any;
                for (let item of _data["list_datas"])
                    this.list_datas.push(HRM_Employee_Check_In_Out_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HRM_Employee_Check_In_Out_Warning_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Check_In_Out_Warning_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employee_name"] = this.employee_name;
        if (Array.isArray(this.list_datas)) {
            data["list_datas"] = [];
            for (let item of this.list_datas)
                data["list_datas"].push(item.toJSON());
        }
        return data;
    }

    clone(): HRM_Employee_Check_In_Out_Warning_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Check_In_Out_Warning_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Check_In_Out_Warning_ENTITY {
    employee_name?: string | undefined;
    list_datas?: HRM_Employee_Check_In_Out_ENTITY[] | undefined;
}

export class FaceInfoFaceTrainingUpdate implements IFaceInfoFaceTrainingUpdate {
    img_left_age?: number | undefined;
    img_left_gender?: string | undefined;
    img_right_age?: number | undefined;
    img_right_gender?: string | undefined;
    img_top_age?: number | undefined;
    img_top_gender?: string | undefined;
    img_bottom_age?: number | undefined;
    img_bottom_gender?: string | undefined;
    img_left_gender_probability?: number | undefined;
    img_right_gender_probability?: number | undefined;
    img_top_gender_probability?: number | undefined;
    img_bottom_gender_probability?: number | undefined;
    employee_code?: string | undefined;

    constructor(data?: IFaceInfoFaceTrainingUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.img_left_age = _data["img_left_age"];
            this.img_left_gender = _data["img_left_gender"];
            this.img_right_age = _data["img_right_age"];
            this.img_right_gender = _data["img_right_gender"];
            this.img_top_age = _data["img_top_age"];
            this.img_top_gender = _data["img_top_gender"];
            this.img_bottom_age = _data["img_bottom_age"];
            this.img_bottom_gender = _data["img_bottom_gender"];
            this.img_left_gender_probability = _data["img_left_gender_probability"];
            this.img_right_gender_probability = _data["img_right_gender_probability"];
            this.img_top_gender_probability = _data["img_top_gender_probability"];
            this.img_bottom_gender_probability = _data["img_bottom_gender_probability"];
            this.employee_code = _data["employee_code"];
        }
    }

    static fromJS(data: any): FaceInfoFaceTrainingUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new FaceInfoFaceTrainingUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["img_left_age"] = this.img_left_age;
        data["img_left_gender"] = this.img_left_gender;
        data["img_right_age"] = this.img_right_age;
        data["img_right_gender"] = this.img_right_gender;
        data["img_top_age"] = this.img_top_age;
        data["img_top_gender"] = this.img_top_gender;
        data["img_bottom_age"] = this.img_bottom_age;
        data["img_bottom_gender"] = this.img_bottom_gender;
        data["img_left_gender_probability"] = this.img_left_gender_probability;
        data["img_right_gender_probability"] = this.img_right_gender_probability;
        data["img_top_gender_probability"] = this.img_top_gender_probability;
        data["img_bottom_gender_probability"] = this.img_bottom_gender_probability;
        data["employee_code"] = this.employee_code;
        return data;
    }

    clone(): FaceInfoFaceTrainingUpdate {
        const json = this.toJSON();
        let result = new FaceInfoFaceTrainingUpdate();
        result.init(json);
        return result;
    }
}

export interface IFaceInfoFaceTrainingUpdate {
    img_left_age?: number | undefined;
    img_left_gender?: string | undefined;
    img_right_age?: number | undefined;
    img_right_gender?: string | undefined;
    img_top_age?: number | undefined;
    img_top_gender?: string | undefined;
    img_bottom_age?: number | undefined;
    img_bottom_gender?: string | undefined;
    img_left_gender_probability?: number | undefined;
    img_right_gender_probability?: number | undefined;
    img_top_gender_probability?: number | undefined;
    img_bottom_gender_probability?: number | undefined;
    employee_code?: string | undefined;
}

export class ResposeModel implements IResposeModel {
    status?: number;
    distance?: number | undefined;
    age?: number | undefined;
    gender?: string | undefined;
    message?: string | undefined;

    constructor(data?: IResposeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.distance = _data["distance"];
            this.age = _data["age"];
            this.gender = _data["gender"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ResposeModel {
        data = typeof data === 'object' ? data : {};
        let result = new ResposeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["distance"] = this.distance;
        data["age"] = this.age;
        data["gender"] = this.gender;
        data["message"] = this.message;
        return data;
    }

    clone(): ResposeModel {
        const json = this.toJSON();
        let result = new ResposeModel();
        result.init(json);
        return result;
    }
}

export interface IResposeModel {
    status?: number;
    distance?: number | undefined;
    age?: number | undefined;
    gender?: string | undefined;
    message?: string | undefined;
}

export class HRM_Employee_Report_Salary_Employee_ENTITY implements IHRM_Employee_Report_Salary_Employee_ENTITY {
    account_id?: number | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    code?: string | undefined;
    department_name?: string | undefined;
    hour_working?: number | undefined;
    id?: number | undefined;
    is_info?: string | undefined;
    name?: string | undefined;
    persent_working?: number | undefined;
    sum_standard?: number | undefined;
    total_work_day_minus?: number | undefined;
    total_salary?: number | undefined;
    work_shifts?: string | undefined;
    is_use?: boolean | undefined;
    sum_salary_by_work_day?: number | undefined;
    sum_work_day_practical?: number | undefined;

    constructor(data?: IHRM_Employee_Report_Salary_Employee_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.account_id = _data["account_id"];
            this.branch_code = _data["branch_code"];
            this.branch_name = _data["branch_name"];
            this.code = _data["code"];
            this.department_name = _data["department_name"];
            this.hour_working = _data["hour_working"];
            this.id = _data["id"];
            this.is_info = _data["is_info"];
            this.name = _data["name"];
            this.persent_working = _data["persent_working"];
            this.sum_standard = _data["sum_standard"];
            this.total_work_day_minus = _data["total_work_day_minus"];
            this.total_salary = _data["total_salary"];
            this.work_shifts = _data["work_shifts"];
            this.is_use = _data["is_use"];
            this.sum_salary_by_work_day = _data["sum_salary_by_work_day"];
            this.sum_work_day_practical = _data["sum_work_day_practical"];
        }
    }

    static fromJS(data: any): HRM_Employee_Report_Salary_Employee_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Report_Salary_Employee_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["account_id"] = this.account_id;
        data["branch_code"] = this.branch_code;
        data["branch_name"] = this.branch_name;
        data["code"] = this.code;
        data["department_name"] = this.department_name;
        data["hour_working"] = this.hour_working;
        data["id"] = this.id;
        data["is_info"] = this.is_info;
        data["name"] = this.name;
        data["persent_working"] = this.persent_working;
        data["sum_standard"] = this.sum_standard;
        data["total_work_day_minus"] = this.total_work_day_minus;
        data["total_salary"] = this.total_salary;
        data["work_shifts"] = this.work_shifts;
        data["is_use"] = this.is_use;
        data["sum_salary_by_work_day"] = this.sum_salary_by_work_day;
        data["sum_work_day_practical"] = this.sum_work_day_practical;
        return data;
    }

    clone(): HRM_Employee_Report_Salary_Employee_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Report_Salary_Employee_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Report_Salary_Employee_ENTITY {
    account_id?: number | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    code?: string | undefined;
    department_name?: string | undefined;
    hour_working?: number | undefined;
    id?: number | undefined;
    is_info?: string | undefined;
    name?: string | undefined;
    persent_working?: number | undefined;
    sum_standard?: number | undefined;
    total_work_day_minus?: number | undefined;
    total_salary?: number | undefined;
    work_shifts?: string | undefined;
    is_use?: boolean | undefined;
    sum_salary_by_work_day?: number | undefined;
    sum_work_day_practical?: number | undefined;
}

export class HRM_Employee_Report_Salary_ENTITY implements IHRM_Employee_Report_Salary_ENTITY {
    path?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    end_datetime?: moment.Moment | undefined;
    status?: number | undefined;
    message?: string | undefined;
    list_salary_employees?: HRM_Employee_Report_Salary_Employee_ENTITY[] | undefined;

    constructor(data?: IHRM_Employee_Report_Salary_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.path = _data["path"];
            this.start_datetime = _data["start_datetime"] ? moment.parseZone(_data["start_datetime"].toString()) : <any>undefined;
            this.end_datetime = _data["end_datetime"] ? moment.parseZone(_data["end_datetime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.message = _data["message"];
            if (Array.isArray(_data["list_salary_employees"])) {
                this.list_salary_employees = [] as any;
                for (let item of _data["list_salary_employees"])
                    this.list_salary_employees.push(HRM_Employee_Report_Salary_Employee_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HRM_Employee_Report_Salary_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Report_Salary_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        data["start_datetime"] = this.start_datetime ? this.start_datetime.toISOString(true) : <any>undefined;
        data["end_datetime"] = this.end_datetime ? this.end_datetime.toISOString(true) : <any>undefined;
        data["status"] = this.status;
        data["message"] = this.message;
        if (Array.isArray(this.list_salary_employees)) {
            data["list_salary_employees"] = [];
            for (let item of this.list_salary_employees)
                data["list_salary_employees"].push(item.toJSON());
        }
        return data;
    }

    clone(): HRM_Employee_Report_Salary_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Report_Salary_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Report_Salary_ENTITY {
    path?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    end_datetime?: moment.Moment | undefined;
    status?: number | undefined;
    message?: string | undefined;
    list_salary_employees?: HRM_Employee_Report_Salary_Employee_ENTITY[] | undefined;
}

export class ERPCommon_ENTITY implements IERPCommon_ENTITY {
    company_code?: string | undefined;
    account_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
    voucher_date?: moment.Moment;

    constructor(data?: IERPCommon_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.company_code = _data["company_code"];
            this.account_code = _data["account_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_year = _data["voucher_year"];
            this.language_id = _data["language_id"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ERPCommon_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new ERPCommon_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company_code"] = this.company_code;
        data["account_code"] = this.account_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["voucher_year"] = this.voucher_year;
        data["language_id"] = this.language_id;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        return data;
    }

    clone(): ERPCommon_ENTITY {
        const json = this.toJSON();
        let result = new ERPCommon_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IERPCommon_ENTITY {
    company_code?: string | undefined;
    account_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
    voucher_date?: moment.Moment;
}

export class SYS_List_Voucher_Detail_ENTITY implements ISYS_List_Voucher_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    block_to_date?: moment.Moment | undefined;
    block_to_date_str?: string | undefined;
    module_code?: string | undefined;
    module_name?: string | undefined;
    voucher_code?: string | undefined;
    voucher_name?: string | undefined;
    company_code?: string | undefined;
    company_name?: string | undefined;

    constructor(data?: ISYS_List_Voucher_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.block_to_date = _data["block_to_date"] ? moment.parseZone(_data["block_to_date"].toString()) : <any>undefined;
            this.block_to_date_str = _data["block_to_date_str"];
            this.module_code = _data["module_code"];
            this.module_name = _data["module_name"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_name = _data["voucher_name"];
            this.company_code = _data["company_code"];
            this.company_name = _data["company_name"];
        }
    }

    static fromJS(data: any): SYS_List_Voucher_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_List_Voucher_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["block_to_date"] = this.block_to_date ? this.block_to_date.toISOString(true) : <any>undefined;
        data["block_to_date_str"] = this.block_to_date_str;
        data["module_code"] = this.module_code;
        data["module_name"] = this.module_name;
        data["voucher_code"] = this.voucher_code;
        data["voucher_name"] = this.voucher_name;
        data["company_code"] = this.company_code;
        data["company_name"] = this.company_name;
        return data;
    }

    clone(): SYS_List_Voucher_Detail_ENTITY {
        const json = this.toJSON();
        let result = new SYS_List_Voucher_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_List_Voucher_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    block_to_date?: moment.Moment | undefined;
    block_to_date_str?: string | undefined;
    module_code?: string | undefined;
    module_name?: string | undefined;
    voucher_code?: string | undefined;
    voucher_name?: string | undefined;
    company_code?: string | undefined;
    company_name?: string | undefined;
}

export class SYS_List_Voucher_ENTITY implements ISYS_List_Voucher_ENTITY {
    id?: number;
    identity_curent?: number | undefined;
    block_type?: number | undefined;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_name?: string | undefined;
    name?: string | undefined;
    company_code?: string | undefined;
    company_name?: string | undefined;
    format?: string | undefined;
    starts_with_m?: string | undefined;
    starts_with_d?: string | undefined;
    key_table?: string | undefined;
    col_voucher_date?: string | undefined;
    start_voucher_date?: moment.Moment | undefined;
    is_gen_by_date?: boolean | undefined;
    block_to_date?: moment.Moment | undefined;
    block_to_date_str?: string | undefined;
    module_code?: string | undefined;
    module_name?: string | undefined;
    xml?: string | undefined;
    language_id?: number | undefined;
    voucher_details?: SYS_List_Voucher_Detail_ENTITY[] | undefined;

    constructor(data?: ISYS_List_Voucher_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.identity_curent = _data["identity_curent"];
            this.block_type = _data["block_type"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_name = _data["voucher_name"];
            this.name = _data["name"];
            this.company_code = _data["company_code"];
            this.company_name = _data["company_name"];
            this.format = _data["format"];
            this.starts_with_m = _data["starts_with_m"];
            this.starts_with_d = _data["starts_with_d"];
            this.key_table = _data["key_table"];
            this.col_voucher_date = _data["col_voucher_date"];
            this.start_voucher_date = _data["start_voucher_date"] ? moment.parseZone(_data["start_voucher_date"].toString()) : <any>undefined;
            this.is_gen_by_date = _data["is_gen_by_date"];
            this.block_to_date = _data["block_to_date"] ? moment.parseZone(_data["block_to_date"].toString()) : <any>undefined;
            this.block_to_date_str = _data["block_to_date_str"];
            this.module_code = _data["module_code"];
            this.module_name = _data["module_name"];
            this.xml = _data["xml"];
            this.language_id = _data["language_id"];
            if (Array.isArray(_data["voucher_details"])) {
                this.voucher_details = [] as any;
                for (let item of _data["voucher_details"])
                    this.voucher_details.push(SYS_List_Voucher_Detail_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SYS_List_Voucher_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_List_Voucher_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["identity_curent"] = this.identity_curent;
        data["block_type"] = this.block_type;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_name"] = this.voucher_name;
        data["name"] = this.name;
        data["company_code"] = this.company_code;
        data["company_name"] = this.company_name;
        data["format"] = this.format;
        data["starts_with_m"] = this.starts_with_m;
        data["starts_with_d"] = this.starts_with_d;
        data["key_table"] = this.key_table;
        data["col_voucher_date"] = this.col_voucher_date;
        data["start_voucher_date"] = this.start_voucher_date ? this.start_voucher_date.toISOString(true) : <any>undefined;
        data["is_gen_by_date"] = this.is_gen_by_date;
        data["block_to_date"] = this.block_to_date ? this.block_to_date.toISOString(true) : <any>undefined;
        data["block_to_date_str"] = this.block_to_date_str;
        data["module_code"] = this.module_code;
        data["module_name"] = this.module_name;
        data["xml"] = this.xml;
        data["language_id"] = this.language_id;
        if (Array.isArray(this.voucher_details)) {
            data["voucher_details"] = [];
            for (let item of this.voucher_details)
                data["voucher_details"].push(item.toJSON());
        }
        return data;
    }

    clone(): SYS_List_Voucher_ENTITY {
        const json = this.toJSON();
        let result = new SYS_List_Voucher_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_List_Voucher_ENTITY {
    id?: number;
    identity_curent?: number | undefined;
    block_type?: number | undefined;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_name?: string | undefined;
    name?: string | undefined;
    company_code?: string | undefined;
    company_name?: string | undefined;
    format?: string | undefined;
    starts_with_m?: string | undefined;
    starts_with_d?: string | undefined;
    key_table?: string | undefined;
    col_voucher_date?: string | undefined;
    start_voucher_date?: moment.Moment | undefined;
    is_gen_by_date?: boolean | undefined;
    block_to_date?: moment.Moment | undefined;
    block_to_date_str?: string | undefined;
    module_code?: string | undefined;
    module_name?: string | undefined;
    xml?: string | undefined;
    language_id?: number | undefined;
    voucher_details?: SYS_List_Voucher_Detail_ENTITY[] | undefined;
}

export class SYS_Language_Translate_ENTITY implements ISYS_Language_Translate_ENTITY {
    id?: number;
    code?: string | undefined;
    language_key?: string | undefined;
    language_id?: number | undefined;
    name_vn?: string | undefined;
    name_en?: string | undefined;
    type?: string | undefined;

    constructor(data?: ISYS_Language_Translate_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.language_key = _data["language_key"];
            this.language_id = _data["language_id"];
            this.name_vn = _data["name_vn"];
            this.name_en = _data["name_en"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): SYS_Language_Translate_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Language_Translate_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["language_key"] = this.language_key;
        data["language_id"] = this.language_id;
        data["name_vn"] = this.name_vn;
        data["name_en"] = this.name_en;
        data["type"] = this.type;
        return data;
    }

    clone(): SYS_Language_Translate_ENTITY {
        const json = this.toJSON();
        let result = new SYS_Language_Translate_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_Language_Translate_ENTITY {
    id?: number;
    code?: string | undefined;
    language_key?: string | undefined;
    language_id?: number | undefined;
    name_vn?: string | undefined;
    name_en?: string | undefined;
    type?: string | undefined;
}

export class SYS_Voucher_Year_ENTITY implements ISYS_Voucher_Year_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    year?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;

    constructor(data?: ISYS_Voucher_Year_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.year = _data["year"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): SYS_Voucher_Year_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Voucher_Year_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["year"] = this.year;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): SYS_Voucher_Year_ENTITY {
        const json = this.toJSON();
        let result = new SYS_Voucher_Year_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_Voucher_Year_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    year?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
}

export class ExportModdel implements IExportModdel {
    header?: string[] | undefined;
    title?: string | undefined;
    stored?: string | undefined;
    filter?: string | undefined;
    type?: string | undefined;
    key_connect?: string | undefined;
    data?: any | undefined;

    constructor(data?: IExportModdel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["header"])) {
                this.header = [] as any;
                for (let item of _data["header"])
                    this.header.push(item);
            }
            this.title = _data["title"];
            this.stored = _data["stored"];
            this.filter = _data["filter"];
            this.type = _data["type"];
            this.key_connect = _data["key_connect"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): ExportModdel {
        data = typeof data === 'object' ? data : {};
        let result = new ExportModdel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.header)) {
            data["header"] = [];
            for (let item of this.header)
                data["header"].push(item);
        }
        data["title"] = this.title;
        data["stored"] = this.stored;
        data["filter"] = this.filter;
        data["type"] = this.type;
        data["key_connect"] = this.key_connect;
        data["data"] = this.data;
        return data;
    }

    clone(): ExportModdel {
        const json = this.toJSON();
        let result = new ExportModdel();
        result.init(json);
        return result;
    }
}

export interface IExportModdel {
    header?: string[] | undefined;
    title?: string | undefined;
    stored?: string | undefined;
    filter?: string | undefined;
    type?: string | undefined;
    key_connect?: string | undefined;
    data?: any | undefined;
}

export class SYS_List_Company_ENTITY implements ISYS_List_Company_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    domain?: string | undefined;
    api?: string | undefined;
    api_ai?: string | undefined;
    address?: string | undefined;
    mail_domain?: string | undefined;
    domain_webapp?: string | undefined;
    isLogin?: boolean | undefined;
    tax?: string | undefined;
    birth_day?: moment.Moment | undefined;
    phone?: string | undefined;
    tel?: string | undefined;
    hotline?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ISYS_List_Company_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.domain = _data["domain"];
            this.api = _data["api"];
            this.api_ai = _data["api_ai"];
            this.address = _data["address"];
            this.mail_domain = _data["mail_domain"];
            this.domain_webapp = _data["domain_webapp"];
            this.isLogin = _data["isLogin"];
            this.tax = _data["tax"];
            this.birth_day = _data["birth_day"] ? moment.parseZone(_data["birth_day"].toString()) : <any>undefined;
            this.phone = _data["phone"];
            this.tel = _data["tel"];
            this.hotline = _data["hotline"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): SYS_List_Company_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_List_Company_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["domain"] = this.domain;
        data["api"] = this.api;
        data["api_ai"] = this.api_ai;
        data["address"] = this.address;
        data["mail_domain"] = this.mail_domain;
        data["domain_webapp"] = this.domain_webapp;
        data["isLogin"] = this.isLogin;
        data["tax"] = this.tax;
        data["birth_day"] = this.birth_day ? this.birth_day.toISOString(true) : <any>undefined;
        data["phone"] = this.phone;
        data["tel"] = this.tel;
        data["hotline"] = this.hotline;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): SYS_List_Company_ENTITY {
        const json = this.toJSON();
        let result = new SYS_List_Company_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_List_Company_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    domain?: string | undefined;
    api?: string | undefined;
    api_ai?: string | undefined;
    address?: string | undefined;
    mail_domain?: string | undefined;
    domain_webapp?: string | undefined;
    isLogin?: boolean | undefined;
    tax?: string | undefined;
    birth_day?: moment.Moment | undefined;
    phone?: string | undefined;
    tel?: string | undefined;
    hotline?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class HRM_Branch_Detail_ENTITY implements IHRM_Branch_Detail_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    work_shift_code?: string | undefined;
    start_time?: moment.Moment | undefined;
    end_time?: moment.Moment | undefined;
    total_time?: number | undefined;
    name?: string | undefined;
    relax?: number | undefined;
    hour_start_relax?: number | undefined;
    hour_end_relax?: number | undefined;
    start_relax?: moment.Moment | undefined;
    end_relax?: moment.Moment | undefined;
    is_apply?: boolean | undefined;
    apply_name?: string | undefined;

    constructor(data?: IHRM_Branch_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.work_shift_code = _data["work_shift_code"];
            this.start_time = _data["start_time"] ? moment.parseZone(_data["start_time"].toString()) : <any>undefined;
            this.end_time = _data["end_time"] ? moment.parseZone(_data["end_time"].toString()) : <any>undefined;
            this.total_time = _data["total_time"];
            this.name = _data["name"];
            this.relax = _data["relax"];
            this.hour_start_relax = _data["hour_start_relax"];
            this.hour_end_relax = _data["hour_end_relax"];
            this.start_relax = _data["start_relax"] ? moment.parseZone(_data["start_relax"].toString()) : <any>undefined;
            this.end_relax = _data["end_relax"] ? moment.parseZone(_data["end_relax"].toString()) : <any>undefined;
            this.is_apply = _data["is_apply"];
            this.apply_name = _data["apply_name"];
        }
    }

    static fromJS(data: any): HRM_Branch_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Branch_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["work_shift_code"] = this.work_shift_code;
        data["start_time"] = this.start_time ? this.start_time.toISOString(true) : <any>undefined;
        data["end_time"] = this.end_time ? this.end_time.toISOString(true) : <any>undefined;
        data["total_time"] = this.total_time;
        data["name"] = this.name;
        data["relax"] = this.relax;
        data["hour_start_relax"] = this.hour_start_relax;
        data["hour_end_relax"] = this.hour_end_relax;
        data["start_relax"] = this.start_relax ? this.start_relax.toISOString(true) : <any>undefined;
        data["end_relax"] = this.end_relax ? this.end_relax.toISOString(true) : <any>undefined;
        data["is_apply"] = this.is_apply;
        data["apply_name"] = this.apply_name;
        return data;
    }

    clone(): HRM_Branch_Detail_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Branch_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Branch_Detail_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    work_shift_code?: string | undefined;
    start_time?: moment.Moment | undefined;
    end_time?: moment.Moment | undefined;
    total_time?: number | undefined;
    name?: string | undefined;
    relax?: number | undefined;
    hour_start_relax?: number | undefined;
    hour_end_relax?: number | undefined;
    start_relax?: moment.Moment | undefined;
    end_relax?: moment.Moment | undefined;
    is_apply?: boolean | undefined;
    apply_name?: string | undefined;
}

export class HRM_Branch_ENTITY implements IHRM_Branch_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    company_symbol?: string | undefined;
    name?: string | undefined;
    name1?: string | undefined;
    name2?: string | undefined;
    address?: string | undefined;
    type?: string | undefined;
    url_logo?: string | undefined;
    lat?: number | undefined;
    long?: number | undefined;
    distance?: number | undefined;
    max_dif_face?: number | undefined;
    is_mo?: boolean | undefined;
    from_mo?: moment.Moment | undefined;
    to_mo?: moment.Moment | undefined;
    is_tu?: boolean | undefined;
    from_tu?: moment.Moment | undefined;
    to_tu?: moment.Moment | undefined;
    is_we?: boolean | undefined;
    from_we?: moment.Moment | undefined;
    to_we?: moment.Moment | undefined;
    is_th?: boolean | undefined;
    from_th?: moment.Moment | undefined;
    to_th?: moment.Moment | undefined;
    is_fr?: boolean | undefined;
    from_fr?: moment.Moment | undefined;
    to_fr?: moment.Moment | undefined;
    is_sa?: boolean | undefined;
    from_sa?: moment.Moment | undefined;
    to_sa?: moment.Moment | undefined;
    is_su?: boolean | undefined;
    from_su?: moment.Moment | undefined;
    to_su?: moment.Moment | undefined;
    tax?: string | undefined;
    birth_day?: moment.Moment | undefined;
    phone?: string | undefined;
    tel?: string | undefined;
    hotline?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    hRM_Branch_Details?: HRM_Branch_Detail_ENTITY[] | undefined;

    constructor(data?: IHRM_Branch_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.company_symbol = _data["company_symbol"];
            this.name = _data["name"];
            this.name1 = _data["name1"];
            this.name2 = _data["name2"];
            this.address = _data["address"];
            this.type = _data["type"];
            this.url_logo = _data["url_logo"];
            this.lat = _data["lat"];
            this.long = _data["long"];
            this.distance = _data["distance"];
            this.max_dif_face = _data["max_dif_face"];
            this.is_mo = _data["is_mo"];
            this.from_mo = _data["from_mo"] ? moment.parseZone(_data["from_mo"].toString()) : <any>undefined;
            this.to_mo = _data["to_mo"] ? moment.parseZone(_data["to_mo"].toString()) : <any>undefined;
            this.is_tu = _data["is_tu"];
            this.from_tu = _data["from_tu"] ? moment.parseZone(_data["from_tu"].toString()) : <any>undefined;
            this.to_tu = _data["to_tu"] ? moment.parseZone(_data["to_tu"].toString()) : <any>undefined;
            this.is_we = _data["is_we"];
            this.from_we = _data["from_we"] ? moment.parseZone(_data["from_we"].toString()) : <any>undefined;
            this.to_we = _data["to_we"] ? moment.parseZone(_data["to_we"].toString()) : <any>undefined;
            this.is_th = _data["is_th"];
            this.from_th = _data["from_th"] ? moment.parseZone(_data["from_th"].toString()) : <any>undefined;
            this.to_th = _data["to_th"] ? moment.parseZone(_data["to_th"].toString()) : <any>undefined;
            this.is_fr = _data["is_fr"];
            this.from_fr = _data["from_fr"] ? moment.parseZone(_data["from_fr"].toString()) : <any>undefined;
            this.to_fr = _data["to_fr"] ? moment.parseZone(_data["to_fr"].toString()) : <any>undefined;
            this.is_sa = _data["is_sa"];
            this.from_sa = _data["from_sa"] ? moment.parseZone(_data["from_sa"].toString()) : <any>undefined;
            this.to_sa = _data["to_sa"] ? moment.parseZone(_data["to_sa"].toString()) : <any>undefined;
            this.is_su = _data["is_su"];
            this.from_su = _data["from_su"] ? moment.parseZone(_data["from_su"].toString()) : <any>undefined;
            this.to_su = _data["to_su"] ? moment.parseZone(_data["to_su"].toString()) : <any>undefined;
            this.tax = _data["tax"];
            this.birth_day = _data["birth_day"] ? moment.parseZone(_data["birth_day"].toString()) : <any>undefined;
            this.phone = _data["phone"];
            this.tel = _data["tel"];
            this.hotline = _data["hotline"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            if (Array.isArray(_data["hRM_Branch_Details"])) {
                this.hRM_Branch_Details = [] as any;
                for (let item of _data["hRM_Branch_Details"])
                    this.hRM_Branch_Details.push(HRM_Branch_Detail_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HRM_Branch_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Branch_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["company_symbol"] = this.company_symbol;
        data["name"] = this.name;
        data["name1"] = this.name1;
        data["name2"] = this.name2;
        data["address"] = this.address;
        data["type"] = this.type;
        data["url_logo"] = this.url_logo;
        data["lat"] = this.lat;
        data["long"] = this.long;
        data["distance"] = this.distance;
        data["max_dif_face"] = this.max_dif_face;
        data["is_mo"] = this.is_mo;
        data["from_mo"] = this.from_mo ? this.from_mo.toISOString(true) : <any>undefined;
        data["to_mo"] = this.to_mo ? this.to_mo.toISOString(true) : <any>undefined;
        data["is_tu"] = this.is_tu;
        data["from_tu"] = this.from_tu ? this.from_tu.toISOString(true) : <any>undefined;
        data["to_tu"] = this.to_tu ? this.to_tu.toISOString(true) : <any>undefined;
        data["is_we"] = this.is_we;
        data["from_we"] = this.from_we ? this.from_we.toISOString(true) : <any>undefined;
        data["to_we"] = this.to_we ? this.to_we.toISOString(true) : <any>undefined;
        data["is_th"] = this.is_th;
        data["from_th"] = this.from_th ? this.from_th.toISOString(true) : <any>undefined;
        data["to_th"] = this.to_th ? this.to_th.toISOString(true) : <any>undefined;
        data["is_fr"] = this.is_fr;
        data["from_fr"] = this.from_fr ? this.from_fr.toISOString(true) : <any>undefined;
        data["to_fr"] = this.to_fr ? this.to_fr.toISOString(true) : <any>undefined;
        data["is_sa"] = this.is_sa;
        data["from_sa"] = this.from_sa ? this.from_sa.toISOString(true) : <any>undefined;
        data["to_sa"] = this.to_sa ? this.to_sa.toISOString(true) : <any>undefined;
        data["is_su"] = this.is_su;
        data["from_su"] = this.from_su ? this.from_su.toISOString(true) : <any>undefined;
        data["to_su"] = this.to_su ? this.to_su.toISOString(true) : <any>undefined;
        data["tax"] = this.tax;
        data["birth_day"] = this.birth_day ? this.birth_day.toISOString(true) : <any>undefined;
        data["phone"] = this.phone;
        data["tel"] = this.tel;
        data["hotline"] = this.hotline;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        if (Array.isArray(this.hRM_Branch_Details)) {
            data["hRM_Branch_Details"] = [];
            for (let item of this.hRM_Branch_Details)
                data["hRM_Branch_Details"].push(item.toJSON());
        }
        return data;
    }

    clone(): HRM_Branch_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Branch_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Branch_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    company_symbol?: string | undefined;
    name?: string | undefined;
    name1?: string | undefined;
    name2?: string | undefined;
    address?: string | undefined;
    type?: string | undefined;
    url_logo?: string | undefined;
    lat?: number | undefined;
    long?: number | undefined;
    distance?: number | undefined;
    max_dif_face?: number | undefined;
    is_mo?: boolean | undefined;
    from_mo?: moment.Moment | undefined;
    to_mo?: moment.Moment | undefined;
    is_tu?: boolean | undefined;
    from_tu?: moment.Moment | undefined;
    to_tu?: moment.Moment | undefined;
    is_we?: boolean | undefined;
    from_we?: moment.Moment | undefined;
    to_we?: moment.Moment | undefined;
    is_th?: boolean | undefined;
    from_th?: moment.Moment | undefined;
    to_th?: moment.Moment | undefined;
    is_fr?: boolean | undefined;
    from_fr?: moment.Moment | undefined;
    to_fr?: moment.Moment | undefined;
    is_sa?: boolean | undefined;
    from_sa?: moment.Moment | undefined;
    to_sa?: moment.Moment | undefined;
    is_su?: boolean | undefined;
    from_su?: moment.Moment | undefined;
    to_su?: moment.Moment | undefined;
    tax?: string | undefined;
    birth_day?: moment.Moment | undefined;
    phone?: string | undefined;
    tel?: string | undefined;
    hotline?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    hRM_Branch_Details?: HRM_Branch_Detail_ENTITY[] | undefined;
}

export class SYS_Report_Infomation_Version_ENTITY implements ISYS_Report_Infomation_Version_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    name?: string | undefined;
    version?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;

    constructor(data?: ISYS_Report_Infomation_Version_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.master_code = _data["master_code"];
            this.name = _data["name"];
            this.version = _data["version"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): SYS_Report_Infomation_Version_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Report_Infomation_Version_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["master_code"] = this.master_code;
        data["name"] = this.name;
        data["version"] = this.version;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): SYS_Report_Infomation_Version_ENTITY {
        const json = this.toJSON();
        let result = new SYS_Report_Infomation_Version_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_Report_Infomation_Version_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    name?: string | undefined;
    version?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
}

export class SYS_Report_Infomation_Detail_Signature_Employee_ENTITY implements ISYS_Report_Infomation_Detail_Signature_Employee_ENTITY {
    avarta?: string | undefined;
    avarta_base64?: string | undefined;
    avarta_base64_256x256?: string | undefined;
    id_card?: string | undefined;
    birthday?: moment.Moment | undefined;
    birthday_f?: string | undefined;
    title_code?: string | undefined;
    title_name?: string | undefined;
    position_code?: string | undefined;
    position_name?: string | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    email?: string | undefined;
    email_company?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    level?: number | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    full_name?: string | undefined;
    phone?: string | undefined;
    user_login?: string | undefined;
    sex_name?: string | undefined;
    role_name?: string | undefined;
    sub_role_name?: string | undefined;
    default_sign?: string | undefined;
    date_sign?: string | undefined;
    sign_fullname?: string | undefined;

    constructor(data?: ISYS_Report_Infomation_Detail_Signature_Employee_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.avarta = _data["avarta"];
            this.avarta_base64 = _data["avarta_base64"];
            this.avarta_base64_256x256 = _data["avarta_base64_256x256"];
            this.id_card = _data["id_card"];
            this.birthday = _data["birthday"] ? moment.parseZone(_data["birthday"].toString()) : <any>undefined;
            this.birthday_f = _data["birthday_f"];
            this.title_code = _data["title_code"];
            this.title_name = _data["title_name"];
            this.position_code = _data["position_code"];
            this.position_name = _data["position_name"];
            this.branch_code = _data["branch_code"];
            this.branch_name = _data["branch_name"];
            this.email = _data["email"];
            this.email_company = _data["email_company"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.level = _data["level"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.full_name = _data["full_name"];
            this.phone = _data["phone"];
            this.user_login = _data["user_login"];
            this.sex_name = _data["sex_name"];
            this.role_name = _data["role_name"];
            this.sub_role_name = _data["sub_role_name"];
            this.default_sign = _data["default_sign"];
            this.date_sign = _data["date_sign"];
            this.sign_fullname = _data["sign_fullname"];
        }
    }

    static fromJS(data: any): SYS_Report_Infomation_Detail_Signature_Employee_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Report_Infomation_Detail_Signature_Employee_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["avarta"] = this.avarta;
        data["avarta_base64"] = this.avarta_base64;
        data["avarta_base64_256x256"] = this.avarta_base64_256x256;
        data["id_card"] = this.id_card;
        data["birthday"] = this.birthday ? this.birthday.toISOString(true) : <any>undefined;
        data["birthday_f"] = this.birthday_f;
        data["title_code"] = this.title_code;
        data["title_name"] = this.title_name;
        data["position_code"] = this.position_code;
        data["position_name"] = this.position_name;
        data["branch_code"] = this.branch_code;
        data["branch_name"] = this.branch_name;
        data["email"] = this.email;
        data["email_company"] = this.email_company;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["level"] = this.level;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["full_name"] = this.full_name;
        data["phone"] = this.phone;
        data["user_login"] = this.user_login;
        data["sex_name"] = this.sex_name;
        data["role_name"] = this.role_name;
        data["sub_role_name"] = this.sub_role_name;
        data["default_sign"] = this.default_sign;
        data["date_sign"] = this.date_sign;
        data["sign_fullname"] = this.sign_fullname;
        return data;
    }

    clone(): SYS_Report_Infomation_Detail_Signature_Employee_ENTITY {
        const json = this.toJSON();
        let result = new SYS_Report_Infomation_Detail_Signature_Employee_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_Report_Infomation_Detail_Signature_Employee_ENTITY {
    avarta?: string | undefined;
    avarta_base64?: string | undefined;
    avarta_base64_256x256?: string | undefined;
    id_card?: string | undefined;
    birthday?: moment.Moment | undefined;
    birthday_f?: string | undefined;
    title_code?: string | undefined;
    title_name?: string | undefined;
    position_code?: string | undefined;
    position_name?: string | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    email?: string | undefined;
    email_company?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    level?: number | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    full_name?: string | undefined;
    phone?: string | undefined;
    user_login?: string | undefined;
    sex_name?: string | undefined;
    role_name?: string | undefined;
    sub_role_name?: string | undefined;
    default_sign?: string | undefined;
    date_sign?: string | undefined;
    sign_fullname?: string | undefined;
}

export class SYS_Report_Infomation_Detail_Signature_ENTITY implements ISYS_Report_Infomation_Detail_Signature_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    employee_code?: string | undefined;
    sys_report_infomation_detail_code?: string | undefined;
    position?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    is_role_name?: boolean | undefined;
    is_sub_role_name?: boolean | undefined;
    is_show_default_sign?: boolean | undefined;
    is_show_date_sign?: boolean | undefined;
    is_show_sign_fullname?: boolean | undefined;
    language_id?: number | undefined;
    from_index?: number | undefined;
    role_name?: string | undefined;
    sub_role_name?: string | undefined;
    show_default_sign?: string | undefined;
    show_date_sign?: string | undefined;
    show_sign_fullname?: string | undefined;
    text?: string | undefined;
    employee_info?: SYS_Report_Infomation_Detail_Signature_Employee_ENTITY;

    constructor(data?: ISYS_Report_Infomation_Detail_Signature_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.employee_code = _data["employee_code"];
            this.sys_report_infomation_detail_code = _data["sys_report_infomation_detail_code"];
            this.position = _data["position"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.is_role_name = _data["is_role_name"];
            this.is_sub_role_name = _data["is_sub_role_name"];
            this.is_show_default_sign = _data["is_show_default_sign"];
            this.is_show_date_sign = _data["is_show_date_sign"];
            this.is_show_sign_fullname = _data["is_show_sign_fullname"];
            this.language_id = _data["language_id"];
            this.from_index = _data["from_index"];
            this.role_name = _data["role_name"];
            this.sub_role_name = _data["sub_role_name"];
            this.show_default_sign = _data["show_default_sign"];
            this.show_date_sign = _data["show_date_sign"];
            this.show_sign_fullname = _data["show_sign_fullname"];
            this.text = _data["text"];
            this.employee_info = _data["employee_info"] ? SYS_Report_Infomation_Detail_Signature_Employee_ENTITY.fromJS(_data["employee_info"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SYS_Report_Infomation_Detail_Signature_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Report_Infomation_Detail_Signature_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["employee_code"] = this.employee_code;
        data["sys_report_infomation_detail_code"] = this.sys_report_infomation_detail_code;
        data["position"] = this.position;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["is_role_name"] = this.is_role_name;
        data["is_sub_role_name"] = this.is_sub_role_name;
        data["is_show_default_sign"] = this.is_show_default_sign;
        data["is_show_date_sign"] = this.is_show_date_sign;
        data["is_show_sign_fullname"] = this.is_show_sign_fullname;
        data["language_id"] = this.language_id;
        data["from_index"] = this.from_index;
        data["role_name"] = this.role_name;
        data["sub_role_name"] = this.sub_role_name;
        data["show_default_sign"] = this.show_default_sign;
        data["show_date_sign"] = this.show_date_sign;
        data["show_sign_fullname"] = this.show_sign_fullname;
        data["text"] = this.text;
        data["employee_info"] = this.employee_info ? this.employee_info.toJSON() : <any>undefined;
        return data;
    }

    clone(): SYS_Report_Infomation_Detail_Signature_ENTITY {
        const json = this.toJSON();
        let result = new SYS_Report_Infomation_Detail_Signature_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_Report_Infomation_Detail_Signature_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    employee_code?: string | undefined;
    sys_report_infomation_detail_code?: string | undefined;
    position?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    is_role_name?: boolean | undefined;
    is_sub_role_name?: boolean | undefined;
    is_show_default_sign?: boolean | undefined;
    is_show_date_sign?: boolean | undefined;
    is_show_sign_fullname?: boolean | undefined;
    language_id?: number | undefined;
    from_index?: number | undefined;
    role_name?: string | undefined;
    sub_role_name?: string | undefined;
    show_default_sign?: string | undefined;
    show_date_sign?: string | undefined;
    show_sign_fullname?: string | undefined;
    text?: string | undefined;
    employee_info?: SYS_Report_Infomation_Detail_Signature_Employee_ENTITY;
}

export class SYS_Report_Infomation_Detail_ENTITY implements ISYS_Report_Infomation_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    report_name?: string | undefined;
    is_co_name?: boolean | undefined;
    is_co_address?: boolean | undefined;
    is_co_tax?: boolean | undefined;
    is_co_phone?: boolean | undefined;
    is_co_tel?: boolean | undefined;
    is_co_hotline?: boolean | undefined;
    is_qrcode?: boolean | undefined;
    is_title?: boolean | undefined;
    is_title_footer?: boolean | undefined;
    is_no_footer?: boolean | undefined;
    title_footer?: string | undefined;
    no_footer?: string | undefined;
    color_title_footer?: string | undefined;
    color_no_footer?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    version_code?: string | undefined;
    master_code?: string | undefined;
    language_id?: number | undefined;
    from_index?: number | undefined;
    role_name?: string | undefined;
    sub_role_name?: string | undefined;
    show_default_sign?: string | undefined;
    show_date_sign?: string | undefined;
    show_sign_fullname?: string | undefined;
    sYS_Report_Infomation_Versions?: SYS_Report_Infomation_Version_ENTITY[] | undefined;
    sYS_Report_Infomation_Detail_Signatures?: SYS_Report_Infomation_Detail_Signature_ENTITY[] | undefined;

    constructor(data?: ISYS_Report_Infomation_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.report_name = _data["report_name"];
            this.is_co_name = _data["is_co_name"];
            this.is_co_address = _data["is_co_address"];
            this.is_co_tax = _data["is_co_tax"];
            this.is_co_phone = _data["is_co_phone"];
            this.is_co_tel = _data["is_co_tel"];
            this.is_co_hotline = _data["is_co_hotline"];
            this.is_qrcode = _data["is_qrcode"];
            this.is_title = _data["is_title"];
            this.is_title_footer = _data["is_title_footer"];
            this.is_no_footer = _data["is_no_footer"];
            this.title_footer = _data["title_footer"];
            this.no_footer = _data["no_footer"];
            this.color_title_footer = _data["color_title_footer"];
            this.color_no_footer = _data["color_no_footer"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.version_code = _data["version_code"];
            this.master_code = _data["master_code"];
            this.language_id = _data["language_id"];
            this.from_index = _data["from_index"];
            this.role_name = _data["role_name"];
            this.sub_role_name = _data["sub_role_name"];
            this.show_default_sign = _data["show_default_sign"];
            this.show_date_sign = _data["show_date_sign"];
            this.show_sign_fullname = _data["show_sign_fullname"];
            if (Array.isArray(_data["sYS_Report_Infomation_Versions"])) {
                this.sYS_Report_Infomation_Versions = [] as any;
                for (let item of _data["sYS_Report_Infomation_Versions"])
                    this.sYS_Report_Infomation_Versions.push(SYS_Report_Infomation_Version_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["sYS_Report_Infomation_Detail_Signatures"])) {
                this.sYS_Report_Infomation_Detail_Signatures = [] as any;
                for (let item of _data["sYS_Report_Infomation_Detail_Signatures"])
                    this.sYS_Report_Infomation_Detail_Signatures.push(SYS_Report_Infomation_Detail_Signature_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SYS_Report_Infomation_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Report_Infomation_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["report_name"] = this.report_name;
        data["is_co_name"] = this.is_co_name;
        data["is_co_address"] = this.is_co_address;
        data["is_co_tax"] = this.is_co_tax;
        data["is_co_phone"] = this.is_co_phone;
        data["is_co_tel"] = this.is_co_tel;
        data["is_co_hotline"] = this.is_co_hotline;
        data["is_qrcode"] = this.is_qrcode;
        data["is_title"] = this.is_title;
        data["is_title_footer"] = this.is_title_footer;
        data["is_no_footer"] = this.is_no_footer;
        data["title_footer"] = this.title_footer;
        data["no_footer"] = this.no_footer;
        data["color_title_footer"] = this.color_title_footer;
        data["color_no_footer"] = this.color_no_footer;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["version_code"] = this.version_code;
        data["master_code"] = this.master_code;
        data["language_id"] = this.language_id;
        data["from_index"] = this.from_index;
        data["role_name"] = this.role_name;
        data["sub_role_name"] = this.sub_role_name;
        data["show_default_sign"] = this.show_default_sign;
        data["show_date_sign"] = this.show_date_sign;
        data["show_sign_fullname"] = this.show_sign_fullname;
        if (Array.isArray(this.sYS_Report_Infomation_Versions)) {
            data["sYS_Report_Infomation_Versions"] = [];
            for (let item of this.sYS_Report_Infomation_Versions)
                data["sYS_Report_Infomation_Versions"].push(item.toJSON());
        }
        if (Array.isArray(this.sYS_Report_Infomation_Detail_Signatures)) {
            data["sYS_Report_Infomation_Detail_Signatures"] = [];
            for (let item of this.sYS_Report_Infomation_Detail_Signatures)
                data["sYS_Report_Infomation_Detail_Signatures"].push(item.toJSON());
        }
        return data;
    }

    clone(): SYS_Report_Infomation_Detail_ENTITY {
        const json = this.toJSON();
        let result = new SYS_Report_Infomation_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_Report_Infomation_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    report_name?: string | undefined;
    is_co_name?: boolean | undefined;
    is_co_address?: boolean | undefined;
    is_co_tax?: boolean | undefined;
    is_co_phone?: boolean | undefined;
    is_co_tel?: boolean | undefined;
    is_co_hotline?: boolean | undefined;
    is_qrcode?: boolean | undefined;
    is_title?: boolean | undefined;
    is_title_footer?: boolean | undefined;
    is_no_footer?: boolean | undefined;
    title_footer?: string | undefined;
    no_footer?: string | undefined;
    color_title_footer?: string | undefined;
    color_no_footer?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    version_code?: string | undefined;
    master_code?: string | undefined;
    language_id?: number | undefined;
    from_index?: number | undefined;
    role_name?: string | undefined;
    sub_role_name?: string | undefined;
    show_default_sign?: string | undefined;
    show_date_sign?: string | undefined;
    show_sign_fullname?: string | undefined;
    sYS_Report_Infomation_Versions?: SYS_Report_Infomation_Version_ENTITY[] | undefined;
    sYS_Report_Infomation_Detail_Signatures?: SYS_Report_Infomation_Detail_Signature_ENTITY[] | undefined;
}

export class SYS_Report_Infomation_ENTITY implements ISYS_Report_Infomation_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    report_name?: string | undefined;
    company_code?: string | undefined;
    table_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    default_version?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    xml_detail?: string | undefined;
    xml_sign?: string | undefined;
    language_id?: number | undefined;
    is_default?: boolean | undefined;
    is_pdf?: boolean | undefined;
    report_type?: string | undefined;
    report_icon?: string | undefined;
    type?: string | undefined;
    is_reference?: boolean | undefined;
    is_logo?: boolean | undefined;
    is_branch?: boolean | undefined;
    column_logo?: string | undefined;
    reference?: string | undefined;
    branch_code_default?: string | undefined;
    sYS_List_Companys?: SYS_List_Company_ENTITY[] | undefined;
    hRM_Branchs?: HRM_Branch_ENTITY[] | undefined;
    sYS_Report_Infomation_Details?: SYS_Report_Infomation_Detail_ENTITY[] | undefined;

    constructor(data?: ISYS_Report_Infomation_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.report_name = _data["report_name"];
            this.company_code = _data["company_code"];
            this.table_name = _data["table_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.default_version = _data["default_version"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.xml_detail = _data["xml_detail"];
            this.xml_sign = _data["xml_sign"];
            this.language_id = _data["language_id"];
            this.is_default = _data["is_default"];
            this.is_pdf = _data["is_pdf"];
            this.report_type = _data["report_type"];
            this.report_icon = _data["report_icon"];
            this.type = _data["type"];
            this.is_reference = _data["is_reference"];
            this.is_logo = _data["is_logo"];
            this.is_branch = _data["is_branch"];
            this.column_logo = _data["column_logo"];
            this.reference = _data["reference"];
            this.branch_code_default = _data["branch_code_default"];
            if (Array.isArray(_data["sYS_List_Companys"])) {
                this.sYS_List_Companys = [] as any;
                for (let item of _data["sYS_List_Companys"])
                    this.sYS_List_Companys.push(SYS_List_Company_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Branchs"])) {
                this.hRM_Branchs = [] as any;
                for (let item of _data["hRM_Branchs"])
                    this.hRM_Branchs.push(HRM_Branch_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["sYS_Report_Infomation_Details"])) {
                this.sYS_Report_Infomation_Details = [] as any;
                for (let item of _data["sYS_Report_Infomation_Details"])
                    this.sYS_Report_Infomation_Details.push(SYS_Report_Infomation_Detail_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SYS_Report_Infomation_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Report_Infomation_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["report_name"] = this.report_name;
        data["company_code"] = this.company_code;
        data["table_name"] = this.table_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["default_version"] = this.default_version;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["xml_detail"] = this.xml_detail;
        data["xml_sign"] = this.xml_sign;
        data["language_id"] = this.language_id;
        data["is_default"] = this.is_default;
        data["is_pdf"] = this.is_pdf;
        data["report_type"] = this.report_type;
        data["report_icon"] = this.report_icon;
        data["type"] = this.type;
        data["is_reference"] = this.is_reference;
        data["is_logo"] = this.is_logo;
        data["is_branch"] = this.is_branch;
        data["column_logo"] = this.column_logo;
        data["reference"] = this.reference;
        data["branch_code_default"] = this.branch_code_default;
        if (Array.isArray(this.sYS_List_Companys)) {
            data["sYS_List_Companys"] = [];
            for (let item of this.sYS_List_Companys)
                data["sYS_List_Companys"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Branchs)) {
            data["hRM_Branchs"] = [];
            for (let item of this.hRM_Branchs)
                data["hRM_Branchs"].push(item.toJSON());
        }
        if (Array.isArray(this.sYS_Report_Infomation_Details)) {
            data["sYS_Report_Infomation_Details"] = [];
            for (let item of this.sYS_Report_Infomation_Details)
                data["sYS_Report_Infomation_Details"].push(item.toJSON());
        }
        return data;
    }

    clone(): SYS_Report_Infomation_ENTITY {
        const json = this.toJSON();
        let result = new SYS_Report_Infomation_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_Report_Infomation_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    report_name?: string | undefined;
    company_code?: string | undefined;
    table_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    default_version?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    xml_detail?: string | undefined;
    xml_sign?: string | undefined;
    language_id?: number | undefined;
    is_default?: boolean | undefined;
    is_pdf?: boolean | undefined;
    report_type?: string | undefined;
    report_icon?: string | undefined;
    type?: string | undefined;
    is_reference?: boolean | undefined;
    is_logo?: boolean | undefined;
    is_branch?: boolean | undefined;
    column_logo?: string | undefined;
    reference?: string | undefined;
    branch_code_default?: string | undefined;
    sYS_List_Companys?: SYS_List_Company_ENTITY[] | undefined;
    hRM_Branchs?: HRM_Branch_ENTITY[] | undefined;
    sYS_Report_Infomation_Details?: SYS_Report_Infomation_Detail_ENTITY[] | undefined;
}

export class InsertFile implements IInsertFile {
    id?: number;
    myFile?: string | undefined;

    constructor(data?: IInsertFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.myFile = _data["myFile"];
        }
    }

    static fromJS(data: any): InsertFile {
        data = typeof data === 'object' ? data : {};
        let result = new InsertFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["myFile"] = this.myFile;
        return data;
    }

    clone(): InsertFile {
        const json = this.toJSON();
        let result = new InsertFile();
        result.init(json);
        return result;
    }
}

export interface IInsertFile {
    id?: number;
    myFile?: string | undefined;
}

export class File_ENTITY implements IFile_ENTITY {
    id?: number;
    path?: string | undefined;
    code?: string | undefined;
    fileName?: string | undefined;
    size?: number;
    tbName?: string | undefined;
    colName?: string | undefined;
    ref_MasterID?: number | undefined;
    index?: number;
    description?: string | undefined;
    lastModified?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;

    constructor(data?: IFile_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.path = _data["path"];
            this.code = _data["code"];
            this.fileName = _data["fileName"];
            this.size = _data["size"];
            this.tbName = _data["tbName"];
            this.colName = _data["colName"];
            this.ref_MasterID = _data["ref_MasterID"];
            this.index = _data["index"];
            this.description = _data["description"];
            this.lastModified = _data["lastModified"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
        }
    }

    static fromJS(data: any): File_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new File_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["path"] = this.path;
        data["code"] = this.code;
        data["fileName"] = this.fileName;
        data["size"] = this.size;
        data["tbName"] = this.tbName;
        data["colName"] = this.colName;
        data["ref_MasterID"] = this.ref_MasterID;
        data["index"] = this.index;
        data["description"] = this.description;
        data["lastModified"] = this.lastModified;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        return data;
    }

    clone(): File_ENTITY {
        const json = this.toJSON();
        let result = new File_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IFile_ENTITY {
    id?: number;
    path?: string | undefined;
    code?: string | undefined;
    fileName?: string | undefined;
    size?: number;
    tbName?: string | undefined;
    colName?: string | undefined;
    ref_MasterID?: number | undefined;
    index?: number;
    description?: string | undefined;
    lastModified?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
}

export class Upload_ENTITY implements IUpload_ENTITY {
    id?: number | undefined;
    path?: string | undefined;
    path_encode?: string | undefined;
    code?: string | undefined;
    fileName?: string | undefined;
    name?: string | undefined;
    size?: number | undefined;
    tbName?: string | undefined;
    column_key?: string | undefined;
    colName?: string | undefined;
    stored?: string | undefined;
    ref_MasterID?: string | undefined;
    ref_master_code?: string | undefined;
    index?: number;
    status?: number | undefined;
    message?: string | undefined;
    description?: string | undefined;
    lastModified?: string | undefined;
    xmL_Data?: string | undefined;
    type?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;

    constructor(data?: IUpload_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.path = _data["path"];
            this.path_encode = _data["path_encode"];
            this.code = _data["code"];
            this.fileName = _data["fileName"];
            this.name = _data["name"];
            this.size = _data["size"];
            this.tbName = _data["tbName"];
            this.column_key = _data["column_key"];
            this.colName = _data["colName"];
            this.stored = _data["stored"];
            this.ref_MasterID = _data["ref_MasterID"];
            this.ref_master_code = _data["ref_master_code"];
            this.index = _data["index"];
            this.status = _data["status"];
            this.message = _data["message"];
            this.description = _data["description"];
            this.lastModified = _data["lastModified"];
            this.xmL_Data = _data["xmL_Data"];
            this.type = _data["type"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
        }
    }

    static fromJS(data: any): Upload_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Upload_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["path"] = this.path;
        data["path_encode"] = this.path_encode;
        data["code"] = this.code;
        data["fileName"] = this.fileName;
        data["name"] = this.name;
        data["size"] = this.size;
        data["tbName"] = this.tbName;
        data["column_key"] = this.column_key;
        data["colName"] = this.colName;
        data["stored"] = this.stored;
        data["ref_MasterID"] = this.ref_MasterID;
        data["ref_master_code"] = this.ref_master_code;
        data["index"] = this.index;
        data["status"] = this.status;
        data["message"] = this.message;
        data["description"] = this.description;
        data["lastModified"] = this.lastModified;
        data["xmL_Data"] = this.xmL_Data;
        data["type"] = this.type;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        return data;
    }

    clone(): Upload_ENTITY {
        const json = this.toJSON();
        let result = new Upload_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IUpload_ENTITY {
    id?: number | undefined;
    path?: string | undefined;
    path_encode?: string | undefined;
    code?: string | undefined;
    fileName?: string | undefined;
    name?: string | undefined;
    size?: number | undefined;
    tbName?: string | undefined;
    column_key?: string | undefined;
    colName?: string | undefined;
    stored?: string | undefined;
    ref_MasterID?: string | undefined;
    ref_master_code?: string | undefined;
    index?: number;
    status?: number | undefined;
    message?: string | undefined;
    description?: string | undefined;
    lastModified?: string | undefined;
    xmL_Data?: string | undefined;
    type?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
}

export class FileRecord implements IFileRecord {
    id?: number;
    fileName?: string | undefined;
    fileFormat?: string | undefined;
    filePath?: string | undefined;
    fullPath?: string | undefined;
    contentType?: string | undefined;
    altText?: string | undefined;
    description?: string | undefined;
    message?: string | undefined;
    path?: string | undefined;
    ref_MasterID?: number | undefined;
    ref_Master_str?: string | undefined;
    status?: number | undefined;
    size?: number | undefined;
    tbName?: string | undefined;
    colName?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_edit?: moment.Moment | undefined;
    account_id?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
    base64?: string | undefined;
    code?: string | undefined;
    token?: string | undefined;
    employee_code?: string | undefined;
    dif?: number | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: IFileRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fileName = _data["fileName"];
            this.fileFormat = _data["fileFormat"];
            this.filePath = _data["filePath"];
            this.fullPath = _data["fullPath"];
            this.contentType = _data["contentType"];
            this.altText = _data["altText"];
            this.description = _data["description"];
            this.message = _data["message"];
            this.path = _data["path"];
            this.ref_MasterID = _data["ref_MasterID"];
            this.ref_Master_str = _data["ref_Master_str"];
            this.status = _data["status"];
            this.size = _data["size"];
            this.tbName = _data["tbName"];
            this.colName = _data["colName"];
            this.approve = _data["approve"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_edit = _data["date_edit"] ? moment.parseZone(_data["date_edit"].toString()) : <any>undefined;
            this.account_id = _data["account_id"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
            this.base64 = _data["base64"];
            this.code = _data["code"];
            this.token = _data["token"];
            this.employee_code = _data["employee_code"];
            this.dif = _data["dif"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): FileRecord {
        data = typeof data === 'object' ? data : {};
        let result = new FileRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fileName"] = this.fileName;
        data["fileFormat"] = this.fileFormat;
        data["filePath"] = this.filePath;
        data["fullPath"] = this.fullPath;
        data["contentType"] = this.contentType;
        data["altText"] = this.altText;
        data["description"] = this.description;
        data["message"] = this.message;
        data["path"] = this.path;
        data["ref_MasterID"] = this.ref_MasterID;
        data["ref_Master_str"] = this.ref_Master_str;
        data["status"] = this.status;
        data["size"] = this.size;
        data["tbName"] = this.tbName;
        data["colName"] = this.colName;
        data["approve"] = this.approve;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_edit"] = this.date_edit ? this.date_edit.toISOString(true) : <any>undefined;
        data["account_id"] = this.account_id;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        data["base64"] = this.base64;
        data["code"] = this.code;
        data["token"] = this.token;
        data["employee_code"] = this.employee_code;
        data["dif"] = this.dif;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): FileRecord {
        const json = this.toJSON();
        let result = new FileRecord();
        result.init(json);
        return result;
    }
}

export interface IFileRecord {
    id?: number;
    fileName?: string | undefined;
    fileFormat?: string | undefined;
    filePath?: string | undefined;
    fullPath?: string | undefined;
    contentType?: string | undefined;
    altText?: string | undefined;
    description?: string | undefined;
    message?: string | undefined;
    path?: string | undefined;
    ref_MasterID?: number | undefined;
    ref_Master_str?: string | undefined;
    status?: number | undefined;
    size?: number | undefined;
    tbName?: string | undefined;
    colName?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_edit?: moment.Moment | undefined;
    account_id?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
    base64?: string | undefined;
    code?: string | undefined;
    token?: string | undefined;
    employee_code?: string | undefined;
    dif?: number | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class SYS_GenRowTable_Detail implements ISYS_GenRowTable_Detail {
    id?: number;
    displaY_STATUS?: number | undefined;
    code?: string | undefined;
    indexRow?: number | undefined;
    columN_NAME?: string | undefined;
    displaY_CONDITIONS?: string | undefined;
    format?: string | undefined;
    dx_format?: string | undefined;
    userID?: number | undefined;
    possion?: number | undefined;
    namE_VN?: string | undefined;
    namE_EN?: string | undefined;
    name?: string | undefined;
    typE_ID?: number | undefined;
    width?: number | undefined;
    min?: number | undefined;
    max?: number | undefined;
    clasS_INSERT?: string | undefined;
    reference?: string | undefined;
    tablE_NAME?: string | undefined;
    father?: string | undefined;
    decentralization?: string | undefined;
    storeD_PROCEDURES?: string | undefined;
    active?: boolean | undefined;
    iS_HIDDEN?: boolean | undefined;
    shoW_REFERENCE?: boolean | undefined;
    displaY_LIST?: boolean | undefined;
    displaY_EDIT?: boolean | undefined;
    disablE_EDIT?: boolean | undefined;
    required?: boolean | undefined;
    alloW_EDIT?: boolean | undefined;
    alloW_SEARCH?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    approve?: boolean | undefined;
    colspan?: number | undefined;
    typegroup?: number | undefined;
    typeongirdview?: string | undefined;
    typeongirdedit?: string | undefined;
    editortype?: string | undefined;
    editoroptions?: any | undefined;
    group?: number | undefined;
    grouP_NAME?: string | undefined;
    lisT_GROUP?: string | undefined;
    tabs?: string | undefined;
    valueexpr?: string | undefined;
    displayexpr?: string | undefined;
    droP_DOWN_TABLE?: string | undefined;
    form?: string | undefined;
    defaulT_VALUE?: string | undefined;
    querY_GET_MASTER?: string | undefined;
    taB_LEVEL?: string | undefined;
    iS_FIXED?: boolean | undefined;
    iS_GROUP?: boolean | undefined;
    indeX_GROUP?: number | undefined;
    summaryType_GROUP?: string | undefined;
    valueFormat?: string | undefined;
    showInGroupFooter_GROUP?: boolean | undefined;
    alignByColumn_GROUP?: boolean | undefined;
    disabled_arised?: boolean | undefined;
    droP_DOWN_WIDTH?: number | undefined;

    constructor(data?: ISYS_GenRowTable_Detail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.displaY_STATUS = _data["displaY_STATUS"];
            this.code = _data["code"];
            this.indexRow = _data["indexRow"];
            this.columN_NAME = _data["columN_NAME"];
            this.displaY_CONDITIONS = _data["displaY_CONDITIONS"];
            this.format = _data["format"];
            this.dx_format = _data["dx_format"];
            this.userID = _data["userID"];
            this.possion = _data["possion"];
            this.namE_VN = _data["namE_VN"];
            this.namE_EN = _data["namE_EN"];
            this.name = _data["name"];
            this.typE_ID = _data["typE_ID"];
            this.width = _data["width"];
            this.min = _data["min"];
            this.max = _data["max"];
            this.clasS_INSERT = _data["clasS_INSERT"];
            this.reference = _data["reference"];
            this.tablE_NAME = _data["tablE_NAME"];
            this.father = _data["father"];
            this.decentralization = _data["decentralization"];
            this.storeD_PROCEDURES = _data["storeD_PROCEDURES"];
            this.active = _data["active"];
            this.iS_HIDDEN = _data["iS_HIDDEN"];
            this.shoW_REFERENCE = _data["shoW_REFERENCE"];
            this.displaY_LIST = _data["displaY_LIST"];
            this.displaY_EDIT = _data["displaY_EDIT"];
            this.disablE_EDIT = _data["disablE_EDIT"];
            this.required = _data["required"];
            this.alloW_EDIT = _data["alloW_EDIT"];
            this.alloW_SEARCH = _data["alloW_SEARCH"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.approve = _data["approve"];
            this.colspan = _data["colspan"];
            this.typegroup = _data["typegroup"];
            this.typeongirdview = _data["typeongirdview"];
            this.typeongirdedit = _data["typeongirdedit"];
            this.editortype = _data["editortype"];
            this.editoroptions = _data["editoroptions"];
            this.group = _data["group"];
            this.grouP_NAME = _data["grouP_NAME"];
            this.lisT_GROUP = _data["lisT_GROUP"];
            this.tabs = _data["tabs"];
            this.valueexpr = _data["valueexpr"];
            this.displayexpr = _data["displayexpr"];
            this.droP_DOWN_TABLE = _data["droP_DOWN_TABLE"];
            this.form = _data["form"];
            this.defaulT_VALUE = _data["defaulT_VALUE"];
            this.querY_GET_MASTER = _data["querY_GET_MASTER"];
            this.taB_LEVEL = _data["taB_LEVEL"];
            this.iS_FIXED = _data["iS_FIXED"];
            this.iS_GROUP = _data["iS_GROUP"];
            this.indeX_GROUP = _data["indeX_GROUP"];
            this.summaryType_GROUP = _data["summaryType_GROUP"];
            this.valueFormat = _data["valueFormat"];
            this.showInGroupFooter_GROUP = _data["showInGroupFooter_GROUP"];
            this.alignByColumn_GROUP = _data["alignByColumn_GROUP"];
            this.disabled_arised = _data["disabled_arised"];
            this.droP_DOWN_WIDTH = _data["droP_DOWN_WIDTH"];
        }
    }

    static fromJS(data: any): SYS_GenRowTable_Detail {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_GenRowTable_Detail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displaY_STATUS"] = this.displaY_STATUS;
        data["code"] = this.code;
        data["indexRow"] = this.indexRow;
        data["columN_NAME"] = this.columN_NAME;
        data["displaY_CONDITIONS"] = this.displaY_CONDITIONS;
        data["format"] = this.format;
        data["dx_format"] = this.dx_format;
        data["userID"] = this.userID;
        data["possion"] = this.possion;
        data["namE_VN"] = this.namE_VN;
        data["namE_EN"] = this.namE_EN;
        data["name"] = this.name;
        data["typE_ID"] = this.typE_ID;
        data["width"] = this.width;
        data["min"] = this.min;
        data["max"] = this.max;
        data["clasS_INSERT"] = this.clasS_INSERT;
        data["reference"] = this.reference;
        data["tablE_NAME"] = this.tablE_NAME;
        data["father"] = this.father;
        data["decentralization"] = this.decentralization;
        data["storeD_PROCEDURES"] = this.storeD_PROCEDURES;
        data["active"] = this.active;
        data["iS_HIDDEN"] = this.iS_HIDDEN;
        data["shoW_REFERENCE"] = this.shoW_REFERENCE;
        data["displaY_LIST"] = this.displaY_LIST;
        data["displaY_EDIT"] = this.displaY_EDIT;
        data["disablE_EDIT"] = this.disablE_EDIT;
        data["required"] = this.required;
        data["alloW_EDIT"] = this.alloW_EDIT;
        data["alloW_SEARCH"] = this.alloW_SEARCH;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["approve"] = this.approve;
        data["colspan"] = this.colspan;
        data["typegroup"] = this.typegroup;
        data["typeongirdview"] = this.typeongirdview;
        data["typeongirdedit"] = this.typeongirdedit;
        data["editortype"] = this.editortype;
        data["editoroptions"] = this.editoroptions;
        data["group"] = this.group;
        data["grouP_NAME"] = this.grouP_NAME;
        data["lisT_GROUP"] = this.lisT_GROUP;
        data["tabs"] = this.tabs;
        data["valueexpr"] = this.valueexpr;
        data["displayexpr"] = this.displayexpr;
        data["droP_DOWN_TABLE"] = this.droP_DOWN_TABLE;
        data["form"] = this.form;
        data["defaulT_VALUE"] = this.defaulT_VALUE;
        data["querY_GET_MASTER"] = this.querY_GET_MASTER;
        data["taB_LEVEL"] = this.taB_LEVEL;
        data["iS_FIXED"] = this.iS_FIXED;
        data["iS_GROUP"] = this.iS_GROUP;
        data["indeX_GROUP"] = this.indeX_GROUP;
        data["summaryType_GROUP"] = this.summaryType_GROUP;
        data["valueFormat"] = this.valueFormat;
        data["showInGroupFooter_GROUP"] = this.showInGroupFooter_GROUP;
        data["alignByColumn_GROUP"] = this.alignByColumn_GROUP;
        data["disabled_arised"] = this.disabled_arised;
        data["droP_DOWN_WIDTH"] = this.droP_DOWN_WIDTH;
        return data;
    }

    clone(): SYS_GenRowTable_Detail {
        const json = this.toJSON();
        let result = new SYS_GenRowTable_Detail();
        result.init(json);
        return result;
    }
}

export interface ISYS_GenRowTable_Detail {
    id?: number;
    displaY_STATUS?: number | undefined;
    code?: string | undefined;
    indexRow?: number | undefined;
    columN_NAME?: string | undefined;
    displaY_CONDITIONS?: string | undefined;
    format?: string | undefined;
    dx_format?: string | undefined;
    userID?: number | undefined;
    possion?: number | undefined;
    namE_VN?: string | undefined;
    namE_EN?: string | undefined;
    name?: string | undefined;
    typE_ID?: number | undefined;
    width?: number | undefined;
    min?: number | undefined;
    max?: number | undefined;
    clasS_INSERT?: string | undefined;
    reference?: string | undefined;
    tablE_NAME?: string | undefined;
    father?: string | undefined;
    decentralization?: string | undefined;
    storeD_PROCEDURES?: string | undefined;
    active?: boolean | undefined;
    iS_HIDDEN?: boolean | undefined;
    shoW_REFERENCE?: boolean | undefined;
    displaY_LIST?: boolean | undefined;
    displaY_EDIT?: boolean | undefined;
    disablE_EDIT?: boolean | undefined;
    required?: boolean | undefined;
    alloW_EDIT?: boolean | undefined;
    alloW_SEARCH?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    approve?: boolean | undefined;
    colspan?: number | undefined;
    typegroup?: number | undefined;
    typeongirdview?: string | undefined;
    typeongirdedit?: string | undefined;
    editortype?: string | undefined;
    editoroptions?: any | undefined;
    group?: number | undefined;
    grouP_NAME?: string | undefined;
    lisT_GROUP?: string | undefined;
    tabs?: string | undefined;
    valueexpr?: string | undefined;
    displayexpr?: string | undefined;
    droP_DOWN_TABLE?: string | undefined;
    form?: string | undefined;
    defaulT_VALUE?: string | undefined;
    querY_GET_MASTER?: string | undefined;
    taB_LEVEL?: string | undefined;
    iS_FIXED?: boolean | undefined;
    iS_GROUP?: boolean | undefined;
    indeX_GROUP?: number | undefined;
    summaryType_GROUP?: string | undefined;
    valueFormat?: string | undefined;
    showInGroupFooter_GROUP?: boolean | undefined;
    alignByColumn_GROUP?: boolean | undefined;
    disabled_arised?: boolean | undefined;
    droP_DOWN_WIDTH?: number | undefined;
}

export class SYS_GenRowTable implements ISYS_GenRowTable {
    id?: number;
    code?: string | undefined;
    tablE_NAME?: string | undefined;
    userID?: number | undefined;
    indexRow?: number | undefined;
    namE_VN?: string | undefined;
    namE_EN?: string | undefined;
    name?: string | undefined;
    active?: boolean | undefined;
    iD_DT?: number | undefined;
    displaY_STATUS?: number | undefined;
    codE_DT?: string | undefined;
    columN_NAME?: string | undefined;
    namE_VN_DT?: string | undefined;
    namE_EN_DT?: string | undefined;
    father?: string | undefined;
    decentralizatioN_DT?: string | undefined;
    activE_DT?: boolean | undefined;
    alloW_EDIT?: boolean | undefined;
    decentralization?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    xmL_Detail?: string | undefined;
    approve?: boolean | undefined;
    exporT_PDF?: boolean | undefined;
    exporT_EXCEL?: boolean | undefined;
    iS_REPORT?: boolean | undefined;
    menU_CODE?: string | undefined;
    type?: string | undefined;
    form?: string | undefined;
    typE_ID?: number | undefined;
    syS_GenRowTable_Detail?: SYS_GenRowTable_Detail[] | undefined;

    constructor(data?: ISYS_GenRowTable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.tablE_NAME = _data["tablE_NAME"];
            this.userID = _data["userID"];
            this.indexRow = _data["indexRow"];
            this.namE_VN = _data["namE_VN"];
            this.namE_EN = _data["namE_EN"];
            this.name = _data["name"];
            this.active = _data["active"];
            this.iD_DT = _data["iD_DT"];
            this.displaY_STATUS = _data["displaY_STATUS"];
            this.codE_DT = _data["codE_DT"];
            this.columN_NAME = _data["columN_NAME"];
            this.namE_VN_DT = _data["namE_VN_DT"];
            this.namE_EN_DT = _data["namE_EN_DT"];
            this.father = _data["father"];
            this.decentralizatioN_DT = _data["decentralizatioN_DT"];
            this.activE_DT = _data["activE_DT"];
            this.alloW_EDIT = _data["alloW_EDIT"];
            this.decentralization = _data["decentralization"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.xmL_Detail = _data["xmL_Detail"];
            this.approve = _data["approve"];
            this.exporT_PDF = _data["exporT_PDF"];
            this.exporT_EXCEL = _data["exporT_EXCEL"];
            this.iS_REPORT = _data["iS_REPORT"];
            this.menU_CODE = _data["menU_CODE"];
            this.type = _data["type"];
            this.form = _data["form"];
            this.typE_ID = _data["typE_ID"];
            if (Array.isArray(_data["syS_GenRowTable_Detail"])) {
                this.syS_GenRowTable_Detail = [] as any;
                for (let item of _data["syS_GenRowTable_Detail"])
                    this.syS_GenRowTable_Detail.push(SYS_GenRowTable_Detail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SYS_GenRowTable {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_GenRowTable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["tablE_NAME"] = this.tablE_NAME;
        data["userID"] = this.userID;
        data["indexRow"] = this.indexRow;
        data["namE_VN"] = this.namE_VN;
        data["namE_EN"] = this.namE_EN;
        data["name"] = this.name;
        data["active"] = this.active;
        data["iD_DT"] = this.iD_DT;
        data["displaY_STATUS"] = this.displaY_STATUS;
        data["codE_DT"] = this.codE_DT;
        data["columN_NAME"] = this.columN_NAME;
        data["namE_VN_DT"] = this.namE_VN_DT;
        data["namE_EN_DT"] = this.namE_EN_DT;
        data["father"] = this.father;
        data["decentralizatioN_DT"] = this.decentralizatioN_DT;
        data["activE_DT"] = this.activE_DT;
        data["alloW_EDIT"] = this.alloW_EDIT;
        data["decentralization"] = this.decentralization;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["xmL_Detail"] = this.xmL_Detail;
        data["approve"] = this.approve;
        data["exporT_PDF"] = this.exporT_PDF;
        data["exporT_EXCEL"] = this.exporT_EXCEL;
        data["iS_REPORT"] = this.iS_REPORT;
        data["menU_CODE"] = this.menU_CODE;
        data["type"] = this.type;
        data["form"] = this.form;
        data["typE_ID"] = this.typE_ID;
        if (Array.isArray(this.syS_GenRowTable_Detail)) {
            data["syS_GenRowTable_Detail"] = [];
            for (let item of this.syS_GenRowTable_Detail)
                data["syS_GenRowTable_Detail"].push(item.toJSON());
        }
        return data;
    }

    clone(): SYS_GenRowTable {
        const json = this.toJSON();
        let result = new SYS_GenRowTable();
        result.init(json);
        return result;
    }
}

export interface ISYS_GenRowTable {
    id?: number;
    code?: string | undefined;
    tablE_NAME?: string | undefined;
    userID?: number | undefined;
    indexRow?: number | undefined;
    namE_VN?: string | undefined;
    namE_EN?: string | undefined;
    name?: string | undefined;
    active?: boolean | undefined;
    iD_DT?: number | undefined;
    displaY_STATUS?: number | undefined;
    codE_DT?: string | undefined;
    columN_NAME?: string | undefined;
    namE_VN_DT?: string | undefined;
    namE_EN_DT?: string | undefined;
    father?: string | undefined;
    decentralizatioN_DT?: string | undefined;
    activE_DT?: boolean | undefined;
    alloW_EDIT?: boolean | undefined;
    decentralization?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    xmL_Detail?: string | undefined;
    approve?: boolean | undefined;
    exporT_PDF?: boolean | undefined;
    exporT_EXCEL?: boolean | undefined;
    iS_REPORT?: boolean | undefined;
    menU_CODE?: string | undefined;
    type?: string | undefined;
    form?: string | undefined;
    typE_ID?: number | undefined;
    syS_GenRowTable_Detail?: SYS_GenRowTable_Detail[] | undefined;
}

export class SYS_GenRowTable_Opption_ENTITY implements ISYS_GenRowTable_Opption_ENTITY {
    tbName?: string | undefined;
    tablE_NAME?: string | undefined;
    name?: string | undefined;
    id?: number | undefined;
    code?: string | undefined;
    type?: string | undefined;

    constructor(data?: ISYS_GenRowTable_Opption_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tbName = _data["tbName"];
            this.tablE_NAME = _data["tablE_NAME"];
            this.name = _data["name"];
            this.id = _data["id"];
            this.code = _data["code"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): SYS_GenRowTable_Opption_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_GenRowTable_Opption_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tbName"] = this.tbName;
        data["tablE_NAME"] = this.tablE_NAME;
        data["name"] = this.name;
        data["id"] = this.id;
        data["code"] = this.code;
        data["type"] = this.type;
        return data;
    }

    clone(): SYS_GenRowTable_Opption_ENTITY {
        const json = this.toJSON();
        let result = new SYS_GenRowTable_Opption_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_GenRowTable_Opption_ENTITY {
    tbName?: string | undefined;
    tablE_NAME?: string | undefined;
    name?: string | undefined;
    id?: number | undefined;
    code?: string | undefined;
    type?: string | undefined;
}

export class SYS_Column_Info_ENTITY implements ISYS_Column_Info_ENTITY {
    id?: number;
    table_name?: string | undefined;
    table_name_old?: string | undefined;
    column_name?: string | undefined;
    name?: string | undefined;
    acronym?: string | undefined;
    notes?: string | undefined;
    language_id?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    type?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ISYS_Column_Info_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.table_name = _data["table_name"];
            this.table_name_old = _data["table_name_old"];
            this.column_name = _data["column_name"];
            this.name = _data["name"];
            this.acronym = _data["acronym"];
            this.notes = _data["notes"];
            this.language_id = _data["language_id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.type = _data["type"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): SYS_Column_Info_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Column_Info_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["table_name"] = this.table_name;
        data["table_name_old"] = this.table_name_old;
        data["column_name"] = this.column_name;
        data["name"] = this.name;
        data["acronym"] = this.acronym;
        data["notes"] = this.notes;
        data["language_id"] = this.language_id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["type"] = this.type;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): SYS_Column_Info_ENTITY {
        const json = this.toJSON();
        let result = new SYS_Column_Info_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_Column_Info_ENTITY {
    id?: number;
    table_name?: string | undefined;
    table_name_old?: string | undefined;
    column_name?: string | undefined;
    name?: string | undefined;
    acronym?: string | undefined;
    notes?: string | undefined;
    language_id?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    type?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class HRM_WorkingTime_ENTITY implements IHRM_WorkingTime_ENTITY {
    id?: number;
    hour?: number | undefined;
    name?: string | undefined;
    start?: moment.Moment | undefined;
    end?: moment.Moment | undefined;

    constructor(data?: IHRM_WorkingTime_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.hour = _data["hour"];
            this.name = _data["name"];
            this.start = _data["start"] ? moment.parseZone(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? moment.parseZone(_data["end"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HRM_WorkingTime_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_WorkingTime_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hour"] = this.hour;
        data["name"] = this.name;
        data["start"] = this.start ? this.start.toISOString(true) : <any>undefined;
        data["end"] = this.end ? this.end.toISOString(true) : <any>undefined;
        return data;
    }

    clone(): HRM_WorkingTime_ENTITY {
        const json = this.toJSON();
        let result = new HRM_WorkingTime_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_WorkingTime_ENTITY {
    id?: number;
    hour?: number | undefined;
    name?: string | undefined;
    start?: moment.Moment | undefined;
    end?: moment.Moment | undefined;
}

export class HRM_Project_Management_Task_WorkTime_Detail_ENTITY implements IHRM_Project_Management_Task_WorkTime_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    project_name?: string | undefined;
    project_code?: string | undefined;
    task_code?: string | undefined;
    task_name?: string | undefined;
    send_approve?: string | undefined;
    account_send?: string | undefined;
    work_time_code?: string | undefined;
    logtime_description?: string | undefined;
    mo_log?: string | undefined;
    tu_log?: string | undefined;
    we_log?: string | undefined;
    th_log?: string | undefined;
    fr_log?: string | undefined;
    sa_log?: string | undefined;
    su_log?: string | undefined;
    mo?: number | undefined;
    tu?: number | undefined;
    we?: number | undefined;
    th?: number | undefined;
    fr?: number | undefined;
    sa?: number | undefined;
    su?: number | undefined;
    total?: number | undefined;

    constructor(data?: IHRM_Project_Management_Task_WorkTime_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.project_name = _data["project_name"];
            this.project_code = _data["project_code"];
            this.task_code = _data["task_code"];
            this.task_name = _data["task_name"];
            this.send_approve = _data["send_approve"];
            this.account_send = _data["account_send"];
            this.work_time_code = _data["work_time_code"];
            this.logtime_description = _data["logtime_description"];
            this.mo_log = _data["mo_log"];
            this.tu_log = _data["tu_log"];
            this.we_log = _data["we_log"];
            this.th_log = _data["th_log"];
            this.fr_log = _data["fr_log"];
            this.sa_log = _data["sa_log"];
            this.su_log = _data["su_log"];
            this.mo = _data["mo"];
            this.tu = _data["tu"];
            this.we = _data["we"];
            this.th = _data["th"];
            this.fr = _data["fr"];
            this.sa = _data["sa"];
            this.su = _data["su"];
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_WorkTime_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_WorkTime_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["project_name"] = this.project_name;
        data["project_code"] = this.project_code;
        data["task_code"] = this.task_code;
        data["task_name"] = this.task_name;
        data["send_approve"] = this.send_approve;
        data["account_send"] = this.account_send;
        data["work_time_code"] = this.work_time_code;
        data["logtime_description"] = this.logtime_description;
        data["mo_log"] = this.mo_log;
        data["tu_log"] = this.tu_log;
        data["we_log"] = this.we_log;
        data["th_log"] = this.th_log;
        data["fr_log"] = this.fr_log;
        data["sa_log"] = this.sa_log;
        data["su_log"] = this.su_log;
        data["mo"] = this.mo;
        data["tu"] = this.tu;
        data["we"] = this.we;
        data["th"] = this.th;
        data["fr"] = this.fr;
        data["sa"] = this.sa;
        data["su"] = this.su;
        data["total"] = this.total;
        return data;
    }

    clone(): HRM_Project_Management_Task_WorkTime_Detail_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_WorkTime_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_WorkTime_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    project_name?: string | undefined;
    project_code?: string | undefined;
    task_code?: string | undefined;
    task_name?: string | undefined;
    send_approve?: string | undefined;
    account_send?: string | undefined;
    work_time_code?: string | undefined;
    logtime_description?: string | undefined;
    mo_log?: string | undefined;
    tu_log?: string | undefined;
    we_log?: string | undefined;
    th_log?: string | undefined;
    fr_log?: string | undefined;
    sa_log?: string | undefined;
    su_log?: string | undefined;
    mo?: number | undefined;
    tu?: number | undefined;
    we?: number | undefined;
    th?: number | undefined;
    fr?: number | undefined;
    sa?: number | undefined;
    su?: number | undefined;
    total?: number | undefined;
}

export class HRM_Project_Management_Task_WorkTime_ENTITY implements IHRM_Project_Management_Task_WorkTime_ENTITY {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    leader_code?: string | undefined;
    leader_name?: string | undefined;
    authorize_approve_worktime?: string | undefined;
    authorize_approve_worktime_name?: string | undefined;
    month?: number | undefined;
    year?: number | undefined;
    total_hour?: number | undefined;
    start_date?: moment.Moment | undefined;
    start_date_f?: string | undefined;
    account_approve?: string | undefined;
    status?: string | undefined;
    status_name?: string | undefined;
    account_code?: string | undefined;
    type?: string | undefined;
    xml?: string | undefined;
    hRM_Project_Management_Task_WorkTime_Details?: HRM_Project_Management_Task_WorkTime_Detail_ENTITY[] | undefined;

    constructor(data?: IHRM_Project_Management_Task_WorkTime_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.leader_code = _data["leader_code"];
            this.leader_name = _data["leader_name"];
            this.authorize_approve_worktime = _data["authorize_approve_worktime"];
            this.authorize_approve_worktime_name = _data["authorize_approve_worktime_name"];
            this.month = _data["month"];
            this.year = _data["year"];
            this.total_hour = _data["total_hour"];
            this.start_date = _data["start_date"] ? moment.parseZone(_data["start_date"].toString()) : <any>undefined;
            this.start_date_f = _data["start_date_f"];
            this.account_approve = _data["account_approve"];
            this.status = _data["status"];
            this.status_name = _data["status_name"];
            this.account_code = _data["account_code"];
            this.type = _data["type"];
            this.xml = _data["xml"];
            if (Array.isArray(_data["hRM_Project_Management_Task_WorkTime_Details"])) {
                this.hRM_Project_Management_Task_WorkTime_Details = [] as any;
                for (let item of _data["hRM_Project_Management_Task_WorkTime_Details"])
                    this.hRM_Project_Management_Task_WorkTime_Details.push(HRM_Project_Management_Task_WorkTime_Detail_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_WorkTime_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_WorkTime_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["leader_code"] = this.leader_code;
        data["leader_name"] = this.leader_name;
        data["authorize_approve_worktime"] = this.authorize_approve_worktime;
        data["authorize_approve_worktime_name"] = this.authorize_approve_worktime_name;
        data["month"] = this.month;
        data["year"] = this.year;
        data["total_hour"] = this.total_hour;
        data["start_date"] = this.start_date ? this.start_date.toISOString(true) : <any>undefined;
        data["start_date_f"] = this.start_date_f;
        data["account_approve"] = this.account_approve;
        data["status"] = this.status;
        data["status_name"] = this.status_name;
        data["account_code"] = this.account_code;
        data["type"] = this.type;
        data["xml"] = this.xml;
        if (Array.isArray(this.hRM_Project_Management_Task_WorkTime_Details)) {
            data["hRM_Project_Management_Task_WorkTime_Details"] = [];
            for (let item of this.hRM_Project_Management_Task_WorkTime_Details)
                data["hRM_Project_Management_Task_WorkTime_Details"].push(item.toJSON());
        }
        return data;
    }

    clone(): HRM_Project_Management_Task_WorkTime_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_WorkTime_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_WorkTime_ENTITY {
    id?: number;
    code?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    leader_code?: string | undefined;
    leader_name?: string | undefined;
    authorize_approve_worktime?: string | undefined;
    authorize_approve_worktime_name?: string | undefined;
    month?: number | undefined;
    year?: number | undefined;
    total_hour?: number | undefined;
    start_date?: moment.Moment | undefined;
    start_date_f?: string | undefined;
    account_approve?: string | undefined;
    status?: string | undefined;
    status_name?: string | undefined;
    account_code?: string | undefined;
    type?: string | undefined;
    xml?: string | undefined;
    hRM_Project_Management_Task_WorkTime_Details?: HRM_Project_Management_Task_WorkTime_Detail_ENTITY[] | undefined;
}

export class HRM_Project_Management_Task_WorkTime_Status_ENTITY implements IHRM_Project_Management_Task_WorkTime_Status_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IHRM_Project_Management_Task_WorkTime_Status_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_WorkTime_Status_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_WorkTime_Status_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): HRM_Project_Management_Task_WorkTime_Status_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_WorkTime_Status_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_WorkTime_Status_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
}

export class HRM_Report_Employee_Management_Task_WorkTime_ENTITY implements IHRM_Report_Employee_Management_Task_WorkTime_ENTITY {
    id?: number | undefined;
    employee_code?: string | undefined;
    date_work?: moment.Moment | undefined;
    start_date?: moment.Moment | undefined;
    end_date?: moment.Moment | undefined;
    date_work_f?: string | undefined;
    date_work_name?: string | undefined;
    hour_work?: number | undefined;
    description_work?: string | undefined;

    constructor(data?: IHRM_Report_Employee_Management_Task_WorkTime_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.employee_code = _data["employee_code"];
            this.date_work = _data["date_work"] ? moment.parseZone(_data["date_work"].toString()) : <any>undefined;
            this.start_date = _data["start_date"] ? moment.parseZone(_data["start_date"].toString()) : <any>undefined;
            this.end_date = _data["end_date"] ? moment.parseZone(_data["end_date"].toString()) : <any>undefined;
            this.date_work_f = _data["date_work_f"];
            this.date_work_name = _data["date_work_name"];
            this.hour_work = _data["hour_work"];
            this.description_work = _data["description_work"];
        }
    }

    static fromJS(data: any): HRM_Report_Employee_Management_Task_WorkTime_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Report_Employee_Management_Task_WorkTime_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["employee_code"] = this.employee_code;
        data["date_work"] = this.date_work ? this.date_work.toISOString(true) : <any>undefined;
        data["start_date"] = this.start_date ? this.start_date.toISOString(true) : <any>undefined;
        data["end_date"] = this.end_date ? this.end_date.toISOString(true) : <any>undefined;
        data["date_work_f"] = this.date_work_f;
        data["date_work_name"] = this.date_work_name;
        data["hour_work"] = this.hour_work;
        data["description_work"] = this.description_work;
        return data;
    }

    clone(): HRM_Report_Employee_Management_Task_WorkTime_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Report_Employee_Management_Task_WorkTime_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Report_Employee_Management_Task_WorkTime_ENTITY {
    id?: number | undefined;
    employee_code?: string | undefined;
    date_work?: moment.Moment | undefined;
    start_date?: moment.Moment | undefined;
    end_date?: moment.Moment | undefined;
    date_work_f?: string | undefined;
    date_work_name?: string | undefined;
    hour_work?: number | undefined;
    description_work?: string | undefined;
}

export class SYS_Menu_Sub implements ISYS_Menu_Sub {
    id?: number;
    location?: number;
    code?: string | undefined;
    namE_VN?: string | undefined;
    namE_EN?: string | undefined;
    name?: string | undefined;
    userID?: number | undefined;
    active?: boolean | undefined;
    decentralization?: string | undefined;
    icon?: string | undefined;
    icoN_APP_IOS?: string | undefined;
    icoN_APP_ANDROID?: string | undefined;
    link?: string | undefined;
    father?: string | undefined;
    lisT_ACCTIONS?: string | undefined;
    type?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    module?: string | undefined;
    approve?: boolean | undefined;
    param?: string | undefined;
    componenT_APP?: string | undefined;
    tablE_NAME?: string | undefined;
    iS_SHOW_APP?: boolean | undefined;
    iS_PIN?: boolean | undefined;
    indeX_PIN?: number | undefined;
    iS_ROUTER_LINK?: boolean | undefined;
    list_account?: string | undefined;

    constructor(data?: ISYS_Menu_Sub) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.location = _data["location"];
            this.code = _data["code"];
            this.namE_VN = _data["namE_VN"];
            this.namE_EN = _data["namE_EN"];
            this.name = _data["name"];
            this.userID = _data["userID"];
            this.active = _data["active"];
            this.decentralization = _data["decentralization"];
            this.icon = _data["icon"];
            this.icoN_APP_IOS = _data["icoN_APP_IOS"];
            this.icoN_APP_ANDROID = _data["icoN_APP_ANDROID"];
            this.link = _data["link"];
            this.father = _data["father"];
            this.lisT_ACCTIONS = _data["lisT_ACCTIONS"];
            this.type = _data["type"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.module = _data["module"];
            this.approve = _data["approve"];
            this.param = _data["param"];
            this.componenT_APP = _data["componenT_APP"];
            this.tablE_NAME = _data["tablE_NAME"];
            this.iS_SHOW_APP = _data["iS_SHOW_APP"];
            this.iS_PIN = _data["iS_PIN"];
            this.indeX_PIN = _data["indeX_PIN"];
            this.iS_ROUTER_LINK = _data["iS_ROUTER_LINK"];
            this.list_account = _data["list_account"];
        }
    }

    static fromJS(data: any): SYS_Menu_Sub {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Menu_Sub();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["location"] = this.location;
        data["code"] = this.code;
        data["namE_VN"] = this.namE_VN;
        data["namE_EN"] = this.namE_EN;
        data["name"] = this.name;
        data["userID"] = this.userID;
        data["active"] = this.active;
        data["decentralization"] = this.decentralization;
        data["icon"] = this.icon;
        data["icoN_APP_IOS"] = this.icoN_APP_IOS;
        data["icoN_APP_ANDROID"] = this.icoN_APP_ANDROID;
        data["link"] = this.link;
        data["father"] = this.father;
        data["lisT_ACCTIONS"] = this.lisT_ACCTIONS;
        data["type"] = this.type;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["module"] = this.module;
        data["approve"] = this.approve;
        data["param"] = this.param;
        data["componenT_APP"] = this.componenT_APP;
        data["tablE_NAME"] = this.tablE_NAME;
        data["iS_SHOW_APP"] = this.iS_SHOW_APP;
        data["iS_PIN"] = this.iS_PIN;
        data["indeX_PIN"] = this.indeX_PIN;
        data["iS_ROUTER_LINK"] = this.iS_ROUTER_LINK;
        data["list_account"] = this.list_account;
        return data;
    }

    clone(): SYS_Menu_Sub {
        const json = this.toJSON();
        let result = new SYS_Menu_Sub();
        result.init(json);
        return result;
    }
}

export interface ISYS_Menu_Sub {
    id?: number;
    location?: number;
    code?: string | undefined;
    namE_VN?: string | undefined;
    namE_EN?: string | undefined;
    name?: string | undefined;
    userID?: number | undefined;
    active?: boolean | undefined;
    decentralization?: string | undefined;
    icon?: string | undefined;
    icoN_APP_IOS?: string | undefined;
    icoN_APP_ANDROID?: string | undefined;
    link?: string | undefined;
    father?: string | undefined;
    lisT_ACCTIONS?: string | undefined;
    type?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    module?: string | undefined;
    approve?: boolean | undefined;
    param?: string | undefined;
    componenT_APP?: string | undefined;
    tablE_NAME?: string | undefined;
    iS_SHOW_APP?: boolean | undefined;
    iS_PIN?: boolean | undefined;
    indeX_PIN?: number | undefined;
    iS_ROUTER_LINK?: boolean | undefined;
    list_account?: string | undefined;
}

export class SYS_Menu implements ISYS_Menu {
    id?: number;
    location?: number | undefined;
    code?: string | undefined;
    namE_VN?: string | undefined;
    namE_EN?: string | undefined;
    name?: string | undefined;
    active?: boolean | undefined;
    icon?: string | undefined;
    icoN_BASE64?: string | undefined;
    icoN_APP_IOS?: string | undefined;
    icoN_APP_ANDROID?: string | undefined;
    link?: string | undefined;
    xml?: string | undefined;
    userID?: number | undefined;
    lisT_ACCTIONS?: string | undefined;
    type?: string | undefined;
    iS_SHOW_APP?: boolean | undefined;
    syS_Menu_Sub?: SYS_Menu_Sub[] | undefined;
    decentralization?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    module?: string | undefined;
    list_account?: string | undefined;
    approve?: boolean | undefined;
    iS_ROUTER_LINK?: boolean | undefined;

    constructor(data?: ISYS_Menu) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.location = _data["location"];
            this.code = _data["code"];
            this.namE_VN = _data["namE_VN"];
            this.namE_EN = _data["namE_EN"];
            this.name = _data["name"];
            this.active = _data["active"];
            this.icon = _data["icon"];
            this.icoN_BASE64 = _data["icoN_BASE64"];
            this.icoN_APP_IOS = _data["icoN_APP_IOS"];
            this.icoN_APP_ANDROID = _data["icoN_APP_ANDROID"];
            this.link = _data["link"];
            this.xml = _data["xml"];
            this.userID = _data["userID"];
            this.lisT_ACCTIONS = _data["lisT_ACCTIONS"];
            this.type = _data["type"];
            this.iS_SHOW_APP = _data["iS_SHOW_APP"];
            if (Array.isArray(_data["syS_Menu_Sub"])) {
                this.syS_Menu_Sub = [] as any;
                for (let item of _data["syS_Menu_Sub"])
                    this.syS_Menu_Sub.push(SYS_Menu_Sub.fromJS(item));
            }
            this.decentralization = _data["decentralization"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.module = _data["module"];
            this.list_account = _data["list_account"];
            this.approve = _data["approve"];
            this.iS_ROUTER_LINK = _data["iS_ROUTER_LINK"];
        }
    }

    static fromJS(data: any): SYS_Menu {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Menu();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["location"] = this.location;
        data["code"] = this.code;
        data["namE_VN"] = this.namE_VN;
        data["namE_EN"] = this.namE_EN;
        data["name"] = this.name;
        data["active"] = this.active;
        data["icon"] = this.icon;
        data["icoN_BASE64"] = this.icoN_BASE64;
        data["icoN_APP_IOS"] = this.icoN_APP_IOS;
        data["icoN_APP_ANDROID"] = this.icoN_APP_ANDROID;
        data["link"] = this.link;
        data["xml"] = this.xml;
        data["userID"] = this.userID;
        data["lisT_ACCTIONS"] = this.lisT_ACCTIONS;
        data["type"] = this.type;
        data["iS_SHOW_APP"] = this.iS_SHOW_APP;
        if (Array.isArray(this.syS_Menu_Sub)) {
            data["syS_Menu_Sub"] = [];
            for (let item of this.syS_Menu_Sub)
                data["syS_Menu_Sub"].push(item.toJSON());
        }
        data["decentralization"] = this.decentralization;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["module"] = this.module;
        data["list_account"] = this.list_account;
        data["approve"] = this.approve;
        data["iS_ROUTER_LINK"] = this.iS_ROUTER_LINK;
        return data;
    }

    clone(): SYS_Menu {
        const json = this.toJSON();
        let result = new SYS_Menu();
        result.init(json);
        return result;
    }
}

export interface ISYS_Menu {
    id?: number;
    location?: number | undefined;
    code?: string | undefined;
    namE_VN?: string | undefined;
    namE_EN?: string | undefined;
    name?: string | undefined;
    active?: boolean | undefined;
    icon?: string | undefined;
    icoN_BASE64?: string | undefined;
    icoN_APP_IOS?: string | undefined;
    icoN_APP_ANDROID?: string | undefined;
    link?: string | undefined;
    xml?: string | undefined;
    userID?: number | undefined;
    lisT_ACCTIONS?: string | undefined;
    type?: string | undefined;
    iS_SHOW_APP?: boolean | undefined;
    syS_Menu_Sub?: SYS_Menu_Sub[] | undefined;
    decentralization?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    module?: string | undefined;
    list_account?: string | undefined;
    approve?: boolean | undefined;
    iS_ROUTER_LINK?: boolean | undefined;
}

export class SYS_Menu_Sub_Pin implements ISYS_Menu_Sub_Pin {
    id?: number;
    indeX_PIN?: number | undefined;
    iS_PIN?: boolean | undefined;
    code?: string | undefined;
    employeE_CODE?: string | undefined;

    constructor(data?: ISYS_Menu_Sub_Pin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.indeX_PIN = _data["indeX_PIN"];
            this.iS_PIN = _data["iS_PIN"];
            this.code = _data["code"];
            this.employeE_CODE = _data["employeE_CODE"];
        }
    }

    static fromJS(data: any): SYS_Menu_Sub_Pin {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Menu_Sub_Pin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["indeX_PIN"] = this.indeX_PIN;
        data["iS_PIN"] = this.iS_PIN;
        data["code"] = this.code;
        data["employeE_CODE"] = this.employeE_CODE;
        return data;
    }

    clone(): SYS_Menu_Sub_Pin {
        const json = this.toJSON();
        let result = new SYS_Menu_Sub_Pin();
        result.init(json);
        return result;
    }
}

export interface ISYS_Menu_Sub_Pin {
    id?: number;
    indeX_PIN?: number | undefined;
    iS_PIN?: boolean | undefined;
    code?: string | undefined;
    employeE_CODE?: string | undefined;
}

export class SYS_Menu_Permission_ENTITY implements ISYS_Menu_Permission_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    master_id?: number | undefined;
    userID?: number | undefined;
    language_id?: number | undefined;
    module?: string | undefined;
    master_code?: string | undefined;
    master_name?: string | undefined;
    sys_menu?: SYS_Menu;
    sys_actions_on_table?: SYS_ActionsOnTable_ENTITY;

    constructor(data?: ISYS_Menu_Permission_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.master_id = _data["master_id"];
            this.userID = _data["userID"];
            this.language_id = _data["language_id"];
            this.module = _data["module"];
            this.master_code = _data["master_code"];
            this.master_name = _data["master_name"];
            this.sys_menu = _data["sys_menu"] ? SYS_Menu.fromJS(_data["sys_menu"]) : <any>undefined;
            this.sys_actions_on_table = _data["sys_actions_on_table"] ? SYS_ActionsOnTable_ENTITY.fromJS(_data["sys_actions_on_table"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SYS_Menu_Permission_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Menu_Permission_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["master_id"] = this.master_id;
        data["userID"] = this.userID;
        data["language_id"] = this.language_id;
        data["module"] = this.module;
        data["master_code"] = this.master_code;
        data["master_name"] = this.master_name;
        data["sys_menu"] = this.sys_menu ? this.sys_menu.toJSON() : <any>undefined;
        data["sys_actions_on_table"] = this.sys_actions_on_table ? this.sys_actions_on_table.toJSON() : <any>undefined;
        return data;
    }

    clone(): SYS_Menu_Permission_ENTITY {
        const json = this.toJSON();
        let result = new SYS_Menu_Permission_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_Menu_Permission_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    master_id?: number | undefined;
    userID?: number | undefined;
    language_id?: number | undefined;
    module?: string | undefined;
    master_code?: string | undefined;
    master_name?: string | undefined;
    sys_menu?: SYS_Menu;
    sys_actions_on_table?: SYS_ActionsOnTable_ENTITY;
}

export class Chat_ContentModel implements IChat_ContentModel {
    chat_content_id?: string | undefined;
    chat_id?: number | undefined;
    user_send?: string | undefined;
    to_user?: string | undefined;
    message_text?: string | undefined;
    message_img?: string | undefined;
    message_file?: string | undefined;
    status?: string | undefined;
    client_avt?: string | undefined;
    arr_img?: string[] | undefined;
    arr_file?: string[] | undefined;
    time_send?: moment.Moment | undefined;
    is_remove?: boolean | undefined;
    is_view?: boolean | undefined;

    constructor(data?: IChat_ContentModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.chat_content_id = _data["chat_content_id"];
            this.chat_id = _data["chat_id"];
            this.user_send = _data["user_send"];
            this.to_user = _data["to_user"];
            this.message_text = _data["message_text"];
            this.message_img = _data["message_img"];
            this.message_file = _data["message_file"];
            this.status = _data["status"];
            this.client_avt = _data["client_avt"];
            if (Array.isArray(_data["arr_img"])) {
                this.arr_img = [] as any;
                for (let item of _data["arr_img"])
                    this.arr_img.push(item);
            }
            if (Array.isArray(_data["arr_file"])) {
                this.arr_file = [] as any;
                for (let item of _data["arr_file"])
                    this.arr_file.push(item);
            }
            this.time_send = _data["time_send"] ? moment.parseZone(_data["time_send"].toString()) : <any>undefined;
            this.is_remove = _data["is_remove"];
            this.is_view = _data["is_view"];
        }
    }

    static fromJS(data: any): Chat_ContentModel {
        data = typeof data === 'object' ? data : {};
        let result = new Chat_ContentModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chat_content_id"] = this.chat_content_id;
        data["chat_id"] = this.chat_id;
        data["user_send"] = this.user_send;
        data["to_user"] = this.to_user;
        data["message_text"] = this.message_text;
        data["message_img"] = this.message_img;
        data["message_file"] = this.message_file;
        data["status"] = this.status;
        data["client_avt"] = this.client_avt;
        if (Array.isArray(this.arr_img)) {
            data["arr_img"] = [];
            for (let item of this.arr_img)
                data["arr_img"].push(item);
        }
        if (Array.isArray(this.arr_file)) {
            data["arr_file"] = [];
            for (let item of this.arr_file)
                data["arr_file"].push(item);
        }
        data["time_send"] = this.time_send ? this.time_send.toISOString(true) : <any>undefined;
        data["is_remove"] = this.is_remove;
        data["is_view"] = this.is_view;
        return data;
    }

    clone(): Chat_ContentModel {
        const json = this.toJSON();
        let result = new Chat_ContentModel();
        result.init(json);
        return result;
    }
}

export interface IChat_ContentModel {
    chat_content_id?: string | undefined;
    chat_id?: number | undefined;
    user_send?: string | undefined;
    to_user?: string | undefined;
    message_text?: string | undefined;
    message_img?: string | undefined;
    message_file?: string | undefined;
    status?: string | undefined;
    client_avt?: string | undefined;
    arr_img?: string[] | undefined;
    arr_file?: string[] | undefined;
    time_send?: moment.Moment | undefined;
    is_remove?: boolean | undefined;
    is_view?: boolean | undefined;
}

export class ChatModel implements IChatModel {
    chat_id?: number | undefined;
    new_message?: number | undefined;
    chat_name?: string | undefined;
    title?: string | undefined;
    body?: string | undefined;
    to?: string | undefined;
    from?: string | undefined;
    arr_to?: any[] | undefined;
    image_url?: string | undefined;
    user_create?: string | undefined;
    tag?: string | undefined;
    type?: string | undefined;
    list_user?: string | undefined;
    chat_review?: string | undefined;
    my_avt?: string | undefined;
    client_avt?: string | undefined;
    group_avt?: string | undefined;
    user_login?: string | undefined;
    xml?: string | undefined;
    background?: string | undefined;
    chat_time?: moment.Moment | undefined;
    chat_time_f?: string | undefined;
    is_view?: boolean | undefined;
    chat_Content?: Chat_ContentModel[] | undefined;

    constructor(data?: IChatModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.chat_id = _data["chat_id"];
            this.new_message = _data["new_message"];
            this.chat_name = _data["chat_name"];
            this.title = _data["title"];
            this.body = _data["body"];
            this.to = _data["to"];
            this.from = _data["from"];
            if (Array.isArray(_data["arr_to"])) {
                this.arr_to = [] as any;
                for (let item of _data["arr_to"])
                    this.arr_to.push(item);
            }
            this.image_url = _data["image_url"];
            this.user_create = _data["user_create"];
            this.tag = _data["tag"];
            this.type = _data["type"];
            this.list_user = _data["list_user"];
            this.chat_review = _data["chat_review"];
            this.my_avt = _data["my_avt"];
            this.client_avt = _data["client_avt"];
            this.group_avt = _data["group_avt"];
            this.user_login = _data["user_login"];
            this.xml = _data["xml"];
            this.background = _data["background"];
            this.chat_time = _data["chat_time"] ? moment.parseZone(_data["chat_time"].toString()) : <any>undefined;
            this.chat_time_f = _data["chat_time_f"];
            this.is_view = _data["is_view"];
            if (Array.isArray(_data["chat_Content"])) {
                this.chat_Content = [] as any;
                for (let item of _data["chat_Content"])
                    this.chat_Content.push(Chat_ContentModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChatModel {
        data = typeof data === 'object' ? data : {};
        let result = new ChatModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chat_id"] = this.chat_id;
        data["new_message"] = this.new_message;
        data["chat_name"] = this.chat_name;
        data["title"] = this.title;
        data["body"] = this.body;
        data["to"] = this.to;
        data["from"] = this.from;
        if (Array.isArray(this.arr_to)) {
            data["arr_to"] = [];
            for (let item of this.arr_to)
                data["arr_to"].push(item);
        }
        data["image_url"] = this.image_url;
        data["user_create"] = this.user_create;
        data["tag"] = this.tag;
        data["type"] = this.type;
        data["list_user"] = this.list_user;
        data["chat_review"] = this.chat_review;
        data["my_avt"] = this.my_avt;
        data["client_avt"] = this.client_avt;
        data["group_avt"] = this.group_avt;
        data["user_login"] = this.user_login;
        data["xml"] = this.xml;
        data["background"] = this.background;
        data["chat_time"] = this.chat_time ? this.chat_time.toISOString(true) : <any>undefined;
        data["chat_time_f"] = this.chat_time_f;
        data["is_view"] = this.is_view;
        if (Array.isArray(this.chat_Content)) {
            data["chat_Content"] = [];
            for (let item of this.chat_Content)
                data["chat_Content"].push(item.toJSON());
        }
        return data;
    }

    clone(): ChatModel {
        const json = this.toJSON();
        let result = new ChatModel();
        result.init(json);
        return result;
    }
}

export interface IChatModel {
    chat_id?: number | undefined;
    new_message?: number | undefined;
    chat_name?: string | undefined;
    title?: string | undefined;
    body?: string | undefined;
    to?: string | undefined;
    from?: string | undefined;
    arr_to?: any[] | undefined;
    image_url?: string | undefined;
    user_create?: string | undefined;
    tag?: string | undefined;
    type?: string | undefined;
    list_user?: string | undefined;
    chat_review?: string | undefined;
    my_avt?: string | undefined;
    client_avt?: string | undefined;
    group_avt?: string | undefined;
    user_login?: string | undefined;
    xml?: string | undefined;
    background?: string | undefined;
    chat_time?: moment.Moment | undefined;
    chat_time_f?: string | undefined;
    is_view?: boolean | undefined;
    chat_Content?: Chat_ContentModel[] | undefined;
}

export class FileModel implements IFileModel {
    id?: number;
    fileName?: string | undefined;
    fileFormat?: string | undefined;
    filePath?: string | undefined;
    fullPath?: string | undefined;
    contentType?: string | undefined;
    altText?: string | undefined;
    description?: string | undefined;
    message?: string | undefined;
    path?: string | undefined;
    ref_MasterID?: number | undefined;
    ref_Master_str?: string | undefined;
    status?: number | undefined;
    size?: number;
    tbName?: string | undefined;
    colName?: string | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
    code?: string | undefined;

    constructor(data?: IFileModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fileName = _data["fileName"];
            this.fileFormat = _data["fileFormat"];
            this.filePath = _data["filePath"];
            this.fullPath = _data["fullPath"];
            this.contentType = _data["contentType"];
            this.altText = _data["altText"];
            this.description = _data["description"];
            this.message = _data["message"];
            this.path = _data["path"];
            this.ref_MasterID = _data["ref_MasterID"];
            this.ref_Master_str = _data["ref_Master_str"];
            this.status = _data["status"];
            this.size = _data["size"];
            this.tbName = _data["tbName"];
            this.colName = _data["colName"];
            this.approve = _data["approve"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FileModel {
        data = typeof data === 'object' ? data : {};
        let result = new FileModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fileName"] = this.fileName;
        data["fileFormat"] = this.fileFormat;
        data["filePath"] = this.filePath;
        data["fullPath"] = this.fullPath;
        data["contentType"] = this.contentType;
        data["altText"] = this.altText;
        data["description"] = this.description;
        data["message"] = this.message;
        data["path"] = this.path;
        data["ref_MasterID"] = this.ref_MasterID;
        data["ref_Master_str"] = this.ref_Master_str;
        data["status"] = this.status;
        data["size"] = this.size;
        data["tbName"] = this.tbName;
        data["colName"] = this.colName;
        data["approve"] = this.approve;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        data["code"] = this.code;
        return data;
    }

    clone(): FileModel {
        const json = this.toJSON();
        let result = new FileModel();
        result.init(json);
        return result;
    }
}

export interface IFileModel {
    id?: number;
    fileName?: string | undefined;
    fileFormat?: string | undefined;
    filePath?: string | undefined;
    fullPath?: string | undefined;
    contentType?: string | undefined;
    altText?: string | undefined;
    description?: string | undefined;
    message?: string | undefined;
    path?: string | undefined;
    ref_MasterID?: number | undefined;
    ref_Master_str?: string | undefined;
    status?: number | undefined;
    size?: number;
    tbName?: string | undefined;
    colName?: string | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
    code?: string | undefined;
}

export class Messenger implements IMessenger {
    id?: string | undefined;
    account_id?: string | undefined;
    account_send?: string | undefined;
    to_user?: string | undefined;
    to_user_last_name?: string | undefined;
    to_user_first_name?: string | undefined;
    message?: string | undefined;
    time_add?: moment.Moment | undefined;
    chat_id?: number;
    message_id?: string | undefined;
    type?: string | undefined;
    tag?: string | undefined;
    message_text?: string | undefined;
    message_new?: number;
    chatModel?: ChatModel;
    message_images?: FileModel[] | undefined;
    message_files?: FileModel[] | undefined;
    is_remove?: boolean | undefined;
    time_remove?: moment.Moment | undefined;
    list_user?: string[] | undefined;

    constructor(data?: IMessenger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.account_id = _data["account_id"];
            this.account_send = _data["account_send"];
            this.to_user = _data["to_user"];
            this.to_user_last_name = _data["to_user_last_name"];
            this.to_user_first_name = _data["to_user_first_name"];
            this.message = _data["message"];
            this.time_add = _data["time_add"] ? moment.parseZone(_data["time_add"].toString()) : <any>undefined;
            this.chat_id = _data["chat_id"];
            this.message_id = _data["message_id"];
            this.type = _data["type"];
            this.tag = _data["tag"];
            this.message_text = _data["message_text"];
            this.message_new = _data["message_new"];
            this.chatModel = _data["chatModel"] ? ChatModel.fromJS(_data["chatModel"]) : <any>undefined;
            if (Array.isArray(_data["message_images"])) {
                this.message_images = [] as any;
                for (let item of _data["message_images"])
                    this.message_images.push(FileModel.fromJS(item));
            }
            if (Array.isArray(_data["message_files"])) {
                this.message_files = [] as any;
                for (let item of _data["message_files"])
                    this.message_files.push(FileModel.fromJS(item));
            }
            this.is_remove = _data["is_remove"];
            this.time_remove = _data["time_remove"] ? moment.parseZone(_data["time_remove"].toString()) : <any>undefined;
            if (Array.isArray(_data["list_user"])) {
                this.list_user = [] as any;
                for (let item of _data["list_user"])
                    this.list_user.push(item);
            }
        }
    }

    static fromJS(data: any): Messenger {
        data = typeof data === 'object' ? data : {};
        let result = new Messenger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["account_id"] = this.account_id;
        data["account_send"] = this.account_send;
        data["to_user"] = this.to_user;
        data["to_user_last_name"] = this.to_user_last_name;
        data["to_user_first_name"] = this.to_user_first_name;
        data["message"] = this.message;
        data["time_add"] = this.time_add ? this.time_add.toISOString(true) : <any>undefined;
        data["chat_id"] = this.chat_id;
        data["message_id"] = this.message_id;
        data["type"] = this.type;
        data["tag"] = this.tag;
        data["message_text"] = this.message_text;
        data["message_new"] = this.message_new;
        data["chatModel"] = this.chatModel ? this.chatModel.toJSON() : <any>undefined;
        if (Array.isArray(this.message_images)) {
            data["message_images"] = [];
            for (let item of this.message_images)
                data["message_images"].push(item.toJSON());
        }
        if (Array.isArray(this.message_files)) {
            data["message_files"] = [];
            for (let item of this.message_files)
                data["message_files"].push(item.toJSON());
        }
        data["is_remove"] = this.is_remove;
        data["time_remove"] = this.time_remove ? this.time_remove.toISOString(true) : <any>undefined;
        if (Array.isArray(this.list_user)) {
            data["list_user"] = [];
            for (let item of this.list_user)
                data["list_user"].push(item);
        }
        return data;
    }

    clone(): Messenger {
        const json = this.toJSON();
        let result = new Messenger();
        result.init(json);
        return result;
    }
}

export interface IMessenger {
    id?: string | undefined;
    account_id?: string | undefined;
    account_send?: string | undefined;
    to_user?: string | undefined;
    to_user_last_name?: string | undefined;
    to_user_first_name?: string | undefined;
    message?: string | undefined;
    time_add?: moment.Moment | undefined;
    chat_id?: number;
    message_id?: string | undefined;
    type?: string | undefined;
    tag?: string | undefined;
    message_text?: string | undefined;
    message_new?: number;
    chatModel?: ChatModel;
    message_images?: FileModel[] | undefined;
    message_files?: FileModel[] | undefined;
    is_remove?: boolean | undefined;
    time_remove?: moment.Moment | undefined;
    list_user?: string[] | undefined;
}

export class NotificationModel implements INotificationModel {
    id?: number;
    new_message?: number | undefined;
    account_id?: number | undefined;
    user_send?: string | undefined;
    client_avt?: string | undefined;
    top?: number | undefined;
    total?: number | undefined;
    code?: string | undefined;
    title?: string | undefined;
    message?: string | undefined;
    link_direct?: string | undefined;
    type?: string | undefined;
    string_time?: string | undefined;
    arr_to?: any[] | undefined;
    time?: moment.Moment | undefined;
    isView?: boolean | undefined;
    isRead?: boolean | undefined;

    constructor(data?: INotificationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.new_message = _data["new_message"];
            this.account_id = _data["account_id"];
            this.user_send = _data["user_send"];
            this.client_avt = _data["client_avt"];
            this.top = _data["top"];
            this.total = _data["total"];
            this.code = _data["code"];
            this.title = _data["title"];
            this.message = _data["message"];
            this.link_direct = _data["link_direct"];
            this.type = _data["type"];
            this.string_time = _data["string_time"];
            if (Array.isArray(_data["arr_to"])) {
                this.arr_to = [] as any;
                for (let item of _data["arr_to"])
                    this.arr_to.push(item);
            }
            this.time = _data["time"] ? moment.parseZone(_data["time"].toString()) : <any>undefined;
            this.isView = _data["isView"];
            this.isRead = _data["isRead"];
        }
    }

    static fromJS(data: any): NotificationModel {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["new_message"] = this.new_message;
        data["account_id"] = this.account_id;
        data["user_send"] = this.user_send;
        data["client_avt"] = this.client_avt;
        data["top"] = this.top;
        data["total"] = this.total;
        data["code"] = this.code;
        data["title"] = this.title;
        data["message"] = this.message;
        data["link_direct"] = this.link_direct;
        data["type"] = this.type;
        data["string_time"] = this.string_time;
        if (Array.isArray(this.arr_to)) {
            data["arr_to"] = [];
            for (let item of this.arr_to)
                data["arr_to"].push(item);
        }
        data["time"] = this.time ? this.time.toISOString(true) : <any>undefined;
        data["isView"] = this.isView;
        data["isRead"] = this.isRead;
        return data;
    }

    clone(): NotificationModel {
        const json = this.toJSON();
        let result = new NotificationModel();
        result.init(json);
        return result;
    }
}

export interface INotificationModel {
    id?: number;
    new_message?: number | undefined;
    account_id?: number | undefined;
    user_send?: string | undefined;
    client_avt?: string | undefined;
    top?: number | undefined;
    total?: number | undefined;
    code?: string | undefined;
    title?: string | undefined;
    message?: string | undefined;
    link_direct?: string | undefined;
    type?: string | undefined;
    string_time?: string | undefined;
    arr_to?: any[] | undefined;
    time?: moment.Moment | undefined;
    isView?: boolean | undefined;
    isRead?: boolean | undefined;
}

export class Notification_Setting_ENTITY implements INotification_Setting_ENTITY {
    id?: number;
    name?: string | undefined;
    active?: boolean | undefined;
    code?: string | undefined;
    group_id?: number | undefined;
    group_name?: string | undefined;
    employee_code?: string | undefined;

    constructor(data?: INotification_Setting_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.active = _data["active"];
            this.code = _data["code"];
            this.group_id = _data["group_id"];
            this.group_name = _data["group_name"];
            this.employee_code = _data["employee_code"];
        }
    }

    static fromJS(data: any): Notification_Setting_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Notification_Setting_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["active"] = this.active;
        data["code"] = this.code;
        data["group_id"] = this.group_id;
        data["group_name"] = this.group_name;
        data["employee_code"] = this.employee_code;
        return data;
    }

    clone(): Notification_Setting_ENTITY {
        const json = this.toJSON();
        let result = new Notification_Setting_ENTITY();
        result.init(json);
        return result;
    }
}

export interface INotification_Setting_ENTITY {
    id?: number;
    name?: string | undefined;
    active?: boolean | undefined;
    code?: string | undefined;
    group_id?: number | undefined;
    group_name?: string | undefined;
    employee_code?: string | undefined;
}

export class Notification_Setting_Group_ENTITY implements INotification_Setting_Group_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    employee_code?: string | undefined;
    notification_Settings?: Notification_Setting_ENTITY[] | undefined;

    constructor(data?: INotification_Setting_Group_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.employee_code = _data["employee_code"];
            if (Array.isArray(_data["notification_Settings"])) {
                this.notification_Settings = [] as any;
                for (let item of _data["notification_Settings"])
                    this.notification_Settings.push(Notification_Setting_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Notification_Setting_Group_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Notification_Setting_Group_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["employee_code"] = this.employee_code;
        if (Array.isArray(this.notification_Settings)) {
            data["notification_Settings"] = [];
            for (let item of this.notification_Settings)
                data["notification_Settings"].push(item.toJSON());
        }
        return data;
    }

    clone(): Notification_Setting_Group_ENTITY {
        const json = this.toJSON();
        let result = new Notification_Setting_Group_ENTITY();
        result.init(json);
        return result;
    }
}

export interface INotification_Setting_Group_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    employee_code?: string | undefined;
    notification_Settings?: Notification_Setting_ENTITY[] | undefined;
}

export class Notification_HRM_ENTITY implements INotification_HRM_ENTITY {
    id?: number;
    new_message?: number | undefined;
    title?: string | undefined;
    message?: string | undefined;
    link_direct?: string | undefined;
    time_add?: moment.Moment | undefined;
    type?: string | undefined;
    isView?: boolean | undefined;
    isRead?: boolean | undefined;
    string_time?: string | undefined;
    account_id?: number | undefined;
    account_avarta?: string | undefined;
    account_avarta_text?: string | undefined;
    total?: number | undefined;
    top?: number | undefined;
    module?: string | undefined;
    code_in_form?: string | undefined;
    component_app?: string | undefined;
    component_name?: string | undefined;

    constructor(data?: INotification_HRM_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.new_message = _data["new_message"];
            this.title = _data["title"];
            this.message = _data["message"];
            this.link_direct = _data["link_direct"];
            this.time_add = _data["time_add"] ? moment.parseZone(_data["time_add"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.isView = _data["isView"];
            this.isRead = _data["isRead"];
            this.string_time = _data["string_time"];
            this.account_id = _data["account_id"];
            this.account_avarta = _data["account_avarta"];
            this.account_avarta_text = _data["account_avarta_text"];
            this.total = _data["total"];
            this.top = _data["top"];
            this.module = _data["module"];
            this.code_in_form = _data["code_in_form"];
            this.component_app = _data["component_app"];
            this.component_name = _data["component_name"];
        }
    }

    static fromJS(data: any): Notification_HRM_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Notification_HRM_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["new_message"] = this.new_message;
        data["title"] = this.title;
        data["message"] = this.message;
        data["link_direct"] = this.link_direct;
        data["time_add"] = this.time_add ? this.time_add.toISOString(true) : <any>undefined;
        data["type"] = this.type;
        data["isView"] = this.isView;
        data["isRead"] = this.isRead;
        data["string_time"] = this.string_time;
        data["account_id"] = this.account_id;
        data["account_avarta"] = this.account_avarta;
        data["account_avarta_text"] = this.account_avarta_text;
        data["total"] = this.total;
        data["top"] = this.top;
        data["module"] = this.module;
        data["code_in_form"] = this.code_in_form;
        data["component_app"] = this.component_app;
        data["component_name"] = this.component_name;
        return data;
    }

    clone(): Notification_HRM_ENTITY {
        const json = this.toJSON();
        let result = new Notification_HRM_ENTITY();
        result.init(json);
        return result;
    }
}

export interface INotification_HRM_ENTITY {
    id?: number;
    new_message?: number | undefined;
    title?: string | undefined;
    message?: string | undefined;
    link_direct?: string | undefined;
    time_add?: moment.Moment | undefined;
    type?: string | undefined;
    isView?: boolean | undefined;
    isRead?: boolean | undefined;
    string_time?: string | undefined;
    account_id?: number | undefined;
    account_avarta?: string | undefined;
    account_avarta_text?: string | undefined;
    total?: number | undefined;
    top?: number | undefined;
    module?: string | undefined;
    code_in_form?: string | undefined;
    component_app?: string | undefined;
    component_name?: string | undefined;
}

export class OB_Account_ENTITY implements IOB_Account_ENTITY {
    id?: number;
    code?: string | undefined;
    account?: string | undefined;
    account_name?: string | undefined;
    creditor_money_fc?: number | undefined;
    creditor_money?: number | undefined;
    debitor_money_fc?: number | undefined;
    debitor_money?: number | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    exchange_rate?: number | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    fee_code?: string | undefined;
    company_code?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IOB_Account_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.account = _data["account"];
            this.account_name = _data["account_name"];
            this.creditor_money_fc = _data["creditor_money_fc"];
            this.creditor_money = _data["creditor_money"];
            this.debitor_money_fc = _data["debitor_money_fc"];
            this.debitor_money = _data["debitor_money"];
            this.code_fc = _data["code_fc"];
            this.code_symbol = _data["code_symbol"];
            this.exchange_rate = _data["exchange_rate"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.fee_code = _data["fee_code"];
            this.company_code = _data["company_code"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): OB_Account_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new OB_Account_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["account"] = this.account;
        data["account_name"] = this.account_name;
        data["creditor_money_fc"] = this.creditor_money_fc;
        data["creditor_money"] = this.creditor_money;
        data["debitor_money_fc"] = this.debitor_money_fc;
        data["debitor_money"] = this.debitor_money;
        data["code_fc"] = this.code_fc;
        data["code_symbol"] = this.code_symbol;
        data["exchange_rate"] = this.exchange_rate;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["fee_code"] = this.fee_code;
        data["company_code"] = this.company_code;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): OB_Account_ENTITY {
        const json = this.toJSON();
        let result = new OB_Account_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IOB_Account_ENTITY {
    id?: number;
    code?: string | undefined;
    account?: string | undefined;
    account_name?: string | undefined;
    creditor_money_fc?: number | undefined;
    creditor_money?: number | undefined;
    debitor_money_fc?: number | undefined;
    debitor_money?: number | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    exchange_rate?: number | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    fee_code?: string | undefined;
    company_code?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class OB_Customer_ENTITY implements IOB_Customer_ENTITY {
    id?: number;
    code?: string | undefined;
    account_code?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_money_fc?: number | undefined;
    creditor_money_fc?: number | undefined;
    debitor_money?: number | undefined;
    creditor_money?: number | undefined;
    department_code?: string | undefined;
    contract_code?: string | undefined;
    fee_code?: string | undefined;
    construction_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IOB_Customer_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.account_code = _data["account_code"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.code_fc = _data["code_fc"];
            this.code_symbol = _data["code_symbol"];
            this.exchange_rate = _data["exchange_rate"];
            this.debitor_money_fc = _data["debitor_money_fc"];
            this.creditor_money_fc = _data["creditor_money_fc"];
            this.debitor_money = _data["debitor_money"];
            this.creditor_money = _data["creditor_money"];
            this.department_code = _data["department_code"];
            this.contract_code = _data["contract_code"];
            this.fee_code = _data["fee_code"];
            this.construction_code = _data["construction_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): OB_Customer_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new OB_Customer_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["account_code"] = this.account_code;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["code_fc"] = this.code_fc;
        data["code_symbol"] = this.code_symbol;
        data["exchange_rate"] = this.exchange_rate;
        data["debitor_money_fc"] = this.debitor_money_fc;
        data["creditor_money_fc"] = this.creditor_money_fc;
        data["debitor_money"] = this.debitor_money;
        data["creditor_money"] = this.creditor_money;
        data["department_code"] = this.department_code;
        data["contract_code"] = this.contract_code;
        data["fee_code"] = this.fee_code;
        data["construction_code"] = this.construction_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): OB_Customer_ENTITY {
        const json = this.toJSON();
        let result = new OB_Customer_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IOB_Customer_ENTITY {
    id?: number;
    code?: string | undefined;
    account_code?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_money_fc?: number | undefined;
    creditor_money_fc?: number | undefined;
    debitor_money?: number | undefined;
    creditor_money?: number | undefined;
    department_code?: string | undefined;
    contract_code?: string | undefined;
    fee_code?: string | undefined;
    construction_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class OB_Goods_ENTITY implements IOB_Goods_ENTITY {
    code?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_name?: string | undefined;
    goods_symbol?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    quantity?: number | undefined;
    opening_balance?: number | undefined;
    opening_balance_fc?: number | undefined;
    type?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IOB_Goods_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.warehouse_code = _data["warehouse_code"];
            this.warehouse_name = _data["warehouse_name"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.quantity = _data["quantity"];
            this.opening_balance = _data["opening_balance"];
            this.opening_balance_fc = _data["opening_balance_fc"];
            this.type = _data["type"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): OB_Goods_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new OB_Goods_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["warehouse_code"] = this.warehouse_code;
        data["warehouse_name"] = this.warehouse_name;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["quantity"] = this.quantity;
        data["opening_balance"] = this.opening_balance;
        data["opening_balance_fc"] = this.opening_balance_fc;
        data["type"] = this.type;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): OB_Goods_ENTITY {
        const json = this.toJSON();
        let result = new OB_Goods_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IOB_Goods_ENTITY {
    code?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_name?: string | undefined;
    goods_symbol?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    quantity?: number | undefined;
    opening_balance?: number | undefined;
    opening_balance_fc?: number | undefined;
    type?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class OB_Input_Output_Inventory_ENTITY implements IOB_Input_Output_Inventory_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    warehouse_code?: string | undefined;
    warehouse_name?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_serial?: string | undefined;
    goods_name?: string | undefined;
    type?: string | undefined;
    quantity?: number | undefined;
    opening_balance?: number | undefined;
    opening_balance_fc?: number | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IOB_Input_Output_Inventory_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.warehouse_code = _data["warehouse_code"];
            this.warehouse_name = _data["warehouse_name"];
            this.goods_code = _data["goods_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_serial = _data["goods_serial"];
            this.goods_name = _data["goods_name"];
            this.type = _data["type"];
            this.quantity = _data["quantity"];
            this.opening_balance = _data["opening_balance"];
            this.opening_balance_fc = _data["opening_balance_fc"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): OB_Input_Output_Inventory_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new OB_Input_Output_Inventory_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["warehouse_code"] = this.warehouse_code;
        data["warehouse_name"] = this.warehouse_name;
        data["goods_code"] = this.goods_code;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_serial"] = this.goods_serial;
        data["goods_name"] = this.goods_name;
        data["type"] = this.type;
        data["quantity"] = this.quantity;
        data["opening_balance"] = this.opening_balance;
        data["opening_balance_fc"] = this.opening_balance_fc;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): OB_Input_Output_Inventory_ENTITY {
        const json = this.toJSON();
        let result = new OB_Input_Output_Inventory_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IOB_Input_Output_Inventory_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    warehouse_code?: string | undefined;
    warehouse_name?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_serial?: string | undefined;
    goods_name?: string | undefined;
    type?: string | undefined;
    quantity?: number | undefined;
    opening_balance?: number | undefined;
    opening_balance_fc?: number | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class OB_Input_Output_Inventory_Synchronized_ENTITY implements IOB_Input_Output_Inventory_Synchronized_ENTITY {
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;

    constructor(data?: IOB_Input_Output_Inventory_Synchronized_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.voucher_year = _data["voucher_year"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): OB_Input_Output_Inventory_Synchronized_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new OB_Input_Output_Inventory_Synchronized_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["voucher_year"] = this.voucher_year;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): OB_Input_Output_Inventory_Synchronized_ENTITY {
        const json = this.toJSON();
        let result = new OB_Input_Output_Inventory_Synchronized_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IOB_Input_Output_Inventory_Synchronized_ENTITY {
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
}

export class POS_Product_ENTITY implements IPOS_Product_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    sku?: string | undefined;
    avartar?: string | undefined;
    images?: string | undefined;
    group_code?: string | undefined;
    group_code_name?: string | undefined;
    sku_code?: string | undefined;
    barcode?: string | undefined;
    purchase_price?: number | undefined;
    purchase_price_f?: string | undefined;
    price?: number | undefined;
    price_f?: string | undefined;
    unit_code?: string | undefined;
    unit_code_name?: string | undefined;
    inventory_level_min?: number | undefined;
    inventory_level_max?: number | undefined;
    business_status?: boolean | undefined;
    business_status_name?: string | undefined;
    color_code?: string | undefined;
    size_code?: string | undefined;
    size_code_name?: string | undefined;
    weight?: number | undefined;
    size_hieght?: number | undefined;
    size_width?: number | undefined;
    size_length?: number | undefined;
    warehouse_location?: string | undefined;
    display_location?: string | undefined;
    notes?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    type?: string | undefined;

    constructor(data?: IPOS_Product_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.sku = _data["sku"];
            this.avartar = _data["avartar"];
            this.images = _data["images"];
            this.group_code = _data["group_code"];
            this.group_code_name = _data["group_code_name"];
            this.sku_code = _data["sku_code"];
            this.barcode = _data["barcode"];
            this.purchase_price = _data["purchase_price"];
            this.purchase_price_f = _data["purchase_price_f"];
            this.price = _data["price"];
            this.price_f = _data["price_f"];
            this.unit_code = _data["unit_code"];
            this.unit_code_name = _data["unit_code_name"];
            this.inventory_level_min = _data["inventory_level_min"];
            this.inventory_level_max = _data["inventory_level_max"];
            this.business_status = _data["business_status"];
            this.business_status_name = _data["business_status_name"];
            this.color_code = _data["color_code"];
            this.size_code = _data["size_code"];
            this.size_code_name = _data["size_code_name"];
            this.weight = _data["weight"];
            this.size_hieght = _data["size_hieght"];
            this.size_width = _data["size_width"];
            this.size_length = _data["size_length"];
            this.warehouse_location = _data["warehouse_location"];
            this.display_location = _data["display_location"];
            this.notes = _data["notes"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_id = _data["account_id"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): POS_Product_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new POS_Product_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["sku"] = this.sku;
        data["avartar"] = this.avartar;
        data["images"] = this.images;
        data["group_code"] = this.group_code;
        data["group_code_name"] = this.group_code_name;
        data["sku_code"] = this.sku_code;
        data["barcode"] = this.barcode;
        data["purchase_price"] = this.purchase_price;
        data["purchase_price_f"] = this.purchase_price_f;
        data["price"] = this.price;
        data["price_f"] = this.price_f;
        data["unit_code"] = this.unit_code;
        data["unit_code_name"] = this.unit_code_name;
        data["inventory_level_min"] = this.inventory_level_min;
        data["inventory_level_max"] = this.inventory_level_max;
        data["business_status"] = this.business_status;
        data["business_status_name"] = this.business_status_name;
        data["color_code"] = this.color_code;
        data["size_code"] = this.size_code;
        data["size_code_name"] = this.size_code_name;
        data["weight"] = this.weight;
        data["size_hieght"] = this.size_hieght;
        data["size_width"] = this.size_width;
        data["size_length"] = this.size_length;
        data["warehouse_location"] = this.warehouse_location;
        data["display_location"] = this.display_location;
        data["notes"] = this.notes;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_id"] = this.account_id;
        data["type"] = this.type;
        return data;
    }

    clone(): POS_Product_ENTITY {
        const json = this.toJSON();
        let result = new POS_Product_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IPOS_Product_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    sku?: string | undefined;
    avartar?: string | undefined;
    images?: string | undefined;
    group_code?: string | undefined;
    group_code_name?: string | undefined;
    sku_code?: string | undefined;
    barcode?: string | undefined;
    purchase_price?: number | undefined;
    purchase_price_f?: string | undefined;
    price?: number | undefined;
    price_f?: string | undefined;
    unit_code?: string | undefined;
    unit_code_name?: string | undefined;
    inventory_level_min?: number | undefined;
    inventory_level_max?: number | undefined;
    business_status?: boolean | undefined;
    business_status_name?: string | undefined;
    color_code?: string | undefined;
    size_code?: string | undefined;
    size_code_name?: string | undefined;
    weight?: number | undefined;
    size_hieght?: number | undefined;
    size_width?: number | undefined;
    size_length?: number | undefined;
    warehouse_location?: string | undefined;
    display_location?: string | undefined;
    notes?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    type?: string | undefined;
}

export class POS_Product_Color_ENTITY implements IPOS_Product_Color_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    symbol?: string | undefined;

    constructor(data?: IPOS_Product_Color_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.symbol = _data["symbol"];
        }
    }

    static fromJS(data: any): POS_Product_Color_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new POS_Product_Color_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["symbol"] = this.symbol;
        return data;
    }

    clone(): POS_Product_Color_ENTITY {
        const json = this.toJSON();
        let result = new POS_Product_Color_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IPOS_Product_Color_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    symbol?: string | undefined;
}

export class POS_Product_Group_ENTITY implements IPOS_Product_Group_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    code_master?: string | undefined;
    notes?: string | undefined;
    type?: string | undefined;

    constructor(data?: IPOS_Product_Group_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.code_master = _data["code_master"];
            this.notes = _data["notes"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): POS_Product_Group_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new POS_Product_Group_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["code_master"] = this.code_master;
        data["notes"] = this.notes;
        data["type"] = this.type;
        return data;
    }

    clone(): POS_Product_Group_ENTITY {
        const json = this.toJSON();
        let result = new POS_Product_Group_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IPOS_Product_Group_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    code_master?: string | undefined;
    notes?: string | undefined;
    type?: string | undefined;
}

export class POS_Product_Size_ENTITY implements IPOS_Product_Size_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    symbol?: string | undefined;

    constructor(data?: IPOS_Product_Size_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.symbol = _data["symbol"];
        }
    }

    static fromJS(data: any): POS_Product_Size_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new POS_Product_Size_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["symbol"] = this.symbol;
        return data;
    }

    clone(): POS_Product_Size_ENTITY {
        const json = this.toJSON();
        let result = new POS_Product_Size_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IPOS_Product_Size_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    symbol?: string | undefined;
}

export class POS_Product_Unit_ENTITY implements IPOS_Product_Unit_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;

    constructor(data?: IPOS_Product_Unit_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): POS_Product_Unit_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new POS_Product_Unit_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }

    clone(): POS_Product_Unit_ENTITY {
        const json = this.toJSON();
        let result = new POS_Product_Unit_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IPOS_Product_Unit_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
}

export class POS_Product_Gift_ENTITY implements IPOS_Product_Gift_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    notes?: string | undefined;
    type_gift?: number | undefined;
    type_gift_name?: string | undefined;
    type_value?: number | undefined;
    type_value_name?: string | undefined;
    value?: number | undefined;
    start_date?: moment.Moment | undefined;
    start_date_f?: string | undefined;
    end_date?: moment.Moment | undefined;
    end_date_f?: string | undefined;
    status?: boolean | undefined;
    status_name?: string | undefined;
    order_value?: number | undefined;

    constructor(data?: IPOS_Product_Gift_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.notes = _data["notes"];
            this.type_gift = _data["type_gift"];
            this.type_gift_name = _data["type_gift_name"];
            this.type_value = _data["type_value"];
            this.type_value_name = _data["type_value_name"];
            this.value = _data["value"];
            this.start_date = _data["start_date"] ? moment.parseZone(_data["start_date"].toString()) : <any>undefined;
            this.start_date_f = _data["start_date_f"];
            this.end_date = _data["end_date"] ? moment.parseZone(_data["end_date"].toString()) : <any>undefined;
            this.end_date_f = _data["end_date_f"];
            this.status = _data["status"];
            this.status_name = _data["status_name"];
            this.order_value = _data["order_value"];
        }
    }

    static fromJS(data: any): POS_Product_Gift_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new POS_Product_Gift_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["notes"] = this.notes;
        data["type_gift"] = this.type_gift;
        data["type_gift_name"] = this.type_gift_name;
        data["type_value"] = this.type_value;
        data["type_value_name"] = this.type_value_name;
        data["value"] = this.value;
        data["start_date"] = this.start_date ? this.start_date.toISOString(true) : <any>undefined;
        data["start_date_f"] = this.start_date_f;
        data["end_date"] = this.end_date ? this.end_date.toISOString(true) : <any>undefined;
        data["end_date_f"] = this.end_date_f;
        data["status"] = this.status;
        data["status_name"] = this.status_name;
        data["order_value"] = this.order_value;
        return data;
    }

    clone(): POS_Product_Gift_ENTITY {
        const json = this.toJSON();
        let result = new POS_Product_Gift_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IPOS_Product_Gift_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    notes?: string | undefined;
    type_gift?: number | undefined;
    type_gift_name?: string | undefined;
    type_value?: number | undefined;
    type_value_name?: string | undefined;
    value?: number | undefined;
    start_date?: moment.Moment | undefined;
    start_date_f?: string | undefined;
    end_date?: moment.Moment | undefined;
    end_date_f?: string | undefined;
    status?: boolean | undefined;
    status_name?: string | undefined;
    order_value?: number | undefined;
}

export class HRM_Project_Management_Task_Comment_ENTITY implements IHRM_Project_Management_Task_Comment_ENTITY {
    id?: number;
    user_add?: number;
    code?: string | undefined;
    user_avartar?: string | undefined;
    user_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_add_f?: string | undefined;
    content?: string | undefined;
    attach_files?: string | undefined;
    task_code?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;

    constructor(data?: IHRM_Project_Management_Task_Comment_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.user_add = _data["user_add"];
            this.code = _data["code"];
            this.user_avartar = _data["user_avartar"];
            this.user_name = _data["user_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_add_f = _data["date_add_f"];
            this.content = _data["content"];
            this.attach_files = _data["attach_files"];
            this.task_code = _data["task_code"];
            this.status = _data["status"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_Comment_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_Comment_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["user_add"] = this.user_add;
        data["code"] = this.code;
        data["user_avartar"] = this.user_avartar;
        data["user_name"] = this.user_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_add_f"] = this.date_add_f;
        data["content"] = this.content;
        data["attach_files"] = this.attach_files;
        data["task_code"] = this.task_code;
        data["status"] = this.status;
        data["message"] = this.message;
        return data;
    }

    clone(): HRM_Project_Management_Task_Comment_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_Comment_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_Comment_ENTITY {
    id?: number;
    user_add?: number;
    code?: string | undefined;
    user_avartar?: string | undefined;
    user_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_add_f?: string | undefined;
    content?: string | undefined;
    attach_files?: string | undefined;
    task_code?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;
}

export class HRM_Project_Management_Task_Level_ENTITY implements IHRM_Project_Management_Task_Level_ENTITY {
    level?: string | undefined;
    task_code?: string | undefined;
    lv?: number | undefined;
    lv1?: number | undefined;
    lv2?: number | undefined;
    lv3?: number | undefined;
    lv4?: number | undefined;
    lv5?: number | undefined;
    lv6?: number | undefined;
    lv7?: number | undefined;
    lv8?: number | undefined;
    lv9?: number | undefined;
    lv10?: number | undefined;
    lv11?: number | undefined;
    lv12?: number | undefined;
    lv13?: number | undefined;
    lv14?: number | undefined;
    lv15?: number | undefined;
    lv16?: number | undefined;
    lv17?: number | undefined;
    lv18?: number | undefined;
    lv19?: number | undefined;
    parents?: number | undefined;
    title?: string | undefined;
    status?: string | undefined;
    progress?: string | undefined;
    key_task?: string | undefined;
    create_user?: string | undefined;

    constructor(data?: IHRM_Project_Management_Task_Level_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.level = _data["level"];
            this.task_code = _data["task_code"];
            this.lv = _data["lv"];
            this.lv1 = _data["lv1"];
            this.lv2 = _data["lv2"];
            this.lv3 = _data["lv3"];
            this.lv4 = _data["lv4"];
            this.lv5 = _data["lv5"];
            this.lv6 = _data["lv6"];
            this.lv7 = _data["lv7"];
            this.lv8 = _data["lv8"];
            this.lv9 = _data["lv9"];
            this.lv10 = _data["lv10"];
            this.lv11 = _data["lv11"];
            this.lv12 = _data["lv12"];
            this.lv13 = _data["lv13"];
            this.lv14 = _data["lv14"];
            this.lv15 = _data["lv15"];
            this.lv16 = _data["lv16"];
            this.lv17 = _data["lv17"];
            this.lv18 = _data["lv18"];
            this.lv19 = _data["lv19"];
            this.parents = _data["parents"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.progress = _data["progress"];
            this.key_task = _data["key_task"];
            this.create_user = _data["create_user"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_Level_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_Level_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["task_code"] = this.task_code;
        data["lv"] = this.lv;
        data["lv1"] = this.lv1;
        data["lv2"] = this.lv2;
        data["lv3"] = this.lv3;
        data["lv4"] = this.lv4;
        data["lv5"] = this.lv5;
        data["lv6"] = this.lv6;
        data["lv7"] = this.lv7;
        data["lv8"] = this.lv8;
        data["lv9"] = this.lv9;
        data["lv10"] = this.lv10;
        data["lv11"] = this.lv11;
        data["lv12"] = this.lv12;
        data["lv13"] = this.lv13;
        data["lv14"] = this.lv14;
        data["lv15"] = this.lv15;
        data["lv16"] = this.lv16;
        data["lv17"] = this.lv17;
        data["lv18"] = this.lv18;
        data["lv19"] = this.lv19;
        data["parents"] = this.parents;
        data["title"] = this.title;
        data["status"] = this.status;
        data["progress"] = this.progress;
        data["key_task"] = this.key_task;
        data["create_user"] = this.create_user;
        return data;
    }

    clone(): HRM_Project_Management_Task_Level_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_Level_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_Level_ENTITY {
    level?: string | undefined;
    task_code?: string | undefined;
    lv?: number | undefined;
    lv1?: number | undefined;
    lv2?: number | undefined;
    lv3?: number | undefined;
    lv4?: number | undefined;
    lv5?: number | undefined;
    lv6?: number | undefined;
    lv7?: number | undefined;
    lv8?: number | undefined;
    lv9?: number | undefined;
    lv10?: number | undefined;
    lv11?: number | undefined;
    lv12?: number | undefined;
    lv13?: number | undefined;
    lv14?: number | undefined;
    lv15?: number | undefined;
    lv16?: number | undefined;
    lv17?: number | undefined;
    lv18?: number | undefined;
    lv19?: number | undefined;
    parents?: number | undefined;
    title?: string | undefined;
    status?: string | undefined;
    progress?: string | undefined;
    key_task?: string | undefined;
    create_user?: string | undefined;
}

export class HRM_Project_Management_Task_History_ENTITY implements IHRM_Project_Management_Task_History_ENTITY {
    title?: string | undefined;
    field_modified?: string | undefined;
    modified?: string | undefined;

    constructor(data?: IHRM_Project_Management_Task_History_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.field_modified = _data["field_modified"];
            this.modified = _data["modified"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_History_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_History_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["field_modified"] = this.field_modified;
        data["modified"] = this.modified;
        return data;
    }

    clone(): HRM_Project_Management_Task_History_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_History_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_History_ENTITY {
    title?: string | undefined;
    field_modified?: string | undefined;
    modified?: string | undefined;
}

export class HRM_Project_Management_Task_ENTITY implements IHRM_Project_Management_Task_ENTITY {
    id?: number;
    id_referent?: string | undefined;
    key_referent?: string | undefined;
    code?: string | undefined;
    name?: string | undefined;
    create_user?: string | undefined;
    account_code?: string | undefined;
    executor?: string | undefined;
    top?: number | undefined;
    progress_task?: number | undefined;
    total_task?: number | undefined;
    menbers?: number | undefined;
    amf?: number | undefined;
    task_content?: string | undefined;
    start_date?: moment.Moment | undefined;
    stop_date?: moment.Moment | undefined;
    date_add?: moment.Moment;
    status?: string | undefined;
    percent_done?: number | undefined;
    percent_done_f?: string | undefined;
    project_progress?: number | undefined;
    advancing?: number | undefined;
    delay?: number | undefined;
    project_code?: string | undefined;
    create_user_name?: string | undefined;
    executor_name?: string | undefined;
    executor_avatar?: string | undefined;
    project_name?: string | undefined;
    status_name?: string | undefined;
    start_date_f?: string | undefined;
    stop_date_f?: string | undefined;
    files?: string | undefined;
    type?: string | undefined;
    type_code?: string | undefined;
    type_name?: string | undefined;
    in_task?: string | undefined;
    in_task_name?: string | undefined;
    topic_code?: string | undefined;
    topic_name?: string | undefined;
    department_code?: string | undefined;
    end_date?: moment.Moment | undefined;
    end_date_f?: string | undefined;
    priority_level?: string | undefined;
    priority_level_name?: string | undefined;
    followers?: string | undefined;
    department_followers?: string | undefined;
    hour_done?: number | undefined;
    remind?: number | undefined;
    remind_messenger?: number | undefined;
    important?: boolean | undefined;
    is_expiry_task?: boolean | undefined;
    is_pin?: boolean | undefined;
    icon_pin?: string | undefined;
    date_pin?: moment.Moment | undefined;
    expiry_task_name?: string | undefined;
    important_c?: string | undefined;
    logtime_description?: string | undefined;
    order_by_date_add?: string | undefined;
    date_add_f?: string | undefined;
    drop_index?: number | undefined;
    move_warehouse_from?: string | undefined;
    move_warehouse_to?: string | undefined;
    is_move_warehouse?: boolean | undefined;
    hRM_Project_Management_Task_Comments?: HRM_Project_Management_Task_Comment_ENTITY[] | undefined;
    hRM_Project_Management_Task_Levels?: HRM_Project_Management_Task_Level_ENTITY[] | undefined;
    hRM_Project_Management_Task_Historys?: HRM_Project_Management_Task_History_ENTITY[] | undefined;

    constructor(data?: IHRM_Project_Management_Task_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_referent = _data["id_referent"];
            this.key_referent = _data["key_referent"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.create_user = _data["create_user"];
            this.account_code = _data["account_code"];
            this.executor = _data["executor"];
            this.top = _data["top"];
            this.progress_task = _data["progress_task"];
            this.total_task = _data["total_task"];
            this.menbers = _data["menbers"];
            this.amf = _data["amf"];
            this.task_content = _data["task_content"];
            this.start_date = _data["start_date"] ? moment.parseZone(_data["start_date"].toString()) : <any>undefined;
            this.stop_date = _data["stop_date"] ? moment.parseZone(_data["stop_date"].toString()) : <any>undefined;
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.percent_done = _data["percent_done"];
            this.percent_done_f = _data["percent_done_f"];
            this.project_progress = _data["project_progress"];
            this.advancing = _data["advancing"];
            this.delay = _data["delay"];
            this.project_code = _data["project_code"];
            this.create_user_name = _data["create_user_name"];
            this.executor_name = _data["executor_name"];
            this.executor_avatar = _data["executor_avatar"];
            this.project_name = _data["project_name"];
            this.status_name = _data["status_name"];
            this.start_date_f = _data["start_date_f"];
            this.stop_date_f = _data["stop_date_f"];
            this.files = _data["files"];
            this.type = _data["type"];
            this.type_code = _data["type_code"];
            this.type_name = _data["type_name"];
            this.in_task = _data["in_task"];
            this.in_task_name = _data["in_task_name"];
            this.topic_code = _data["topic_code"];
            this.topic_name = _data["topic_name"];
            this.department_code = _data["department_code"];
            this.end_date = _data["end_date"] ? moment.parseZone(_data["end_date"].toString()) : <any>undefined;
            this.end_date_f = _data["end_date_f"];
            this.priority_level = _data["priority_level"];
            this.priority_level_name = _data["priority_level_name"];
            this.followers = _data["followers"];
            this.department_followers = _data["department_followers"];
            this.hour_done = _data["hour_done"];
            this.remind = _data["remind"];
            this.remind_messenger = _data["remind_messenger"];
            this.important = _data["important"];
            this.is_expiry_task = _data["is_expiry_task"];
            this.is_pin = _data["is_pin"];
            this.icon_pin = _data["icon_pin"];
            this.date_pin = _data["date_pin"] ? moment.parseZone(_data["date_pin"].toString()) : <any>undefined;
            this.expiry_task_name = _data["expiry_task_name"];
            this.important_c = _data["important_c"];
            this.logtime_description = _data["logtime_description"];
            this.order_by_date_add = _data["order_by_date_add"];
            this.date_add_f = _data["date_add_f"];
            this.drop_index = _data["drop_index"];
            this.move_warehouse_from = _data["move_warehouse_from"];
            this.move_warehouse_to = _data["move_warehouse_to"];
            this.is_move_warehouse = _data["is_move_warehouse"];
            if (Array.isArray(_data["hRM_Project_Management_Task_Comments"])) {
                this.hRM_Project_Management_Task_Comments = [] as any;
                for (let item of _data["hRM_Project_Management_Task_Comments"])
                    this.hRM_Project_Management_Task_Comments.push(HRM_Project_Management_Task_Comment_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Project_Management_Task_Levels"])) {
                this.hRM_Project_Management_Task_Levels = [] as any;
                for (let item of _data["hRM_Project_Management_Task_Levels"])
                    this.hRM_Project_Management_Task_Levels.push(HRM_Project_Management_Task_Level_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Project_Management_Task_Historys"])) {
                this.hRM_Project_Management_Task_Historys = [] as any;
                for (let item of _data["hRM_Project_Management_Task_Historys"])
                    this.hRM_Project_Management_Task_Historys.push(HRM_Project_Management_Task_History_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_referent"] = this.id_referent;
        data["key_referent"] = this.key_referent;
        data["code"] = this.code;
        data["name"] = this.name;
        data["create_user"] = this.create_user;
        data["account_code"] = this.account_code;
        data["executor"] = this.executor;
        data["top"] = this.top;
        data["progress_task"] = this.progress_task;
        data["total_task"] = this.total_task;
        data["menbers"] = this.menbers;
        data["amf"] = this.amf;
        data["task_content"] = this.task_content;
        data["start_date"] = this.start_date ? this.start_date.toISOString(true) : <any>undefined;
        data["stop_date"] = this.stop_date ? this.stop_date.toISOString(true) : <any>undefined;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["status"] = this.status;
        data["percent_done"] = this.percent_done;
        data["percent_done_f"] = this.percent_done_f;
        data["project_progress"] = this.project_progress;
        data["advancing"] = this.advancing;
        data["delay"] = this.delay;
        data["project_code"] = this.project_code;
        data["create_user_name"] = this.create_user_name;
        data["executor_name"] = this.executor_name;
        data["executor_avatar"] = this.executor_avatar;
        data["project_name"] = this.project_name;
        data["status_name"] = this.status_name;
        data["start_date_f"] = this.start_date_f;
        data["stop_date_f"] = this.stop_date_f;
        data["files"] = this.files;
        data["type"] = this.type;
        data["type_code"] = this.type_code;
        data["type_name"] = this.type_name;
        data["in_task"] = this.in_task;
        data["in_task_name"] = this.in_task_name;
        data["topic_code"] = this.topic_code;
        data["topic_name"] = this.topic_name;
        data["department_code"] = this.department_code;
        data["end_date"] = this.end_date ? this.end_date.toISOString(true) : <any>undefined;
        data["end_date_f"] = this.end_date_f;
        data["priority_level"] = this.priority_level;
        data["priority_level_name"] = this.priority_level_name;
        data["followers"] = this.followers;
        data["department_followers"] = this.department_followers;
        data["hour_done"] = this.hour_done;
        data["remind"] = this.remind;
        data["remind_messenger"] = this.remind_messenger;
        data["important"] = this.important;
        data["is_expiry_task"] = this.is_expiry_task;
        data["is_pin"] = this.is_pin;
        data["icon_pin"] = this.icon_pin;
        data["date_pin"] = this.date_pin ? this.date_pin.toISOString(true) : <any>undefined;
        data["expiry_task_name"] = this.expiry_task_name;
        data["important_c"] = this.important_c;
        data["logtime_description"] = this.logtime_description;
        data["order_by_date_add"] = this.order_by_date_add;
        data["date_add_f"] = this.date_add_f;
        data["drop_index"] = this.drop_index;
        data["move_warehouse_from"] = this.move_warehouse_from;
        data["move_warehouse_to"] = this.move_warehouse_to;
        data["is_move_warehouse"] = this.is_move_warehouse;
        if (Array.isArray(this.hRM_Project_Management_Task_Comments)) {
            data["hRM_Project_Management_Task_Comments"] = [];
            for (let item of this.hRM_Project_Management_Task_Comments)
                data["hRM_Project_Management_Task_Comments"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Project_Management_Task_Levels)) {
            data["hRM_Project_Management_Task_Levels"] = [];
            for (let item of this.hRM_Project_Management_Task_Levels)
                data["hRM_Project_Management_Task_Levels"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Project_Management_Task_Historys)) {
            data["hRM_Project_Management_Task_Historys"] = [];
            for (let item of this.hRM_Project_Management_Task_Historys)
                data["hRM_Project_Management_Task_Historys"].push(item.toJSON());
        }
        return data;
    }

    clone(): HRM_Project_Management_Task_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_ENTITY {
    id?: number;
    id_referent?: string | undefined;
    key_referent?: string | undefined;
    code?: string | undefined;
    name?: string | undefined;
    create_user?: string | undefined;
    account_code?: string | undefined;
    executor?: string | undefined;
    top?: number | undefined;
    progress_task?: number | undefined;
    total_task?: number | undefined;
    menbers?: number | undefined;
    amf?: number | undefined;
    task_content?: string | undefined;
    start_date?: moment.Moment | undefined;
    stop_date?: moment.Moment | undefined;
    date_add?: moment.Moment;
    status?: string | undefined;
    percent_done?: number | undefined;
    percent_done_f?: string | undefined;
    project_progress?: number | undefined;
    advancing?: number | undefined;
    delay?: number | undefined;
    project_code?: string | undefined;
    create_user_name?: string | undefined;
    executor_name?: string | undefined;
    executor_avatar?: string | undefined;
    project_name?: string | undefined;
    status_name?: string | undefined;
    start_date_f?: string | undefined;
    stop_date_f?: string | undefined;
    files?: string | undefined;
    type?: string | undefined;
    type_code?: string | undefined;
    type_name?: string | undefined;
    in_task?: string | undefined;
    in_task_name?: string | undefined;
    topic_code?: string | undefined;
    topic_name?: string | undefined;
    department_code?: string | undefined;
    end_date?: moment.Moment | undefined;
    end_date_f?: string | undefined;
    priority_level?: string | undefined;
    priority_level_name?: string | undefined;
    followers?: string | undefined;
    department_followers?: string | undefined;
    hour_done?: number | undefined;
    remind?: number | undefined;
    remind_messenger?: number | undefined;
    important?: boolean | undefined;
    is_expiry_task?: boolean | undefined;
    is_pin?: boolean | undefined;
    icon_pin?: string | undefined;
    date_pin?: moment.Moment | undefined;
    expiry_task_name?: string | undefined;
    important_c?: string | undefined;
    logtime_description?: string | undefined;
    order_by_date_add?: string | undefined;
    date_add_f?: string | undefined;
    drop_index?: number | undefined;
    move_warehouse_from?: string | undefined;
    move_warehouse_to?: string | undefined;
    is_move_warehouse?: boolean | undefined;
    hRM_Project_Management_Task_Comments?: HRM_Project_Management_Task_Comment_ENTITY[] | undefined;
    hRM_Project_Management_Task_Levels?: HRM_Project_Management_Task_Level_ENTITY[] | undefined;
    hRM_Project_Management_Task_Historys?: HRM_Project_Management_Task_History_ENTITY[] | undefined;
}

export class HRM_Project_Management_ENTITY implements IHRM_Project_Management_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    done_task?: number | undefined;
    top?: number | undefined;
    progress_task?: number | undefined;
    total_task?: number | undefined;
    project_progress?: number | undefined;
    menbers?: number | undefined;
    amf?: number | undefined;
    _done?: string | undefined;
    _inprogress?: string | undefined;
    _new?: string | undefined;
    _total?: string | undefined;
    inprogress_percent?: number | undefined;
    new_percent?: number | undefined;
    done_percent?: number | undefined;
    done_i?: number | undefined;
    inprogress_i?: number | undefined;
    new_i?: number | undefined;
    total_i?: number | undefined;
    start_date?: moment.Moment | undefined;
    start_date_f?: string | undefined;
    stop_date?: moment.Moment | undefined;
    stop_date_f?: string | undefined;
    advancing?: number | undefined;
    delay?: number | undefined;
    department_code?: string | undefined;
    project_code?: string | undefined;
    account_code?: string | undefined;
    project_Management_Tasks?: HRM_Project_Management_Task_ENTITY[] | undefined;
    xml?: string | undefined;

    constructor(data?: IHRM_Project_Management_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.done_task = _data["done_task"];
            this.top = _data["top"];
            this.progress_task = _data["progress_task"];
            this.total_task = _data["total_task"];
            this.project_progress = _data["project_progress"];
            this.menbers = _data["menbers"];
            this.amf = _data["amf"];
            this._done = _data["_done"];
            this._inprogress = _data["_inprogress"];
            this._new = _data["_new"];
            this._total = _data["_total"];
            this.inprogress_percent = _data["inprogress_percent"];
            this.new_percent = _data["new_percent"];
            this.done_percent = _data["done_percent"];
            this.done_i = _data["done_i"];
            this.inprogress_i = _data["inprogress_i"];
            this.new_i = _data["new_i"];
            this.total_i = _data["total_i"];
            this.start_date = _data["start_date"] ? moment.parseZone(_data["start_date"].toString()) : <any>undefined;
            this.start_date_f = _data["start_date_f"];
            this.stop_date = _data["stop_date"] ? moment.parseZone(_data["stop_date"].toString()) : <any>undefined;
            this.stop_date_f = _data["stop_date_f"];
            this.advancing = _data["advancing"];
            this.delay = _data["delay"];
            this.department_code = _data["department_code"];
            this.project_code = _data["project_code"];
            this.account_code = _data["account_code"];
            if (Array.isArray(_data["project_Management_Tasks"])) {
                this.project_Management_Tasks = [] as any;
                for (let item of _data["project_Management_Tasks"])
                    this.project_Management_Tasks.push(HRM_Project_Management_Task_ENTITY.fromJS(item));
            }
            this.xml = _data["xml"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["done_task"] = this.done_task;
        data["top"] = this.top;
        data["progress_task"] = this.progress_task;
        data["total_task"] = this.total_task;
        data["project_progress"] = this.project_progress;
        data["menbers"] = this.menbers;
        data["amf"] = this.amf;
        data["_done"] = this._done;
        data["_inprogress"] = this._inprogress;
        data["_new"] = this._new;
        data["_total"] = this._total;
        data["inprogress_percent"] = this.inprogress_percent;
        data["new_percent"] = this.new_percent;
        data["done_percent"] = this.done_percent;
        data["done_i"] = this.done_i;
        data["inprogress_i"] = this.inprogress_i;
        data["new_i"] = this.new_i;
        data["total_i"] = this.total_i;
        data["start_date"] = this.start_date ? this.start_date.toISOString(true) : <any>undefined;
        data["start_date_f"] = this.start_date_f;
        data["stop_date"] = this.stop_date ? this.stop_date.toISOString(true) : <any>undefined;
        data["stop_date_f"] = this.stop_date_f;
        data["advancing"] = this.advancing;
        data["delay"] = this.delay;
        data["department_code"] = this.department_code;
        data["project_code"] = this.project_code;
        data["account_code"] = this.account_code;
        if (Array.isArray(this.project_Management_Tasks)) {
            data["project_Management_Tasks"] = [];
            for (let item of this.project_Management_Tasks)
                data["project_Management_Tasks"].push(item.toJSON());
        }
        data["xml"] = this.xml;
        return data;
    }

    clone(): HRM_Project_Management_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    done_task?: number | undefined;
    top?: number | undefined;
    progress_task?: number | undefined;
    total_task?: number | undefined;
    project_progress?: number | undefined;
    menbers?: number | undefined;
    amf?: number | undefined;
    _done?: string | undefined;
    _inprogress?: string | undefined;
    _new?: string | undefined;
    _total?: string | undefined;
    inprogress_percent?: number | undefined;
    new_percent?: number | undefined;
    done_percent?: number | undefined;
    done_i?: number | undefined;
    inprogress_i?: number | undefined;
    new_i?: number | undefined;
    total_i?: number | undefined;
    start_date?: moment.Moment | undefined;
    start_date_f?: string | undefined;
    stop_date?: moment.Moment | undefined;
    stop_date_f?: string | undefined;
    advancing?: number | undefined;
    delay?: number | undefined;
    department_code?: string | undefined;
    project_code?: string | undefined;
    account_code?: string | undefined;
    project_Management_Tasks?: HRM_Project_Management_Task_ENTITY[] | undefined;
    xml?: string | undefined;
}

export class HRM_Project_Management_Task_Week_ENTITY implements IHRM_Project_Management_Task_Week_ENTITY {
    mo?: number | undefined;
    tu?: number | undefined;
    we?: number | undefined;
    th?: number | undefined;
    fr?: number | undefined;
    sa?: number | undefined;
    su?: number | undefined;

    constructor(data?: IHRM_Project_Management_Task_Week_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mo = _data["mo"];
            this.tu = _data["tu"];
            this.we = _data["we"];
            this.th = _data["th"];
            this.fr = _data["fr"];
            this.sa = _data["sa"];
            this.su = _data["su"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_Week_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_Week_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mo"] = this.mo;
        data["tu"] = this.tu;
        data["we"] = this.we;
        data["th"] = this.th;
        data["fr"] = this.fr;
        data["sa"] = this.sa;
        data["su"] = this.su;
        return data;
    }

    clone(): HRM_Project_Management_Task_Week_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_Week_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_Week_ENTITY {
    mo?: number | undefined;
    tu?: number | undefined;
    we?: number | undefined;
    th?: number | undefined;
    fr?: number | undefined;
    sa?: number | undefined;
    su?: number | undefined;
}

export class HRM_Project_Management_Task_Month_ENTITY implements IHRM_Project_Management_Task_Month_ENTITY {
    jan?: number | undefined;
    feb?: number | undefined;
    mar?: number | undefined;
    apr?: number | undefined;
    mai?: number | undefined;
    jun?: number | undefined;
    jul?: number | undefined;
    aug?: number | undefined;
    sep?: number | undefined;
    oct?: number | undefined;
    nov?: number | undefined;
    dec?: number | undefined;

    constructor(data?: IHRM_Project_Management_Task_Month_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.jan = _data["jan"];
            this.feb = _data["feb"];
            this.mar = _data["mar"];
            this.apr = _data["apr"];
            this.mai = _data["mai"];
            this.jun = _data["jun"];
            this.jul = _data["jul"];
            this.aug = _data["aug"];
            this.sep = _data["sep"];
            this.oct = _data["oct"];
            this.nov = _data["nov"];
            this.dec = _data["dec"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_Month_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_Month_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jan"] = this.jan;
        data["feb"] = this.feb;
        data["mar"] = this.mar;
        data["apr"] = this.apr;
        data["mai"] = this.mai;
        data["jun"] = this.jun;
        data["jul"] = this.jul;
        data["aug"] = this.aug;
        data["sep"] = this.sep;
        data["oct"] = this.oct;
        data["nov"] = this.nov;
        data["dec"] = this.dec;
        return data;
    }

    clone(): HRM_Project_Management_Task_Month_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_Month_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_Month_ENTITY {
    jan?: number | undefined;
    feb?: number | undefined;
    mar?: number | undefined;
    apr?: number | undefined;
    mai?: number | undefined;
    jun?: number | undefined;
    jul?: number | undefined;
    aug?: number | undefined;
    sep?: number | undefined;
    oct?: number | undefined;
    nov?: number | undefined;
    dec?: number | undefined;
}

export class HRM_Project_Management_Task_Day_ENTITY implements IHRM_Project_Management_Task_Day_ENTITY {
    labels?: string[] | undefined;
    series?: number[] | undefined;

    constructor(data?: IHRM_Project_Management_Task_Day_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["labels"])) {
                this.labels = [] as any;
                for (let item of _data["labels"])
                    this.labels.push(item);
            }
            if (Array.isArray(_data["series"])) {
                this.series = [] as any;
                for (let item of _data["series"])
                    this.series.push(item);
            }
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_Day_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_Day_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.labels)) {
            data["labels"] = [];
            for (let item of this.labels)
                data["labels"].push(item);
        }
        if (Array.isArray(this.series)) {
            data["series"] = [];
            for (let item of this.series)
                data["series"].push(item);
        }
        return data;
    }

    clone(): HRM_Project_Management_Task_Day_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_Day_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_Day_ENTITY {
    labels?: string[] | undefined;
    series?: number[] | undefined;
}

export class HRM_Project_Management_Task_Department_ENTITY implements IHRM_Project_Management_Task_Department_ENTITY {
    list_name?: string[] | undefined;
    labels?: string[] | undefined;
    series?: any[] | undefined;

    constructor(data?: IHRM_Project_Management_Task_Department_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["list_name"])) {
                this.list_name = [] as any;
                for (let item of _data["list_name"])
                    this.list_name.push(item);
            }
            if (Array.isArray(_data["labels"])) {
                this.labels = [] as any;
                for (let item of _data["labels"])
                    this.labels.push(item);
            }
            if (Array.isArray(_data["series"])) {
                this.series = [] as any;
                for (let item of _data["series"])
                    this.series.push(item);
            }
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_Department_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_Department_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.list_name)) {
            data["list_name"] = [];
            for (let item of this.list_name)
                data["list_name"].push(item);
        }
        if (Array.isArray(this.labels)) {
            data["labels"] = [];
            for (let item of this.labels)
                data["labels"].push(item);
        }
        if (Array.isArray(this.series)) {
            data["series"] = [];
            for (let item of this.series)
                data["series"].push(item);
        }
        return data;
    }

    clone(): HRM_Project_Management_Task_Department_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_Department_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_Department_ENTITY {
    list_name?: string[] | undefined;
    labels?: string[] | undefined;
    series?: any[] | undefined;
}

export class HRM_Project_Management_Task_Department_Pie_ENTITY implements IHRM_Project_Management_Task_Department_Pie_ENTITY {
    labels?: string[] | undefined;
    series?: number[] | undefined;

    constructor(data?: IHRM_Project_Management_Task_Department_Pie_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["labels"])) {
                this.labels = [] as any;
                for (let item of _data["labels"])
                    this.labels.push(item);
            }
            if (Array.isArray(_data["series"])) {
                this.series = [] as any;
                for (let item of _data["series"])
                    this.series.push(item);
            }
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_Department_Pie_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_Department_Pie_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.labels)) {
            data["labels"] = [];
            for (let item of this.labels)
                data["labels"].push(item);
        }
        if (Array.isArray(this.series)) {
            data["series"] = [];
            for (let item of this.series)
                data["series"].push(item);
        }
        return data;
    }

    clone(): HRM_Project_Management_Task_Department_Pie_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_Department_Pie_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_Department_Pie_ENTITY {
    labels?: string[] | undefined;
    series?: number[] | undefined;
}

export class HRM_Project_Management_Dashboard_Workflow_ENTITY implements IHRM_Project_Management_Dashboard_Workflow_ENTITY {
    account_code?: string | undefined;
    total_project?: number | undefined;
    total_task?: number | undefined;
    total_task_inprogress?: number | undefined;
    total_task_expiry_task?: number | undefined;
    list_projects?: HRM_Project_Management_ENTITY[] | undefined;
    task_week?: HRM_Project_Management_Task_Week_ENTITY;
    task_month?: HRM_Project_Management_Task_Month_ENTITY;
    task_day?: HRM_Project_Management_Task_Day_ENTITY;
    task_department?: HRM_Project_Management_Task_Department_ENTITY;
    task_department_pie?: HRM_Project_Management_Task_Department_Pie_ENTITY;

    constructor(data?: IHRM_Project_Management_Dashboard_Workflow_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.account_code = _data["account_code"];
            this.total_project = _data["total_project"];
            this.total_task = _data["total_task"];
            this.total_task_inprogress = _data["total_task_inprogress"];
            this.total_task_expiry_task = _data["total_task_expiry_task"];
            if (Array.isArray(_data["list_projects"])) {
                this.list_projects = [] as any;
                for (let item of _data["list_projects"])
                    this.list_projects.push(HRM_Project_Management_ENTITY.fromJS(item));
            }
            this.task_week = _data["task_week"] ? HRM_Project_Management_Task_Week_ENTITY.fromJS(_data["task_week"]) : <any>undefined;
            this.task_month = _data["task_month"] ? HRM_Project_Management_Task_Month_ENTITY.fromJS(_data["task_month"]) : <any>undefined;
            this.task_day = _data["task_day"] ? HRM_Project_Management_Task_Day_ENTITY.fromJS(_data["task_day"]) : <any>undefined;
            this.task_department = _data["task_department"] ? HRM_Project_Management_Task_Department_ENTITY.fromJS(_data["task_department"]) : <any>undefined;
            this.task_department_pie = _data["task_department_pie"] ? HRM_Project_Management_Task_Department_Pie_ENTITY.fromJS(_data["task_department_pie"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HRM_Project_Management_Dashboard_Workflow_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Dashboard_Workflow_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["account_code"] = this.account_code;
        data["total_project"] = this.total_project;
        data["total_task"] = this.total_task;
        data["total_task_inprogress"] = this.total_task_inprogress;
        data["total_task_expiry_task"] = this.total_task_expiry_task;
        if (Array.isArray(this.list_projects)) {
            data["list_projects"] = [];
            for (let item of this.list_projects)
                data["list_projects"].push(item.toJSON());
        }
        data["task_week"] = this.task_week ? this.task_week.toJSON() : <any>undefined;
        data["task_month"] = this.task_month ? this.task_month.toJSON() : <any>undefined;
        data["task_day"] = this.task_day ? this.task_day.toJSON() : <any>undefined;
        data["task_department"] = this.task_department ? this.task_department.toJSON() : <any>undefined;
        data["task_department_pie"] = this.task_department_pie ? this.task_department_pie.toJSON() : <any>undefined;
        return data;
    }

    clone(): HRM_Project_Management_Dashboard_Workflow_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Dashboard_Workflow_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Dashboard_Workflow_ENTITY {
    account_code?: string | undefined;
    total_project?: number | undefined;
    total_task?: number | undefined;
    total_task_inprogress?: number | undefined;
    total_task_expiry_task?: number | undefined;
    list_projects?: HRM_Project_Management_ENTITY[] | undefined;
    task_week?: HRM_Project_Management_Task_Week_ENTITY;
    task_month?: HRM_Project_Management_Task_Month_ENTITY;
    task_day?: HRM_Project_Management_Task_Day_ENTITY;
    task_department?: HRM_Project_Management_Task_Department_ENTITY;
    task_department_pie?: HRM_Project_Management_Task_Department_Pie_ENTITY;
}

export class HRM_Project_Management_Report_Project_Percent_Detail_ENTITY implements IHRM_Project_Management_Report_Project_Percent_Detail_ENTITY {
    project_name?: string | undefined;
    value?: number;

    constructor(data?: IHRM_Project_Management_Report_Project_Percent_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.project_name = _data["project_name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Report_Project_Percent_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Report_Project_Percent_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["project_name"] = this.project_name;
        data["value"] = this.value;
        return data;
    }

    clone(): HRM_Project_Management_Report_Project_Percent_Detail_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Report_Project_Percent_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Report_Project_Percent_Detail_ENTITY {
    project_name?: string | undefined;
    value?: number;
}

export class HRM_Project_Management_Report_Project_Percent_ENTITY implements IHRM_Project_Management_Report_Project_Percent_ENTITY {
    hRM_Project_Management_Report_Project_Percent_Details?: HRM_Project_Management_Report_Project_Percent_Detail_ENTITY[] | undefined;
    hRM_Project_Managements?: HRM_Project_Management_ENTITY[] | undefined;
    arr_data_department_by_project?: any[] | undefined;
    arr_data_department_type?: any[] | undefined;
    arr_data_table_department_type?: any[] | undefined;
    arr_data_progress_in_week?: any[] | undefined;
    account_code?: string | undefined;

    constructor(data?: IHRM_Project_Management_Report_Project_Percent_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["hRM_Project_Management_Report_Project_Percent_Details"])) {
                this.hRM_Project_Management_Report_Project_Percent_Details = [] as any;
                for (let item of _data["hRM_Project_Management_Report_Project_Percent_Details"])
                    this.hRM_Project_Management_Report_Project_Percent_Details.push(HRM_Project_Management_Report_Project_Percent_Detail_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Project_Managements"])) {
                this.hRM_Project_Managements = [] as any;
                for (let item of _data["hRM_Project_Managements"])
                    this.hRM_Project_Managements.push(HRM_Project_Management_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["arr_data_department_by_project"])) {
                this.arr_data_department_by_project = [] as any;
                for (let item of _data["arr_data_department_by_project"])
                    this.arr_data_department_by_project.push(item);
            }
            if (Array.isArray(_data["arr_data_department_type"])) {
                this.arr_data_department_type = [] as any;
                for (let item of _data["arr_data_department_type"])
                    this.arr_data_department_type.push(item);
            }
            if (Array.isArray(_data["arr_data_table_department_type"])) {
                this.arr_data_table_department_type = [] as any;
                for (let item of _data["arr_data_table_department_type"])
                    this.arr_data_table_department_type.push(item);
            }
            if (Array.isArray(_data["arr_data_progress_in_week"])) {
                this.arr_data_progress_in_week = [] as any;
                for (let item of _data["arr_data_progress_in_week"])
                    this.arr_data_progress_in_week.push(item);
            }
            this.account_code = _data["account_code"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Report_Project_Percent_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Report_Project_Percent_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.hRM_Project_Management_Report_Project_Percent_Details)) {
            data["hRM_Project_Management_Report_Project_Percent_Details"] = [];
            for (let item of this.hRM_Project_Management_Report_Project_Percent_Details)
                data["hRM_Project_Management_Report_Project_Percent_Details"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Project_Managements)) {
            data["hRM_Project_Managements"] = [];
            for (let item of this.hRM_Project_Managements)
                data["hRM_Project_Managements"].push(item.toJSON());
        }
        if (Array.isArray(this.arr_data_department_by_project)) {
            data["arr_data_department_by_project"] = [];
            for (let item of this.arr_data_department_by_project)
                data["arr_data_department_by_project"].push(item);
        }
        if (Array.isArray(this.arr_data_department_type)) {
            data["arr_data_department_type"] = [];
            for (let item of this.arr_data_department_type)
                data["arr_data_department_type"].push(item);
        }
        if (Array.isArray(this.arr_data_table_department_type)) {
            data["arr_data_table_department_type"] = [];
            for (let item of this.arr_data_table_department_type)
                data["arr_data_table_department_type"].push(item);
        }
        if (Array.isArray(this.arr_data_progress_in_week)) {
            data["arr_data_progress_in_week"] = [];
            for (let item of this.arr_data_progress_in_week)
                data["arr_data_progress_in_week"].push(item);
        }
        data["account_code"] = this.account_code;
        return data;
    }

    clone(): HRM_Project_Management_Report_Project_Percent_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Report_Project_Percent_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Report_Project_Percent_ENTITY {
    hRM_Project_Management_Report_Project_Percent_Details?: HRM_Project_Management_Report_Project_Percent_Detail_ENTITY[] | undefined;
    hRM_Project_Managements?: HRM_Project_Management_ENTITY[] | undefined;
    arr_data_department_by_project?: any[] | undefined;
    arr_data_department_type?: any[] | undefined;
    arr_data_table_department_type?: any[] | undefined;
    arr_data_progress_in_week?: any[] | undefined;
    account_code?: string | undefined;
}

export class HRM_Project_Management_Task_Status_ENTITY implements IHRM_Project_Management_Task_Status_ENTITY {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;

    constructor(data?: IHRM_Project_Management_Task_Status_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_Status_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_Status_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        return data;
    }

    clone(): HRM_Project_Management_Task_Status_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_Status_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_Status_ENTITY {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
}

export class HRM_Project_Management_Task_Type_ENTITY implements IHRM_Project_Management_Task_Type_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    type?: string | undefined;

    constructor(data?: IHRM_Project_Management_Task_Type_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.department_code = _data["department_code"];
            this.department_name = _data["department_name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_Type_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_Type_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["department_code"] = this.department_code;
        data["department_name"] = this.department_name;
        data["type"] = this.type;
        return data;
    }

    clone(): HRM_Project_Management_Task_Type_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_Type_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_Type_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    type?: string | undefined;
}

export class HRM_Project_Management_Task_Proprity_Level_ENTITY implements IHRM_Project_Management_Task_Proprity_Level_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    type?: string | undefined;

    constructor(data?: IHRM_Project_Management_Task_Proprity_Level_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.department_code = _data["department_code"];
            this.department_name = _data["department_name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): HRM_Project_Management_Task_Proprity_Level_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Project_Management_Task_Proprity_Level_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["department_code"] = this.department_code;
        data["department_name"] = this.department_name;
        data["type"] = this.type;
        return data;
    }

    clone(): HRM_Project_Management_Task_Proprity_Level_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Project_Management_Task_Proprity_Level_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Project_Management_Task_Proprity_Level_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    type?: string | undefined;
}

export class PUR_Accounts_Payable_Ledger_ENTITY implements IPUR_Accounts_Payable_Ledger_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_master_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    account?: string | undefined;
    arise_debit_fc?: number | undefined;
    arise_debit?: number | undefined;
    arise_credit_fc?: number | undefined;
    arise_credit?: number | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    stt?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: IPUR_Accounts_Payable_Ledger_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_master_code = _data["voucher_master_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.notes = _data["notes"];
            this.debitor_account = _data["debitor_account"];
            this.account = _data["account"];
            this.arise_debit_fc = _data["arise_debit_fc"];
            this.arise_debit = _data["arise_debit"];
            this.arise_credit_fc = _data["arise_credit_fc"];
            this.arise_credit = _data["arise_credit"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.stt = _data["stt"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): PUR_Accounts_Payable_Ledger_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new PUR_Accounts_Payable_Ledger_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_master_code"] = this.voucher_master_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["notes"] = this.notes;
        data["debitor_account"] = this.debitor_account;
        data["account"] = this.account;
        data["arise_debit_fc"] = this.arise_debit_fc;
        data["arise_debit"] = this.arise_debit;
        data["arise_credit_fc"] = this.arise_credit_fc;
        data["arise_credit"] = this.arise_credit;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["stt"] = this.stt;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): PUR_Accounts_Payable_Ledger_ENTITY {
        const json = this.toJSON();
        let result = new PUR_Accounts_Payable_Ledger_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IPUR_Accounts_Payable_Ledger_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_master_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    account?: string | undefined;
    arise_debit_fc?: number | undefined;
    arise_debit?: number | undefined;
    arise_credit_fc?: number | undefined;
    arise_credit?: number | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    stt?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class PUR_Accounts_Payable_Report_By_Invoice_ENTITY implements IPUR_Accounts_Payable_Report_By_Invoice_ENTITY {
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    voucher_no_mt?: string | undefined;
    invoice_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    payment_date?: moment.Moment | undefined;
    description?: string | undefined;
    debitor_account?: string | undefined;
    code_fc?: string | undefined;
    code_fc_mt?: string | undefined;
    code_symbol?: string | undefined;
    code_symbol_mt?: string | undefined;
    exchange_rate?: number | undefined;
    exchange_rate_mt?: number | undefined;
    total_money?: number | undefined;
    total_money_fc?: number | undefined;
    remaining_asset_fc?: number | undefined;
    remaining_asset?: number | undefined;
    payment_deadline?: number | undefined;
    payment_fc?: number | undefined;
    payment?: number | undefined;
    remaining_exchange_rate?: number | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    master_code?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date_mt?: moment.Moment | undefined;
    account?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: IPUR_Accounts_Payable_Report_By_Invoice_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.voucher_no_mt = _data["voucher_no_mt"];
            this.invoice_no = _data["invoice_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.payment_date = _data["payment_date"] ? moment.parseZone(_data["payment_date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.debitor_account = _data["debitor_account"];
            this.code_fc = _data["code_fc"];
            this.code_fc_mt = _data["code_fc_mt"];
            this.code_symbol = _data["code_symbol"];
            this.code_symbol_mt = _data["code_symbol_mt"];
            this.exchange_rate = _data["exchange_rate"];
            this.exchange_rate_mt = _data["exchange_rate_mt"];
            this.total_money = _data["total_money"];
            this.total_money_fc = _data["total_money_fc"];
            this.remaining_asset_fc = _data["remaining_asset_fc"];
            this.remaining_asset = _data["remaining_asset"];
            this.payment_deadline = _data["payment_deadline"];
            this.payment_fc = _data["payment_fc"];
            this.payment = _data["payment"];
            this.remaining_exchange_rate = _data["remaining_exchange_rate"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.fee_code = _data["fee_code"];
            this.master_code = _data["master_code"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.voucher_date_mt = _data["voucher_date_mt"] ? moment.parseZone(_data["voucher_date_mt"].toString()) : <any>undefined;
            this.account = _data["account"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): PUR_Accounts_Payable_Report_By_Invoice_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new PUR_Accounts_Payable_Report_By_Invoice_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["voucher_no_mt"] = this.voucher_no_mt;
        data["invoice_no"] = this.invoice_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["payment_date"] = this.payment_date ? this.payment_date.toISOString(true) : <any>undefined;
        data["description"] = this.description;
        data["debitor_account"] = this.debitor_account;
        data["code_fc"] = this.code_fc;
        data["code_fc_mt"] = this.code_fc_mt;
        data["code_symbol"] = this.code_symbol;
        data["code_symbol_mt"] = this.code_symbol_mt;
        data["exchange_rate"] = this.exchange_rate;
        data["exchange_rate_mt"] = this.exchange_rate_mt;
        data["total_money"] = this.total_money;
        data["total_money_fc"] = this.total_money_fc;
        data["remaining_asset_fc"] = this.remaining_asset_fc;
        data["remaining_asset"] = this.remaining_asset;
        data["payment_deadline"] = this.payment_deadline;
        data["payment_fc"] = this.payment_fc;
        data["payment"] = this.payment;
        data["remaining_exchange_rate"] = this.remaining_exchange_rate;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["fee_code"] = this.fee_code;
        data["master_code"] = this.master_code;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["voucher_date_mt"] = this.voucher_date_mt ? this.voucher_date_mt.toISOString(true) : <any>undefined;
        data["account"] = this.account;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): PUR_Accounts_Payable_Report_By_Invoice_ENTITY {
        const json = this.toJSON();
        let result = new PUR_Accounts_Payable_Report_By_Invoice_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IPUR_Accounts_Payable_Report_By_Invoice_ENTITY {
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    voucher_no_mt?: string | undefined;
    invoice_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    payment_date?: moment.Moment | undefined;
    description?: string | undefined;
    debitor_account?: string | undefined;
    code_fc?: string | undefined;
    code_fc_mt?: string | undefined;
    code_symbol?: string | undefined;
    code_symbol_mt?: string | undefined;
    exchange_rate?: number | undefined;
    exchange_rate_mt?: number | undefined;
    total_money?: number | undefined;
    total_money_fc?: number | undefined;
    remaining_asset_fc?: number | undefined;
    remaining_asset?: number | undefined;
    payment_deadline?: number | undefined;
    payment_fc?: number | undefined;
    payment?: number | undefined;
    remaining_exchange_rate?: number | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    master_code?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date_mt?: moment.Moment | undefined;
    account?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class P21_D_ENTITY implements IP21_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    construction_id?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IP21_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.master_code = _data["master_code"];
            this.description = _data["description"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.debitor_account = _data["debitor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.construction_id = _data["construction_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): P21_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P21_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["master_code"] = this.master_code;
        data["description"] = this.description;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["debitor_account"] = this.debitor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["construction_id"] = this.construction_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): P21_D_ENTITY {
        const json = this.toJSON();
        let result = new P21_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP21_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    construction_id?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
}

export class P21_M_ENTITY implements IP21_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    seri_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    money_goods_fc?: number | undefined;
    money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    xml_21d?: string | undefined;
    xml_vat_in?: string | undefined;
    is_tax?: boolean | undefined;
    voucher_year?: number | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
    p21_D?: P21_D_ENTITY[] | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;

    constructor(data?: IP21_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.invoice_no = _data["invoice_no"];
            this.seri_no = _data["seri_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.creditor_account = _data["creditor_account"];
            this.tax_code = _data["tax_code"];
            this.tax_account = _data["tax_account"];
            this.money_goods_fc = _data["money_goods_fc"];
            this.money_goods = _data["money_goods"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.xml_21d = _data["xml_21d"];
            this.xml_vat_in = _data["xml_vat_in"];
            this.is_tax = _data["is_tax"];
            this.voucher_year = _data["voucher_year"];
            if (Array.isArray(_data["accounting_vat_inputs"])) {
                this.accounting_vat_inputs = [] as any;
                for (let item of _data["accounting_vat_inputs"])
                    this.accounting_vat_inputs.push(Accounting_VAT_Input_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["p21_D"])) {
                this.p21_D = [] as any;
                for (let item of _data["p21_D"])
                    this.p21_D.push(P21_D_ENTITY.fromJS(item));
            }
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
        }
    }

    static fromJS(data: any): P21_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P21_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["invoice_no"] = this.invoice_no;
        data["seri_no"] = this.seri_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["creditor_account"] = this.creditor_account;
        data["tax_code"] = this.tax_code;
        data["tax_account"] = this.tax_account;
        data["money_goods_fc"] = this.money_goods_fc;
        data["money_goods"] = this.money_goods;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["xml_21d"] = this.xml_21d;
        data["xml_vat_in"] = this.xml_vat_in;
        data["is_tax"] = this.is_tax;
        data["voucher_year"] = this.voucher_year;
        if (Array.isArray(this.accounting_vat_inputs)) {
            data["accounting_vat_inputs"] = [];
            for (let item of this.accounting_vat_inputs)
                data["accounting_vat_inputs"].push(item.toJSON());
        }
        if (Array.isArray(this.p21_D)) {
            data["p21_D"] = [];
            for (let item of this.p21_D)
                data["p21_D"].push(item.toJSON());
        }
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        return data;
    }

    clone(): P21_M_ENTITY {
        const json = this.toJSON();
        let result = new P21_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP21_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    seri_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    money_goods_fc?: number | undefined;
    money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    xml_21d?: string | undefined;
    xml_vat_in?: string | undefined;
    is_tax?: boolean | undefined;
    voucher_year?: number | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
    p21_D?: P21_D_ENTITY[] | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
}

export class P22_D_ENTITY implements IP22_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    debitor_account?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    cost_fc?: number | undefined;
    cost?: number | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    cost_arise_fc?: number | undefined;
    cost_arise?: number | undefined;
    goods_money?: number | undefined;
    goods_name?: string | undefined;
    construction_id?: string | undefined;
    group_code?: string | undefined;
    standard_code?: number | undefined;
    brand?: number | undefined;
    series_no?: string | undefined;
    expiration_date?: moment.Moment | undefined;
    warranty_term?: number | undefined;
    inventory?: number | undefined;
    lot?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    warranty_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    notes?: string | undefined;

    constructor(data?: IP22_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.master_code = _data["master_code"];
            this.goods_code = _data["goods_code"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.debitor_account = _data["debitor_account"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.cost_fc = _data["cost_fc"];
            this.cost = _data["cost"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.cost_arise_fc = _data["cost_arise_fc"];
            this.cost_arise = _data["cost_arise"];
            this.goods_money = _data["goods_money"];
            this.goods_name = _data["goods_name"];
            this.construction_id = _data["construction_id"];
            this.group_code = _data["group_code"];
            this.standard_code = _data["standard_code"];
            this.brand = _data["brand"];
            this.series_no = _data["series_no"];
            this.expiration_date = _data["expiration_date"] ? moment.parseZone(_data["expiration_date"].toString()) : <any>undefined;
            this.warranty_term = _data["warranty_term"];
            this.inventory = _data["inventory"];
            this.lot = _data["lot"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.warranty_date = _data["warranty_date"] ? moment.parseZone(_data["warranty_date"].toString()) : <any>undefined;
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): P22_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P22_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["master_code"] = this.master_code;
        data["goods_code"] = this.goods_code;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["debitor_account"] = this.debitor_account;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["cost_fc"] = this.cost_fc;
        data["cost"] = this.cost;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["cost_arise_fc"] = this.cost_arise_fc;
        data["cost_arise"] = this.cost_arise;
        data["goods_money"] = this.goods_money;
        data["goods_name"] = this.goods_name;
        data["construction_id"] = this.construction_id;
        data["group_code"] = this.group_code;
        data["standard_code"] = this.standard_code;
        data["brand"] = this.brand;
        data["series_no"] = this.series_no;
        data["expiration_date"] = this.expiration_date ? this.expiration_date.toISOString(true) : <any>undefined;
        data["warranty_term"] = this.warranty_term;
        data["inventory"] = this.inventory;
        data["lot"] = this.lot;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["warranty_date"] = this.warranty_date ? this.warranty_date.toISOString(true) : <any>undefined;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["notes"] = this.notes;
        return data;
    }

    clone(): P22_D_ENTITY {
        const json = this.toJSON();
        let result = new P22_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP22_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    debitor_account?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    cost_fc?: number | undefined;
    cost?: number | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    cost_arise_fc?: number | undefined;
    cost_arise?: number | undefined;
    goods_money?: number | undefined;
    goods_name?: string | undefined;
    construction_id?: string | undefined;
    group_code?: string | undefined;
    standard_code?: number | undefined;
    brand?: number | undefined;
    series_no?: string | undefined;
    expiration_date?: moment.Moment | undefined;
    warranty_term?: number | undefined;
    inventory?: number | undefined;
    lot?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    warranty_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    notes?: string | undefined;
}

export class P22_M_ENTITY implements IP22_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    series_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    code_symbol?: string | undefined;
    cost_fc?: number | undefined;
    cost?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    total_money?: number | undefined;
    total_money_fc?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    sales_order_no?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    xml_22d?: string | undefined;
    xml_vat_in?: string | undefined;
    p22_D?: P22_D_ENTITY[] | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;

    constructor(data?: IP22_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.invoice_no = _data["invoice_no"];
            this.series_no = _data["series_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.creditor_account = _data["creditor_account"];
            this.tax_code = _data["tax_code"];
            this.tax_account = _data["tax_account"];
            this.total_money_goods_fc = _data["total_money_goods_fc"];
            this.total_money_goods = _data["total_money_goods"];
            this.code_symbol = _data["code_symbol"];
            this.cost_fc = _data["cost_fc"];
            this.cost = _data["cost"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.total_money = _data["total_money"];
            this.total_money_fc = _data["total_money_fc"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.sales_order_no = _data["sales_order_no"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.xml_22d = _data["xml_22d"];
            this.xml_vat_in = _data["xml_vat_in"];
            if (Array.isArray(_data["p22_D"])) {
                this.p22_D = [] as any;
                for (let item of _data["p22_D"])
                    this.p22_D.push(P22_D_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["accounting_vat_inputs"])) {
                this.accounting_vat_inputs = [] as any;
                for (let item of _data["accounting_vat_inputs"])
                    this.accounting_vat_inputs.push(Accounting_VAT_Input_ENTITY.fromJS(item));
            }
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.is_tax = _data["is_tax"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
        }
    }

    static fromJS(data: any): P22_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P22_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["invoice_no"] = this.invoice_no;
        data["series_no"] = this.series_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["creditor_account"] = this.creditor_account;
        data["tax_code"] = this.tax_code;
        data["tax_account"] = this.tax_account;
        data["total_money_goods_fc"] = this.total_money_goods_fc;
        data["total_money_goods"] = this.total_money_goods;
        data["code_symbol"] = this.code_symbol;
        data["cost_fc"] = this.cost_fc;
        data["cost"] = this.cost;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["total_money"] = this.total_money;
        data["total_money_fc"] = this.total_money_fc;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["sales_order_no"] = this.sales_order_no;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["xml_22d"] = this.xml_22d;
        data["xml_vat_in"] = this.xml_vat_in;
        if (Array.isArray(this.p22_D)) {
            data["p22_D"] = [];
            for (let item of this.p22_D)
                data["p22_D"].push(item.toJSON());
        }
        if (Array.isArray(this.accounting_vat_inputs)) {
            data["accounting_vat_inputs"] = [];
            for (let item of this.accounting_vat_inputs)
                data["accounting_vat_inputs"].push(item.toJSON());
        }
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["is_tax"] = this.is_tax;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        return data;
    }

    clone(): P22_M_ENTITY {
        const json = this.toJSON();
        let result = new P22_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP22_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    series_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    code_symbol?: string | undefined;
    cost_fc?: number | undefined;
    cost?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    total_money?: number | undefined;
    total_money_fc?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    sales_order_no?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    xml_22d?: string | undefined;
    xml_vat_in?: string | undefined;
    p22_D?: P22_D_ENTITY[] | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
}

export class P23_D_ENTITY implements IP23_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    debitor_account?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    cost_fc?: number | undefined;
    cost?: number | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    tax_import?: number | undefined;
    tax_import_fc?: number | undefined;
    construction_id?: string | undefined;
    tax_import_code?: string | undefined;
    vat_import?: number | undefined;
    group_code?: string | undefined;
    group_symbol?: string | undefined;
    standard_code?: number | undefined;
    brand?: number | undefined;
    series_no?: string | undefined;
    lot?: number | undefined;
    expiration_date?: moment.Moment | undefined;
    warranty_term?: number | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    goods_money?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IP23_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.master_code = _data["master_code"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.warehouse_name = _data["warehouse_name"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.debitor_account = _data["debitor_account"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.cost_fc = _data["cost_fc"];
            this.cost = _data["cost"];
            this.fee_code = _data["fee_code"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.tax_import = _data["tax_import"];
            this.tax_import_fc = _data["tax_import_fc"];
            this.construction_id = _data["construction_id"];
            this.tax_import_code = _data["tax_import_code"];
            this.vat_import = _data["vat_import"];
            this.group_code = _data["group_code"];
            this.group_symbol = _data["group_symbol"];
            this.standard_code = _data["standard_code"];
            this.brand = _data["brand"];
            this.series_no = _data["series_no"];
            this.lot = _data["lot"];
            this.expiration_date = _data["expiration_date"] ? moment.parseZone(_data["expiration_date"].toString()) : <any>undefined;
            this.warranty_term = _data["warranty_term"];
            this.inventory = _data["inventory"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.goods_money = _data["goods_money"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): P23_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P23_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["master_code"] = this.master_code;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["warehouse_name"] = this.warehouse_name;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["debitor_account"] = this.debitor_account;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["cost_fc"] = this.cost_fc;
        data["cost"] = this.cost;
        data["fee_code"] = this.fee_code;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["tax_import"] = this.tax_import;
        data["tax_import_fc"] = this.tax_import_fc;
        data["construction_id"] = this.construction_id;
        data["tax_import_code"] = this.tax_import_code;
        data["vat_import"] = this.vat_import;
        data["group_code"] = this.group_code;
        data["group_symbol"] = this.group_symbol;
        data["standard_code"] = this.standard_code;
        data["brand"] = this.brand;
        data["series_no"] = this.series_no;
        data["lot"] = this.lot;
        data["expiration_date"] = this.expiration_date ? this.expiration_date.toISOString(true) : <any>undefined;
        data["warranty_term"] = this.warranty_term;
        data["inventory"] = this.inventory;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["goods_money"] = this.goods_money;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): P23_D_ENTITY {
        const json = this.toJSON();
        let result = new P23_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP23_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    debitor_account?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    cost_fc?: number | undefined;
    cost?: number | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    tax_import?: number | undefined;
    tax_import_fc?: number | undefined;
    construction_id?: string | undefined;
    tax_import_code?: string | undefined;
    vat_import?: number | undefined;
    group_code?: string | undefined;
    group_symbol?: string | undefined;
    standard_code?: number | undefined;
    brand?: number | undefined;
    series_no?: string | undefined;
    lot?: number | undefined;
    expiration_date?: moment.Moment | undefined;
    warranty_term?: number | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    goods_money?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
}

export class P23_M_ENTITY implements IP23_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    series_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    tax_code?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_account?: string | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    tax_import_account?: string | undefined;
    tax_import_money_fc?: number | undefined;
    tax_import_money?: number | undefined;
    cost_fc?: number | undefined;
    cost?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    tax_account1?: string | undefined;
    tax_import_code?: string | undefined;
    sales_order_no?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    xml_23d?: string | undefined;
    xml_vat_in?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
    p23_D?: P23_D_ENTITY[] | undefined;

    constructor(data?: IP23_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.invoice_no = _data["invoice_no"];
            this.series_no = _data["series_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.creditor_account = _data["creditor_account"];
            this.tax_code = _data["tax_code"];
            this.total_money_goods_fc = _data["total_money_goods_fc"];
            this.total_money_goods = _data["total_money_goods"];
            this.tax_account = _data["tax_account"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.tax_import_account = _data["tax_import_account"];
            this.tax_import_money_fc = _data["tax_import_money_fc"];
            this.tax_import_money = _data["tax_import_money"];
            this.cost_fc = _data["cost_fc"];
            this.cost = _data["cost"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.tax_account1 = _data["tax_account1"];
            this.tax_import_code = _data["tax_import_code"];
            this.sales_order_no = _data["sales_order_no"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.xml_23d = _data["xml_23d"];
            this.xml_vat_in = _data["xml_vat_in"];
            this.voucher_year = _data["voucher_year"];
            this.language_id = _data["language_id"];
            this.is_tax = _data["is_tax"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            if (Array.isArray(_data["accounting_vat_inputs"])) {
                this.accounting_vat_inputs = [] as any;
                for (let item of _data["accounting_vat_inputs"])
                    this.accounting_vat_inputs.push(Accounting_VAT_Input_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["p23_D"])) {
                this.p23_D = [] as any;
                for (let item of _data["p23_D"])
                    this.p23_D.push(P23_D_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): P23_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P23_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["invoice_no"] = this.invoice_no;
        data["series_no"] = this.series_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["creditor_account"] = this.creditor_account;
        data["tax_code"] = this.tax_code;
        data["total_money_goods_fc"] = this.total_money_goods_fc;
        data["total_money_goods"] = this.total_money_goods;
        data["tax_account"] = this.tax_account;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["tax_import_account"] = this.tax_import_account;
        data["tax_import_money_fc"] = this.tax_import_money_fc;
        data["tax_import_money"] = this.tax_import_money;
        data["cost_fc"] = this.cost_fc;
        data["cost"] = this.cost;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["tax_account1"] = this.tax_account1;
        data["tax_import_code"] = this.tax_import_code;
        data["sales_order_no"] = this.sales_order_no;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["xml_23d"] = this.xml_23d;
        data["xml_vat_in"] = this.xml_vat_in;
        data["voucher_year"] = this.voucher_year;
        data["language_id"] = this.language_id;
        data["is_tax"] = this.is_tax;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        if (Array.isArray(this.accounting_vat_inputs)) {
            data["accounting_vat_inputs"] = [];
            for (let item of this.accounting_vat_inputs)
                data["accounting_vat_inputs"].push(item.toJSON());
        }
        if (Array.isArray(this.p23_D)) {
            data["p23_D"] = [];
            for (let item of this.p23_D)
                data["p23_D"].push(item.toJSON());
        }
        return data;
    }

    clone(): P23_M_ENTITY {
        const json = this.toJSON();
        let result = new P23_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP23_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    series_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    tax_code?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_account?: string | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    tax_import_account?: string | undefined;
    tax_import_money_fc?: number | undefined;
    tax_import_money?: number | undefined;
    cost_fc?: number | undefined;
    cost?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    tax_account1?: string | undefined;
    tax_import_code?: string | undefined;
    sales_order_no?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    xml_23d?: string | undefined;
    xml_vat_in?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
    p23_D?: P23_D_ENTITY[] | undefined;
}

export class P24_D_ENTITY implements IP24_D_ENTITY {
    company_code?: string | undefined;
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    creditor_account?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    notes?: string | undefined;
    construction_id?: string | undefined;
    department_code?: string | undefined;
    group_code?: string | undefined;
    standard?: number | undefined;
    brand?: number | undefined;
    serial_no?: string | undefined;
    lot?: number | undefined;
    expiration_date?: moment.Moment | undefined;
    warranty_term?: number | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    warranty_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IP24_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.company_code = _data["company_code"];
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.master_code = _data["master_code"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.creditor_account = _data["creditor_account"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.notes = _data["notes"];
            this.construction_id = _data["construction_id"];
            this.department_code = _data["department_code"];
            this.group_code = _data["group_code"];
            this.standard = _data["standard"];
            this.brand = _data["brand"];
            this.serial_no = _data["serial_no"];
            this.lot = _data["lot"];
            this.expiration_date = _data["expiration_date"] ? moment.parseZone(_data["expiration_date"].toString()) : <any>undefined;
            this.warranty_term = _data["warranty_term"];
            this.inventory = _data["inventory"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.warranty_date = _data["warranty_date"] ? moment.parseZone(_data["warranty_date"].toString()) : <any>undefined;
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): P24_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P24_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company_code"] = this.company_code;
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["master_code"] = this.master_code;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["creditor_account"] = this.creditor_account;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["notes"] = this.notes;
        data["construction_id"] = this.construction_id;
        data["department_code"] = this.department_code;
        data["group_code"] = this.group_code;
        data["standard"] = this.standard;
        data["brand"] = this.brand;
        data["serial_no"] = this.serial_no;
        data["lot"] = this.lot;
        data["expiration_date"] = this.expiration_date ? this.expiration_date.toISOString(true) : <any>undefined;
        data["warranty_term"] = this.warranty_term;
        data["inventory"] = this.inventory;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["warranty_date"] = this.warranty_date ? this.warranty_date.toISOString(true) : <any>undefined;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): P24_D_ENTITY {
        const json = this.toJSON();
        let result = new P24_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP24_D_ENTITY {
    company_code?: string | undefined;
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    creditor_account?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    notes?: string | undefined;
    construction_id?: string | undefined;
    department_code?: string | undefined;
    group_code?: string | undefined;
    standard?: number | undefined;
    brand?: number | undefined;
    serial_no?: string | undefined;
    lot?: number | undefined;
    expiration_date?: moment.Moment | undefined;
    warranty_term?: number | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    warranty_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
}

export class P24_M_ENTITY implements IP24_M_ENTITY {
    company_code?: string | undefined;
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    seri_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    is_average_price?: boolean | undefined;
    order_number?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    is_tax?: boolean | undefined;
    voucher_year?: number | undefined;
    xml_24d?: string | undefined;
    xml_vat_in?: string | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    p24_D?: P24_D_ENTITY[] | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;

    constructor(data?: IP24_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.company_code = _data["company_code"];
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.invoice_no = _data["invoice_no"];
            this.seri_no = _data["seri_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.debitor_account = _data["debitor_account"];
            this.tax_code = _data["tax_code"];
            this.tax_account = _data["tax_account"];
            this.total_money_goods_fc = _data["total_money_goods_fc"];
            this.total_money_goods = _data["total_money_goods"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.is_average_price = _data["is_average_price"];
            this.order_number = _data["order_number"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.is_tax = _data["is_tax"];
            this.voucher_year = _data["voucher_year"];
            this.xml_24d = _data["xml_24d"];
            this.xml_vat_in = _data["xml_vat_in"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            if (Array.isArray(_data["p24_D"])) {
                this.p24_D = [] as any;
                for (let item of _data["p24_D"])
                    this.p24_D.push(P24_D_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["accounting_vat_inputs"])) {
                this.accounting_vat_inputs = [] as any;
                for (let item of _data["accounting_vat_inputs"])
                    this.accounting_vat_inputs.push(Accounting_VAT_Input_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): P24_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P24_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company_code"] = this.company_code;
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["invoice_no"] = this.invoice_no;
        data["seri_no"] = this.seri_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["debitor_account"] = this.debitor_account;
        data["tax_code"] = this.tax_code;
        data["tax_account"] = this.tax_account;
        data["total_money_goods_fc"] = this.total_money_goods_fc;
        data["total_money_goods"] = this.total_money_goods;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["is_average_price"] = this.is_average_price;
        data["order_number"] = this.order_number;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["is_tax"] = this.is_tax;
        data["voucher_year"] = this.voucher_year;
        data["xml_24d"] = this.xml_24d;
        data["xml_vat_in"] = this.xml_vat_in;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        if (Array.isArray(this.p24_D)) {
            data["p24_D"] = [];
            for (let item of this.p24_D)
                data["p24_D"].push(item.toJSON());
        }
        if (Array.isArray(this.accounting_vat_inputs)) {
            data["accounting_vat_inputs"] = [];
            for (let item of this.accounting_vat_inputs)
                data["accounting_vat_inputs"].push(item.toJSON());
        }
        return data;
    }

    clone(): P24_M_ENTITY {
        const json = this.toJSON();
        let result = new P24_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP24_M_ENTITY {
    company_code?: string | undefined;
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    seri_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    is_average_price?: boolean | undefined;
    order_number?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    is_tax?: boolean | undefined;
    voucher_year?: number | undefined;
    xml_24d?: string | undefined;
    xml_vat_in?: string | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    p24_D?: P24_D_ENTITY[] | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
}

export class P25_D_ENTITY implements IP25_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    voucher_22_m_code?: string | undefined;
    voucher_22_d_code?: string | undefined;
    money_goods?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    notes?: string | undefined;
    construction_id?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    voucher_no?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IP25_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.master_code = _data["master_code"];
            this.voucher_22_m_code = _data["voucher_22_m_code"];
            this.voucher_22_d_code = _data["voucher_22_d_code"];
            this.money_goods = _data["money_goods"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.debitor_account = _data["debitor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.notes = _data["notes"];
            this.construction_id = _data["construction_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.voucher_no = _data["voucher_no"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): P25_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P25_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["master_code"] = this.master_code;
        data["voucher_22_m_code"] = this.voucher_22_m_code;
        data["voucher_22_d_code"] = this.voucher_22_d_code;
        data["money_goods"] = this.money_goods;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["debitor_account"] = this.debitor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["notes"] = this.notes;
        data["construction_id"] = this.construction_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["voucher_no"] = this.voucher_no;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): P25_D_ENTITY {
        const json = this.toJSON();
        let result = new P25_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP25_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    voucher_22_m_code?: string | undefined;
    voucher_22_d_code?: string | undefined;
    money_goods?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    notes?: string | undefined;
    construction_id?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    voucher_no?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
}

export class P25_M_ENTITY implements IP25_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    seri_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    money_goods_fc?: number | undefined;
    money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    total_money_goods?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    voucher_22_m_code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
    xml_25d?: string | undefined;
    xml_vat_in?: string | undefined;
    language_id?: number | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    p25_D?: P25_D_ENTITY[] | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;

    constructor(data?: IP25_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.invoice_no = _data["invoice_no"];
            this.seri_no = _data["seri_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.creditor_account = _data["creditor_account"];
            this.tax_code = _data["tax_code"];
            this.tax_account = _data["tax_account"];
            this.money_goods_fc = _data["money_goods_fc"];
            this.money_goods = _data["money_goods"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.total_money_goods = _data["total_money_goods"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.voucher_22_m_code = _data["voucher_22_m_code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_year = _data["voucher_year"];
            this.xml_25d = _data["xml_25d"];
            this.xml_vat_in = _data["xml_vat_in"];
            this.language_id = _data["language_id"];
            this.is_tax = _data["is_tax"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            if (Array.isArray(_data["p25_D"])) {
                this.p25_D = [] as any;
                for (let item of _data["p25_D"])
                    this.p25_D.push(P25_D_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["accounting_vat_inputs"])) {
                this.accounting_vat_inputs = [] as any;
                for (let item of _data["accounting_vat_inputs"])
                    this.accounting_vat_inputs.push(Accounting_VAT_Input_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): P25_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P25_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["invoice_no"] = this.invoice_no;
        data["seri_no"] = this.seri_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["creditor_account"] = this.creditor_account;
        data["tax_code"] = this.tax_code;
        data["tax_account"] = this.tax_account;
        data["money_goods_fc"] = this.money_goods_fc;
        data["money_goods"] = this.money_goods;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["total_money_goods"] = this.total_money_goods;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["voucher_22_m_code"] = this.voucher_22_m_code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_year"] = this.voucher_year;
        data["xml_25d"] = this.xml_25d;
        data["xml_vat_in"] = this.xml_vat_in;
        data["language_id"] = this.language_id;
        data["is_tax"] = this.is_tax;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        if (Array.isArray(this.p25_D)) {
            data["p25_D"] = [];
            for (let item of this.p25_D)
                data["p25_D"].push(item.toJSON());
        }
        if (Array.isArray(this.accounting_vat_inputs)) {
            data["accounting_vat_inputs"] = [];
            for (let item of this.accounting_vat_inputs)
                data["accounting_vat_inputs"].push(item.toJSON());
        }
        return data;
    }

    clone(): P25_M_ENTITY {
        const json = this.toJSON();
        let result = new P25_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP25_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    seri_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    money_goods_fc?: number | undefined;
    money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    total_money_goods?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    voucher_22_m_code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
    xml_25d?: string | undefined;
    xml_vat_in?: string | undefined;
    language_id?: number | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    p25_D?: P25_D_ENTITY[] | undefined;
    accounting_vat_inputs?: Accounting_VAT_Input_ENTITY[] | undefined;
}

export class P26_D_ENTITY implements IP26_D_ENTITY {
    id?: number;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    code?: string | undefined;
    master_code?: string | undefined;
    debitor_account?: string | undefined;
    code_fc?: string | undefined;
    invoice_exchange_rate?: number | undefined;
    payment_required_fc?: number | undefined;
    payment_required?: number | undefined;
    payment_fc?: number | undefined;
    payment?: number | undefined;
    remaining_asset_acquisition_money_fc?: number | undefined;
    remaining_asset_acquisition_money?: number | undefined;
    remaining_exchange_rate?: number | undefined;
    voucher_21_m_code?: string | undefined;
    invoice_no?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    construction_id?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IP26_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.code = _data["code"];
            this.master_code = _data["master_code"];
            this.debitor_account = _data["debitor_account"];
            this.code_fc = _data["code_fc"];
            this.invoice_exchange_rate = _data["invoice_exchange_rate"];
            this.payment_required_fc = _data["payment_required_fc"];
            this.payment_required = _data["payment_required"];
            this.payment_fc = _data["payment_fc"];
            this.payment = _data["payment"];
            this.remaining_asset_acquisition_money_fc = _data["remaining_asset_acquisition_money_fc"];
            this.remaining_asset_acquisition_money = _data["remaining_asset_acquisition_money"];
            this.remaining_exchange_rate = _data["remaining_exchange_rate"];
            this.voucher_21_m_code = _data["voucher_21_m_code"];
            this.invoice_no = _data["invoice_no"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.fee_code = _data["fee_code"];
            this.construction_id = _data["construction_id"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): P26_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P26_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["code"] = this.code;
        data["master_code"] = this.master_code;
        data["debitor_account"] = this.debitor_account;
        data["code_fc"] = this.code_fc;
        data["invoice_exchange_rate"] = this.invoice_exchange_rate;
        data["payment_required_fc"] = this.payment_required_fc;
        data["payment_required"] = this.payment_required;
        data["payment_fc"] = this.payment_fc;
        data["payment"] = this.payment;
        data["remaining_asset_acquisition_money_fc"] = this.remaining_asset_acquisition_money_fc;
        data["remaining_asset_acquisition_money"] = this.remaining_asset_acquisition_money;
        data["remaining_exchange_rate"] = this.remaining_exchange_rate;
        data["voucher_21_m_code"] = this.voucher_21_m_code;
        data["invoice_no"] = this.invoice_no;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["fee_code"] = this.fee_code;
        data["construction_id"] = this.construction_id;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): P26_D_ENTITY {
        const json = this.toJSON();
        let result = new P26_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP26_D_ENTITY {
    id?: number;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    code?: string | undefined;
    master_code?: string | undefined;
    debitor_account?: string | undefined;
    code_fc?: string | undefined;
    invoice_exchange_rate?: number | undefined;
    payment_required_fc?: number | undefined;
    payment_required?: number | undefined;
    payment_fc?: number | undefined;
    payment?: number | undefined;
    remaining_asset_acquisition_money_fc?: number | undefined;
    remaining_asset_acquisition_money?: number | undefined;
    remaining_exchange_rate?: number | undefined;
    voucher_21_m_code?: string | undefined;
    invoice_no?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    construction_id?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class P26_M_ENTITY implements IP26_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    exchange_rate_difference_account?: string | undefined;
    exchange_rate_difference_money?: number | undefined;
    exchange_rate_difference_account1?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    xml_26d?: string | undefined;
    is_tax?: boolean | undefined;
    voucher_year?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    p26_D?: P26_D_ENTITY[] | undefined;

    constructor(data?: IP26_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.creditor_account = _data["creditor_account"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.exchange_rate_difference_account = _data["exchange_rate_difference_account"];
            this.exchange_rate_difference_money = _data["exchange_rate_difference_money"];
            this.exchange_rate_difference_account1 = _data["exchange_rate_difference_account1"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.xml_26d = _data["xml_26d"];
            this.is_tax = _data["is_tax"];
            this.voucher_year = _data["voucher_year"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            if (Array.isArray(_data["p26_D"])) {
                this.p26_D = [] as any;
                for (let item of _data["p26_D"])
                    this.p26_D.push(P26_D_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): P26_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new P26_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["creditor_account"] = this.creditor_account;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["exchange_rate_difference_account"] = this.exchange_rate_difference_account;
        data["exchange_rate_difference_money"] = this.exchange_rate_difference_money;
        data["exchange_rate_difference_account1"] = this.exchange_rate_difference_account1;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["xml_26d"] = this.xml_26d;
        data["is_tax"] = this.is_tax;
        data["voucher_year"] = this.voucher_year;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        if (Array.isArray(this.p26_D)) {
            data["p26_D"] = [];
            for (let item of this.p26_D)
                data["p26_D"].push(item.toJSON());
        }
        return data;
    }

    clone(): P26_M_ENTITY {
        const json = this.toJSON();
        let result = new P26_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IP26_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    exchange_rate_difference_account?: string | undefined;
    exchange_rate_difference_money?: number | undefined;
    exchange_rate_difference_account1?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    xml_26d?: string | undefined;
    is_tax?: boolean | undefined;
    voucher_year?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    p26_D?: P26_D_ENTITY[] | undefined;
}

export class REFERENCE_ENTITY implements IREFERENCE_ENTITY {
    id?: number;
    idEdit?: number | undefined;
    codeFather?: string | undefined;
    userID?: number | undefined;
    code?: string | undefined;
    code_master?: string | undefined;
    name?: string | undefined;
    tablE_NAME?: string | undefined;
    tablE_NAME_DETAIL?: string | undefined;
    stored?: string | undefined;
    param?: string | undefined;
    columN_NAME?: string | undefined;
    values?: string | undefined;
    key?: string | undefined;
    type?: number | undefined;
    type_id?: number | undefined;
    inputMasterJSON?: string | undefined;
    modelDetailJSON?: string | undefined;
    outputData?: { [key: string]: any; }[] | undefined;
    genRowTable?: SYS_GenRowTable;
    user?: User;

    constructor(data?: IREFERENCE_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.idEdit = _data["idEdit"];
            this.codeFather = _data["codeFather"];
            this.userID = _data["userID"];
            this.code = _data["code"];
            this.code_master = _data["code_master"];
            this.name = _data["name"];
            this.tablE_NAME = _data["tablE_NAME"];
            this.tablE_NAME_DETAIL = _data["tablE_NAME_DETAIL"];
            this.stored = _data["stored"];
            this.param = _data["param"];
            this.columN_NAME = _data["columN_NAME"];
            this.values = _data["values"];
            this.key = _data["key"];
            this.type = _data["type"];
            this.type_id = _data["type_id"];
            this.inputMasterJSON = _data["inputMasterJSON"];
            this.modelDetailJSON = _data["modelDetailJSON"];
            if (Array.isArray(_data["outputData"])) {
                this.outputData = [] as any;
                for (let item of _data["outputData"])
                    this.outputData.push(item);
            }
            this.genRowTable = _data["genRowTable"] ? SYS_GenRowTable.fromJS(_data["genRowTable"]) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): REFERENCE_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new REFERENCE_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["idEdit"] = this.idEdit;
        data["codeFather"] = this.codeFather;
        data["userID"] = this.userID;
        data["code"] = this.code;
        data["code_master"] = this.code_master;
        data["name"] = this.name;
        data["tablE_NAME"] = this.tablE_NAME;
        data["tablE_NAME_DETAIL"] = this.tablE_NAME_DETAIL;
        data["stored"] = this.stored;
        data["param"] = this.param;
        data["columN_NAME"] = this.columN_NAME;
        data["values"] = this.values;
        data["key"] = this.key;
        data["type"] = this.type;
        data["type_id"] = this.type_id;
        data["inputMasterJSON"] = this.inputMasterJSON;
        data["modelDetailJSON"] = this.modelDetailJSON;
        if (Array.isArray(this.outputData)) {
            data["outputData"] = [];
            for (let item of this.outputData)
                data["outputData"].push(item);
        }
        data["genRowTable"] = this.genRowTable ? this.genRowTable.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }

    clone(): REFERENCE_ENTITY {
        const json = this.toJSON();
        let result = new REFERENCE_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IREFERENCE_ENTITY {
    id?: number;
    idEdit?: number | undefined;
    codeFather?: string | undefined;
    userID?: number | undefined;
    code?: string | undefined;
    code_master?: string | undefined;
    name?: string | undefined;
    tablE_NAME?: string | undefined;
    tablE_NAME_DETAIL?: string | undefined;
    stored?: string | undefined;
    param?: string | undefined;
    columN_NAME?: string | undefined;
    values?: string | undefined;
    key?: string | undefined;
    type?: number | undefined;
    type_id?: number | undefined;
    inputMasterJSON?: string | undefined;
    modelDetailJSON?: string | undefined;
    outputData?: { [key: string]: any; }[] | undefined;
    genRowTable?: SYS_GenRowTable;
    user?: User;
}

export class REFERENCE_V3_Param implements IREFERENCE_V3_Param {
    reference?: string | undefined;
    master_data_obj?: any | undefined;
    master_data?: { [key: string]: string; } | undefined;

    constructor(data?: IREFERENCE_V3_Param) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reference = _data["reference"];
            this.master_data_obj = _data["master_data_obj"];
            if (_data["master_data"]) {
                this.master_data = {} as any;
                for (let key in _data["master_data"]) {
                    if (_data["master_data"].hasOwnProperty(key))
                        (<any>this.master_data)[key] = _data["master_data"][key];
                }
            }
        }
    }

    static fromJS(data: any): REFERENCE_V3_Param {
        data = typeof data === 'object' ? data : {};
        let result = new REFERENCE_V3_Param();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reference"] = this.reference;
        data["master_data_obj"] = this.master_data_obj;
        if (this.master_data) {
            data["master_data"] = {};
            for (let key in this.master_data) {
                if (this.master_data.hasOwnProperty(key))
                    (<any>data["master_data"])[key] = (<any>this.master_data)[key];
            }
        }
        return data;
    }

    clone(): REFERENCE_V3_Param {
        const json = this.toJSON();
        let result = new REFERENCE_V3_Param();
        result.init(json);
        return result;
    }
}

export interface IREFERENCE_V3_Param {
    reference?: string | undefined;
    master_data_obj?: any | undefined;
    master_data?: { [key: string]: string; } | undefined;
}

export class CAT_Contract_ENTITY implements ICAT_Contract_ENTITY {
    id?: number;
    code?: string | undefined;
    symbol?: string | undefined;
    master_code?: string | undefined;
    name?: string | undefined;
    name1?: string | undefined;
    name2?: string | undefined;
    notes?: string | undefined;
    voucher_master_code?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    type?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Contract_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.symbol = _data["symbol"];
            this.master_code = _data["master_code"];
            this.name = _data["name"];
            this.name1 = _data["name1"];
            this.name2 = _data["name2"];
            this.notes = _data["notes"];
            this.voucher_master_code = _data["voucher_master_code"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.approve = _data["approve"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_id = _data["account_id"];
            this.decentralization = _data["decentralization"];
            this.type = _data["type"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Contract_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Contract_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["symbol"] = this.symbol;
        data["master_code"] = this.master_code;
        data["name"] = this.name;
        data["name1"] = this.name1;
        data["name2"] = this.name2;
        data["notes"] = this.notes;
        data["voucher_master_code"] = this.voucher_master_code;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["approve"] = this.approve;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_id"] = this.account_id;
        data["decentralization"] = this.decentralization;
        data["type"] = this.type;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Contract_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Contract_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Contract_ENTITY {
    id?: number;
    code?: string | undefined;
    symbol?: string | undefined;
    master_code?: string | undefined;
    name?: string | undefined;
    name1?: string | undefined;
    name2?: string | undefined;
    notes?: string | undefined;
    voucher_master_code?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    type?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class CAT_Customer_Group_ENTITY implements ICAT_Customer_Group_ENTITY {
    id?: number;
    code?: string | undefined;
    symbol?: string | undefined;
    master_symbol?: string | undefined;
    name?: string | undefined;
    name1?: string | undefined;
    name2?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    account_id?: number | undefined;
    notes?: string | undefined;
    type?: string | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Customer_Group_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.symbol = _data["symbol"];
            this.master_symbol = _data["master_symbol"];
            this.name = _data["name"];
            this.name1 = _data["name1"];
            this.name2 = _data["name2"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.approve = _data["approve"];
            this.account_id = _data["account_id"];
            this.notes = _data["notes"];
            this.type = _data["type"];
            this.decentralization = _data["decentralization"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Customer_Group_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Customer_Group_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["symbol"] = this.symbol;
        data["master_symbol"] = this.master_symbol;
        data["name"] = this.name;
        data["name1"] = this.name1;
        data["name2"] = this.name2;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["approve"] = this.approve;
        data["account_id"] = this.account_id;
        data["notes"] = this.notes;
        data["type"] = this.type;
        data["decentralization"] = this.decentralization;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Customer_Group_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Customer_Group_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Customer_Group_ENTITY {
    id?: number;
    code?: string | undefined;
    symbol?: string | undefined;
    master_symbol?: string | undefined;
    name?: string | undefined;
    name1?: string | undefined;
    name2?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    account_id?: number | undefined;
    notes?: string | undefined;
    type?: string | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class CAT_Customer_ENTITY implements ICAT_Customer_ENTITY {
    code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    address?: string | undefined;
    partner?: string | undefined;
    tax_code?: string | undefined;
    phone_number?: string | undefined;
    mobile?: string | undefined;
    email?: string | undefined;
    fax?: string | undefined;
    bank_number?: string | undefined;
    bank_name?: string | undefined;
    is_supplier?: boolean | undefined;
    is_customer?: boolean | undefined;
    is_employee?: boolean | undefined;
    group1?: string | undefined;
    group2?: string | undefined;
    group3?: string | undefined;
    group1_name?: string | undefined;
    group2_name?: string | undefined;
    group3_name?: string | undefined;
    payment_term?: number | undefined;
    debt_code?: number | undefined;
    employee_code?: string | undefined;
    is_active?: boolean | undefined;
    notes?: string | undefined;
    interest_rate?: number | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    decentralization?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Customer_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.address = _data["address"];
            this.partner = _data["partner"];
            this.tax_code = _data["tax_code"];
            this.phone_number = _data["phone_number"];
            this.mobile = _data["mobile"];
            this.email = _data["email"];
            this.fax = _data["fax"];
            this.bank_number = _data["bank_number"];
            this.bank_name = _data["bank_name"];
            this.is_supplier = _data["is_supplier"];
            this.is_customer = _data["is_customer"];
            this.is_employee = _data["is_employee"];
            this.group1 = _data["group1"];
            this.group2 = _data["group2"];
            this.group3 = _data["group3"];
            this.group1_name = _data["group1_name"];
            this.group2_name = _data["group2_name"];
            this.group3_name = _data["group3_name"];
            this.payment_term = _data["payment_term"];
            this.debt_code = _data["debt_code"];
            this.employee_code = _data["employee_code"];
            this.is_active = _data["is_active"];
            this.notes = _data["notes"];
            this.interest_rate = _data["interest_rate"];
            this.approve = _data["approve"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_id = _data["account_id"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.decentralization = _data["decentralization"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Customer_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Customer_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["address"] = this.address;
        data["partner"] = this.partner;
        data["tax_code"] = this.tax_code;
        data["phone_number"] = this.phone_number;
        data["mobile"] = this.mobile;
        data["email"] = this.email;
        data["fax"] = this.fax;
        data["bank_number"] = this.bank_number;
        data["bank_name"] = this.bank_name;
        data["is_supplier"] = this.is_supplier;
        data["is_customer"] = this.is_customer;
        data["is_employee"] = this.is_employee;
        data["group1"] = this.group1;
        data["group2"] = this.group2;
        data["group3"] = this.group3;
        data["group1_name"] = this.group1_name;
        data["group2_name"] = this.group2_name;
        data["group3_name"] = this.group3_name;
        data["payment_term"] = this.payment_term;
        data["debt_code"] = this.debt_code;
        data["employee_code"] = this.employee_code;
        data["is_active"] = this.is_active;
        data["notes"] = this.notes;
        data["interest_rate"] = this.interest_rate;
        data["approve"] = this.approve;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_id"] = this.account_id;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["decentralization"] = this.decentralization;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Customer_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Customer_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Customer_ENTITY {
    code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    address?: string | undefined;
    partner?: string | undefined;
    tax_code?: string | undefined;
    phone_number?: string | undefined;
    mobile?: string | undefined;
    email?: string | undefined;
    fax?: string | undefined;
    bank_number?: string | undefined;
    bank_name?: string | undefined;
    is_supplier?: boolean | undefined;
    is_customer?: boolean | undefined;
    is_employee?: boolean | undefined;
    group1?: string | undefined;
    group2?: string | undefined;
    group3?: string | undefined;
    group1_name?: string | undefined;
    group2_name?: string | undefined;
    group3_name?: string | undefined;
    payment_term?: number | undefined;
    debt_code?: number | undefined;
    employee_code?: string | undefined;
    is_active?: boolean | undefined;
    notes?: string | undefined;
    interest_rate?: number | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    decentralization?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class CAT_Warranty_Certificate_ENTITY implements ICAT_Warranty_Certificate_ENTITY {
    id?: number;
    code?: string | undefined;
    symbol?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    phone?: string | undefined;
    goods_code?: string | undefined;
    description?: string | undefined;
    serial?: string | undefined;
    notes?: string | undefined;
    tem_no?: number | undefined;
    document_no?: number | undefined;
    warranty?: number | undefined;
    expiration_date?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Warranty_Certificate_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.symbol = _data["symbol"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.phone = _data["phone"];
            this.goods_code = _data["goods_code"];
            this.description = _data["description"];
            this.serial = _data["serial"];
            this.notes = _data["notes"];
            this.tem_no = _data["tem_no"];
            this.document_no = _data["document_no"];
            this.warranty = _data["warranty"];
            this.expiration_date = _data["expiration_date"] ? moment.parseZone(_data["expiration_date"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.approve = _data["approve"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_id = _data["account_id"];
            this.decentralization = _data["decentralization"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Warranty_Certificate_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Warranty_Certificate_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["symbol"] = this.symbol;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["phone"] = this.phone;
        data["goods_code"] = this.goods_code;
        data["description"] = this.description;
        data["serial"] = this.serial;
        data["notes"] = this.notes;
        data["tem_no"] = this.tem_no;
        data["document_no"] = this.document_no;
        data["warranty"] = this.warranty;
        data["expiration_date"] = this.expiration_date ? this.expiration_date.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["approve"] = this.approve;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_id"] = this.account_id;
        data["decentralization"] = this.decentralization;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Warranty_Certificate_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Warranty_Certificate_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Warranty_Certificate_ENTITY {
    id?: number;
    code?: string | undefined;
    symbol?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    phone?: string | undefined;
    goods_code?: string | undefined;
    description?: string | undefined;
    serial?: string | undefined;
    notes?: string | undefined;
    tem_no?: number | undefined;
    document_no?: number | undefined;
    warranty?: number | undefined;
    expiration_date?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class Sales_Report_Of_Accounts_Receivable_Balances_ENTITY implements ISales_Report_Of_Accounts_Receivable_Balances_ENTITY {
    code?: string | undefined;
    customer_code?: string | undefined;
    debitor_money_fc?: number | undefined;
    debitor_money?: number | undefined;
    creditor_money_fc?: number | undefined;
    creditor_money?: number | undefined;
    name?: string | undefined;
    address?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ISales_Report_Of_Accounts_Receivable_Balances_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.customer_code = _data["customer_code"];
            this.debitor_money_fc = _data["debitor_money_fc"];
            this.debitor_money = _data["debitor_money"];
            this.creditor_money_fc = _data["creditor_money_fc"];
            this.creditor_money = _data["creditor_money"];
            this.name = _data["name"];
            this.address = _data["address"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): Sales_Report_Of_Accounts_Receivable_Balances_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Sales_Report_Of_Accounts_Receivable_Balances_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["customer_code"] = this.customer_code;
        data["debitor_money_fc"] = this.debitor_money_fc;
        data["debitor_money"] = this.debitor_money;
        data["creditor_money_fc"] = this.creditor_money_fc;
        data["creditor_money"] = this.creditor_money;
        data["name"] = this.name;
        data["address"] = this.address;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): Sales_Report_Of_Accounts_Receivable_Balances_ENTITY {
        const json = this.toJSON();
        let result = new Sales_Report_Of_Accounts_Receivable_Balances_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISales_Report_Of_Accounts_Receivable_Balances_ENTITY {
    code?: string | undefined;
    customer_code?: string | undefined;
    debitor_money_fc?: number | undefined;
    debitor_money?: number | undefined;
    creditor_money_fc?: number | undefined;
    creditor_money?: number | undefined;
    name?: string | undefined;
    address?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class Sales_Report_Inventory_Materials_ENTITY implements ISales_Report_Inventory_Materials_ENTITY {
    code?: string | undefined;
    warehouse_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    goods_symbol?: string | undefined;
    unit_name?: string | undefined;
    ending_inventory_quantity?: number | undefined;
    beginning_period_defective_quantity?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ISales_Report_Inventory_Materials_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.warehouse_code = _data["warehouse_code"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.goods_symbol = _data["goods_symbol"];
            this.unit_name = _data["unit_name"];
            this.ending_inventory_quantity = _data["ending_inventory_quantity"];
            this.beginning_period_defective_quantity = _data["beginning_period_defective_quantity"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): Sales_Report_Inventory_Materials_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Sales_Report_Inventory_Materials_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["warehouse_code"] = this.warehouse_code;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["goods_symbol"] = this.goods_symbol;
        data["unit_name"] = this.unit_name;
        data["ending_inventory_quantity"] = this.ending_inventory_quantity;
        data["beginning_period_defective_quantity"] = this.beginning_period_defective_quantity;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): Sales_Report_Inventory_Materials_ENTITY {
        const json = this.toJSON();
        let result = new Sales_Report_Inventory_Materials_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISales_Report_Inventory_Materials_ENTITY {
    code?: string | undefined;
    warehouse_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    goods_symbol?: string | undefined;
    unit_name?: string | undefined;
    ending_inventory_quantity?: number | undefined;
    beginning_period_defective_quantity?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class SALES_Report_S32_ENTITY implements ISALES_Report_S32_ENTITY {
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    notes?: string | undefined;
    customer_code?: string | undefined;
    name?: string | undefined;
    debitor_account?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_serial?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    unit_name?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_symbol_out?: string | undefined;
    warehouse_name_out?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_fc?: number | undefined;
    tax?: number | undefined;
    discount_fc?: number | undefined;
    discount?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    warehouse_account?: string | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    group_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ISALES_Report_S32_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.voucher_no = _data["voucher_no"];
            this.invoice_no = _data["invoice_no"];
            this.notes = _data["notes"];
            this.customer_code = _data["customer_code"];
            this.name = _data["name"];
            this.debitor_account = _data["debitor_account"];
            this.goods_code = _data["goods_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_serial = _data["goods_serial"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.unit_name = _data["unit_name"];
            this.warehouse_code = _data["warehouse_code"];
            this.warehouse_symbol_out = _data["warehouse_symbol_out"];
            this.warehouse_name_out = _data["warehouse_name_out"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.tax_fc = _data["tax_fc"];
            this.tax = _data["tax"];
            this.discount_fc = _data["discount_fc"];
            this.discount = _data["discount"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.cogs_price = _data["cogs_price"];
            this.cogs_money = _data["cogs_money"];
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.company_code = _data["company_code"];
            this.warehouse_account = _data["warehouse_account"];
            this.creditor_account = _data["creditor_account"];
            this.fee_code = _data["fee_code"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.group_code = _data["group_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): SALES_Report_S32_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SALES_Report_S32_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["voucher_no"] = this.voucher_no;
        data["invoice_no"] = this.invoice_no;
        data["notes"] = this.notes;
        data["customer_code"] = this.customer_code;
        data["name"] = this.name;
        data["debitor_account"] = this.debitor_account;
        data["goods_code"] = this.goods_code;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_serial"] = this.goods_serial;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["unit_name"] = this.unit_name;
        data["warehouse_code"] = this.warehouse_code;
        data["warehouse_symbol_out"] = this.warehouse_symbol_out;
        data["warehouse_name_out"] = this.warehouse_name_out;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["tax_fc"] = this.tax_fc;
        data["tax"] = this.tax;
        data["discount_fc"] = this.discount_fc;
        data["discount"] = this.discount;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["cogs_price"] = this.cogs_price;
        data["cogs_money"] = this.cogs_money;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["company_code"] = this.company_code;
        data["warehouse_account"] = this.warehouse_account;
        data["creditor_account"] = this.creditor_account;
        data["fee_code"] = this.fee_code;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["group_code"] = this.group_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): SALES_Report_S32_ENTITY {
        const json = this.toJSON();
        let result = new SALES_Report_S32_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISALES_Report_S32_ENTITY {
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    notes?: string | undefined;
    customer_code?: string | undefined;
    name?: string | undefined;
    debitor_account?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_serial?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    unit_name?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_symbol_out?: string | undefined;
    warehouse_name_out?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_fc?: number | undefined;
    tax?: number | undefined;
    discount_fc?: number | undefined;
    discount?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    warehouse_account?: string | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    group_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
}

export class SALES_Report_S33_ENTITY implements ISALES_Report_S33_ENTITY {
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    notes?: string | undefined;
    customer_code?: string | undefined;
    name?: string | undefined;
    debitor_account?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_fc?: number | undefined;
    tax?: number | undefined;
    discount_fc?: number | undefined;
    discount?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    warehouse_account?: string | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    group_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    id?: number | undefined;
    series_no?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: string | undefined;
    is_average_price?: boolean | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    sales_order_no?: string | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    is_tax?: boolean | undefined;
    master_code?: string | undefined;
    sales_returns_account?: string | undefined;
    cogs_account?: string | undefined;
    construction_id?: string | undefined;
    standard_code?: string | undefined;
    brand?: string | undefined;
    lot?: string | undefined;
    expiration_date?: string | undefined;
    warranty_term?: string | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;

    constructor(data?: ISALES_Report_S33_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.voucher_no = _data["voucher_no"];
            this.invoice_no = _data["invoice_no"];
            this.notes = _data["notes"];
            this.customer_code = _data["customer_code"];
            this.name = _data["name"];
            this.debitor_account = _data["debitor_account"];
            this.goods_code = _data["goods_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.tax_fc = _data["tax_fc"];
            this.tax = _data["tax"];
            this.discount_fc = _data["discount_fc"];
            this.discount = _data["discount"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.cogs_price = _data["cogs_price"];
            this.cogs_money = _data["cogs_money"];
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.company_code = _data["company_code"];
            this.warehouse_account = _data["warehouse_account"];
            this.creditor_account = _data["creditor_account"];
            this.fee_code = _data["fee_code"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.group_code = _data["group_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.id = _data["id"];
            this.series_no = _data["series_no"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.is_average_price = _data["is_average_price"];
            this.tax_code = _data["tax_code"];
            this.tax_account = _data["tax_account"];
            this.discount_account = _data["discount_account"];
            this.total_money_goods_fc = _data["total_money_goods_fc"];
            this.total_money_goods = _data["total_money_goods"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.discount_money_fc = _data["discount_money_fc"];
            this.discount_money = _data["discount_money"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.customer_name = _data["customer_name"];
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.sales_order_no = _data["sales_order_no"];
            this.seller_code = _data["seller_code"];
            this.seller_name = _data["seller_name"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.is_tax = _data["is_tax"];
            this.master_code = _data["master_code"];
            this.sales_returns_account = _data["sales_returns_account"];
            this.cogs_account = _data["cogs_account"];
            this.construction_id = _data["construction_id"];
            this.standard_code = _data["standard_code"];
            this.brand = _data["brand"];
            this.lot = _data["lot"];
            this.expiration_date = _data["expiration_date"];
            this.warranty_term = _data["warranty_term"];
            this.inventory = _data["inventory"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
        }
    }

    static fromJS(data: any): SALES_Report_S33_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SALES_Report_S33_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["voucher_no"] = this.voucher_no;
        data["invoice_no"] = this.invoice_no;
        data["notes"] = this.notes;
        data["customer_code"] = this.customer_code;
        data["name"] = this.name;
        data["debitor_account"] = this.debitor_account;
        data["goods_code"] = this.goods_code;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["tax_fc"] = this.tax_fc;
        data["tax"] = this.tax;
        data["discount_fc"] = this.discount_fc;
        data["discount"] = this.discount;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["cogs_price"] = this.cogs_price;
        data["cogs_money"] = this.cogs_money;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["company_code"] = this.company_code;
        data["warehouse_account"] = this.warehouse_account;
        data["creditor_account"] = this.creditor_account;
        data["fee_code"] = this.fee_code;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["group_code"] = this.group_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["id"] = this.id;
        data["series_no"] = this.series_no;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["is_average_price"] = this.is_average_price;
        data["tax_code"] = this.tax_code;
        data["tax_account"] = this.tax_account;
        data["discount_account"] = this.discount_account;
        data["total_money_goods_fc"] = this.total_money_goods_fc;
        data["total_money_goods"] = this.total_money_goods;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["discount_money_fc"] = this.discount_money_fc;
        data["discount_money"] = this.discount_money;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["customer_name"] = this.customer_name;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["sales_order_no"] = this.sales_order_no;
        data["seller_code"] = this.seller_code;
        data["seller_name"] = this.seller_name;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["is_tax"] = this.is_tax;
        data["master_code"] = this.master_code;
        data["sales_returns_account"] = this.sales_returns_account;
        data["cogs_account"] = this.cogs_account;
        data["construction_id"] = this.construction_id;
        data["standard_code"] = this.standard_code;
        data["brand"] = this.brand;
        data["lot"] = this.lot;
        data["expiration_date"] = this.expiration_date;
        data["warranty_term"] = this.warranty_term;
        data["inventory"] = this.inventory;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        return data;
    }

    clone(): SALES_Report_S33_ENTITY {
        const json = this.toJSON();
        let result = new SALES_Report_S33_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISALES_Report_S33_ENTITY {
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    notes?: string | undefined;
    customer_code?: string | undefined;
    name?: string | undefined;
    debitor_account?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_fc?: number | undefined;
    tax?: number | undefined;
    discount_fc?: number | undefined;
    discount?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    warehouse_account?: string | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    group_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    id?: number | undefined;
    series_no?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: string | undefined;
    is_average_price?: boolean | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    sales_order_no?: string | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    is_tax?: boolean | undefined;
    master_code?: string | undefined;
    sales_returns_account?: string | undefined;
    cogs_account?: string | undefined;
    construction_id?: string | undefined;
    standard_code?: string | undefined;
    brand?: string | undefined;
    lot?: string | undefined;
    expiration_date?: string | undefined;
    warranty_term?: string | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
}

export class SALES_Report_S32_Sales_ENTITY implements ISALES_Report_S32_Sales_ENTITY {
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    notes?: string | undefined;
    customer_code?: string | undefined;
    name?: string | undefined;
    debitor_account?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_fc?: number | undefined;
    tax?: number | undefined;
    discount_fc?: number | undefined;
    discount?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    warehouse_account?: string | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    group_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    id?: number | undefined;
    series_no?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: string | undefined;
    is_average_price?: boolean | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    sales_order_no?: string | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    is_tax?: boolean | undefined;
    master_code?: string | undefined;
    sales_returns_account?: string | undefined;
    cogs_account?: number | undefined;
    construction_id?: string | undefined;
    standard_code?: string | undefined;
    brand?: string | undefined;
    lot?: string | undefined;
    expiration_date?: string | undefined;
    warranty_term?: string | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    sales?: number | undefined;

    constructor(data?: ISALES_Report_S32_Sales_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.voucher_no = _data["voucher_no"];
            this.invoice_no = _data["invoice_no"];
            this.notes = _data["notes"];
            this.customer_code = _data["customer_code"];
            this.name = _data["name"];
            this.debitor_account = _data["debitor_account"];
            this.goods_code = _data["goods_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.tax_fc = _data["tax_fc"];
            this.tax = _data["tax"];
            this.discount_fc = _data["discount_fc"];
            this.discount = _data["discount"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.cogs_price = _data["cogs_price"];
            this.cogs_money = _data["cogs_money"];
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.company_code = _data["company_code"];
            this.warehouse_account = _data["warehouse_account"];
            this.creditor_account = _data["creditor_account"];
            this.fee_code = _data["fee_code"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.group_code = _data["group_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.id = _data["id"];
            this.series_no = _data["series_no"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.is_average_price = _data["is_average_price"];
            this.tax_code = _data["tax_code"];
            this.tax_account = _data["tax_account"];
            this.discount_account = _data["discount_account"];
            this.total_money_goods_fc = _data["total_money_goods_fc"];
            this.total_money_goods = _data["total_money_goods"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.discount_money_fc = _data["discount_money_fc"];
            this.discount_money = _data["discount_money"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.customer_name = _data["customer_name"];
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.sales_order_no = _data["sales_order_no"];
            this.seller_code = _data["seller_code"];
            this.seller_name = _data["seller_name"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.is_tax = _data["is_tax"];
            this.master_code = _data["master_code"];
            this.sales_returns_account = _data["sales_returns_account"];
            this.cogs_account = _data["cogs_account"];
            this.construction_id = _data["construction_id"];
            this.standard_code = _data["standard_code"];
            this.brand = _data["brand"];
            this.lot = _data["lot"];
            this.expiration_date = _data["expiration_date"];
            this.warranty_term = _data["warranty_term"];
            this.inventory = _data["inventory"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.sales = _data["sales"];
        }
    }

    static fromJS(data: any): SALES_Report_S32_Sales_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SALES_Report_S32_Sales_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["voucher_no"] = this.voucher_no;
        data["invoice_no"] = this.invoice_no;
        data["notes"] = this.notes;
        data["customer_code"] = this.customer_code;
        data["name"] = this.name;
        data["debitor_account"] = this.debitor_account;
        data["goods_code"] = this.goods_code;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["tax_fc"] = this.tax_fc;
        data["tax"] = this.tax;
        data["discount_fc"] = this.discount_fc;
        data["discount"] = this.discount;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["cogs_price"] = this.cogs_price;
        data["cogs_money"] = this.cogs_money;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["company_code"] = this.company_code;
        data["warehouse_account"] = this.warehouse_account;
        data["creditor_account"] = this.creditor_account;
        data["fee_code"] = this.fee_code;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["group_code"] = this.group_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["id"] = this.id;
        data["series_no"] = this.series_no;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["is_average_price"] = this.is_average_price;
        data["tax_code"] = this.tax_code;
        data["tax_account"] = this.tax_account;
        data["discount_account"] = this.discount_account;
        data["total_money_goods_fc"] = this.total_money_goods_fc;
        data["total_money_goods"] = this.total_money_goods;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["discount_money_fc"] = this.discount_money_fc;
        data["discount_money"] = this.discount_money;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["customer_name"] = this.customer_name;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["sales_order_no"] = this.sales_order_no;
        data["seller_code"] = this.seller_code;
        data["seller_name"] = this.seller_name;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["is_tax"] = this.is_tax;
        data["master_code"] = this.master_code;
        data["sales_returns_account"] = this.sales_returns_account;
        data["cogs_account"] = this.cogs_account;
        data["construction_id"] = this.construction_id;
        data["standard_code"] = this.standard_code;
        data["brand"] = this.brand;
        data["lot"] = this.lot;
        data["expiration_date"] = this.expiration_date;
        data["warranty_term"] = this.warranty_term;
        data["inventory"] = this.inventory;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["sales"] = this.sales;
        return data;
    }

    clone(): SALES_Report_S32_Sales_ENTITY {
        const json = this.toJSON();
        let result = new SALES_Report_S32_Sales_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISALES_Report_S32_Sales_ENTITY {
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    notes?: string | undefined;
    customer_code?: string | undefined;
    name?: string | undefined;
    debitor_account?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_fc?: number | undefined;
    tax?: number | undefined;
    discount_fc?: number | undefined;
    discount?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    warehouse_account?: string | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    group_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    id?: number | undefined;
    series_no?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: string | undefined;
    is_average_price?: boolean | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    sales_order_no?: string | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    is_tax?: boolean | undefined;
    master_code?: string | undefined;
    sales_returns_account?: string | undefined;
    cogs_account?: number | undefined;
    construction_id?: string | undefined;
    standard_code?: string | undefined;
    brand?: string | undefined;
    lot?: string | undefined;
    expiration_date?: string | undefined;
    warranty_term?: string | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    sales?: number | undefined;
}

export class SALES_Report_Gross_Profit_ENTITY implements ISALES_Report_Gross_Profit_ENTITY {
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    notes?: string | undefined;
    customer_code?: string | undefined;
    name?: string | undefined;
    debitor_account?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_fc?: number | undefined;
    tax?: number | undefined;
    discount_fc?: number | undefined;
    discount?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    warehouse_account?: string | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    group_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    id?: number | undefined;
    series_no?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: string | undefined;
    is_average_price?: boolean | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    sales_order_no?: string | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    goods_symbol?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    is_tax?: boolean | undefined;
    master_code?: string | undefined;
    sales_returns_account?: string | undefined;
    cogs_account?: number | undefined;
    construction_id?: string | undefined;
    standard_code?: string | undefined;
    brand?: string | undefined;
    lot?: string | undefined;
    expiration_date?: string | undefined;
    warranty_term?: string | undefined;
    department_name?: string | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    sales?: number | undefined;
    gross_profit?: number | undefined;

    constructor(data?: ISALES_Report_Gross_Profit_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.voucher_no = _data["voucher_no"];
            this.invoice_no = _data["invoice_no"];
            this.notes = _data["notes"];
            this.customer_code = _data["customer_code"];
            this.name = _data["name"];
            this.debitor_account = _data["debitor_account"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.tax_fc = _data["tax_fc"];
            this.tax = _data["tax"];
            this.discount_fc = _data["discount_fc"];
            this.discount = _data["discount"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.cogs_price = _data["cogs_price"];
            this.cogs_money = _data["cogs_money"];
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.company_code = _data["company_code"];
            this.warehouse_account = _data["warehouse_account"];
            this.creditor_account = _data["creditor_account"];
            this.fee_code = _data["fee_code"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.group_code = _data["group_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.id = _data["id"];
            this.series_no = _data["series_no"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.is_average_price = _data["is_average_price"];
            this.tax_code = _data["tax_code"];
            this.tax_account = _data["tax_account"];
            this.discount_account = _data["discount_account"];
            this.total_money_goods_fc = _data["total_money_goods_fc"];
            this.total_money_goods = _data["total_money_goods"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.discount_money_fc = _data["discount_money_fc"];
            this.discount_money = _data["discount_money"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.customer_name = _data["customer_name"];
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.sales_order_no = _data["sales_order_no"];
            this.seller_code = _data["seller_code"];
            this.seller_name = _data["seller_name"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.goods_symbol = _data["goods_symbol"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.is_tax = _data["is_tax"];
            this.master_code = _data["master_code"];
            this.sales_returns_account = _data["sales_returns_account"];
            this.cogs_account = _data["cogs_account"];
            this.construction_id = _data["construction_id"];
            this.standard_code = _data["standard_code"];
            this.brand = _data["brand"];
            this.lot = _data["lot"];
            this.expiration_date = _data["expiration_date"];
            this.warranty_term = _data["warranty_term"];
            this.department_name = _data["department_name"];
            this.inventory = _data["inventory"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.sales = _data["sales"];
            this.gross_profit = _data["gross_profit"];
        }
    }

    static fromJS(data: any): SALES_Report_Gross_Profit_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SALES_Report_Gross_Profit_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["voucher_no"] = this.voucher_no;
        data["invoice_no"] = this.invoice_no;
        data["notes"] = this.notes;
        data["customer_code"] = this.customer_code;
        data["name"] = this.name;
        data["debitor_account"] = this.debitor_account;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["tax_fc"] = this.tax_fc;
        data["tax"] = this.tax;
        data["discount_fc"] = this.discount_fc;
        data["discount"] = this.discount;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["cogs_price"] = this.cogs_price;
        data["cogs_money"] = this.cogs_money;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["company_code"] = this.company_code;
        data["warehouse_account"] = this.warehouse_account;
        data["creditor_account"] = this.creditor_account;
        data["fee_code"] = this.fee_code;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["group_code"] = this.group_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["id"] = this.id;
        data["series_no"] = this.series_no;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["is_average_price"] = this.is_average_price;
        data["tax_code"] = this.tax_code;
        data["tax_account"] = this.tax_account;
        data["discount_account"] = this.discount_account;
        data["total_money_goods_fc"] = this.total_money_goods_fc;
        data["total_money_goods"] = this.total_money_goods;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["discount_money_fc"] = this.discount_money_fc;
        data["discount_money"] = this.discount_money;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["customer_name"] = this.customer_name;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["sales_order_no"] = this.sales_order_no;
        data["seller_code"] = this.seller_code;
        data["seller_name"] = this.seller_name;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["goods_symbol"] = this.goods_symbol;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["is_tax"] = this.is_tax;
        data["master_code"] = this.master_code;
        data["sales_returns_account"] = this.sales_returns_account;
        data["cogs_account"] = this.cogs_account;
        data["construction_id"] = this.construction_id;
        data["standard_code"] = this.standard_code;
        data["brand"] = this.brand;
        data["lot"] = this.lot;
        data["expiration_date"] = this.expiration_date;
        data["warranty_term"] = this.warranty_term;
        data["department_name"] = this.department_name;
        data["inventory"] = this.inventory;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["sales"] = this.sales;
        data["gross_profit"] = this.gross_profit;
        return data;
    }

    clone(): SALES_Report_Gross_Profit_ENTITY {
        const json = this.toJSON();
        let result = new SALES_Report_Gross_Profit_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISALES_Report_Gross_Profit_ENTITY {
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    notes?: string | undefined;
    customer_code?: string | undefined;
    name?: string | undefined;
    debitor_account?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_fc?: number | undefined;
    tax?: number | undefined;
    discount_fc?: number | undefined;
    discount?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    warehouse_account?: string | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    group_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    id?: number | undefined;
    series_no?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: string | undefined;
    is_average_price?: boolean | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    sales_order_no?: string | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    goods_symbol?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    is_tax?: boolean | undefined;
    master_code?: string | undefined;
    sales_returns_account?: string | undefined;
    cogs_account?: number | undefined;
    construction_id?: string | undefined;
    standard_code?: string | undefined;
    brand?: string | undefined;
    lot?: string | undefined;
    expiration_date?: string | undefined;
    warranty_term?: string | undefined;
    department_name?: string | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    sales?: number | undefined;
    gross_profit?: number | undefined;
}

export class SALES_Report_Sales_Daybook_ENTITY implements ISALES_Report_Sales_Daybook_ENTITY {
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_code_s32?: string | undefined;
    voucher_code_s31?: string | undefined;
    invoice_no?: string | undefined;
    notes?: string | undefined;
    customer_code?: string | undefined;
    name?: string | undefined;
    debitor_account?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_fc?: number | undefined;
    tax?: number | undefined;
    discount_fc?: number | undefined;
    discount?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    arise_credit?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    warehouse_account?: string | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    group_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    id?: number | undefined;
    series_no?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: string | undefined;
    is_average_price?: boolean | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    sales_order_no?: string | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    is_tax?: boolean | undefined;
    master_code?: string | undefined;
    sales_returns_account?: string | undefined;
    cogs_account?: number | undefined;
    construction_id?: string | undefined;
    standard_code?: string | undefined;
    brand?: string | undefined;
    lot?: string | undefined;
    expiration_date?: string | undefined;
    warranty_term?: string | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    sales?: number | undefined;

    constructor(data?: ISALES_Report_Sales_Daybook_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_code_s32 = _data["voucher_code_s32"];
            this.voucher_code_s31 = _data["voucher_code_s31"];
            this.invoice_no = _data["invoice_no"];
            this.notes = _data["notes"];
            this.customer_code = _data["customer_code"];
            this.name = _data["name"];
            this.debitor_account = _data["debitor_account"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.tax_fc = _data["tax_fc"];
            this.tax = _data["tax"];
            this.discount_fc = _data["discount_fc"];
            this.discount = _data["discount"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.cogs_price = _data["cogs_price"];
            this.cogs_money = _data["cogs_money"];
            this.arise_credit = _data["arise_credit"];
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.company_code = _data["company_code"];
            this.warehouse_account = _data["warehouse_account"];
            this.creditor_account = _data["creditor_account"];
            this.fee_code = _data["fee_code"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.group_code = _data["group_code"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.id = _data["id"];
            this.series_no = _data["series_no"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.is_average_price = _data["is_average_price"];
            this.tax_code = _data["tax_code"];
            this.tax_account = _data["tax_account"];
            this.discount_account = _data["discount_account"];
            this.total_money_goods_fc = _data["total_money_goods_fc"];
            this.total_money_goods = _data["total_money_goods"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.discount_money_fc = _data["discount_money_fc"];
            this.discount_money = _data["discount_money"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.customer_name = _data["customer_name"];
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.sales_order_no = _data["sales_order_no"];
            this.seller_code = _data["seller_code"];
            this.seller_name = _data["seller_name"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.is_tax = _data["is_tax"];
            this.master_code = _data["master_code"];
            this.sales_returns_account = _data["sales_returns_account"];
            this.cogs_account = _data["cogs_account"];
            this.construction_id = _data["construction_id"];
            this.standard_code = _data["standard_code"];
            this.brand = _data["brand"];
            this.lot = _data["lot"];
            this.expiration_date = _data["expiration_date"];
            this.warranty_term = _data["warranty_term"];
            this.inventory = _data["inventory"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.sales = _data["sales"];
        }
    }

    static fromJS(data: any): SALES_Report_Sales_Daybook_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SALES_Report_Sales_Daybook_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["voucher_no"] = this.voucher_no;
        data["voucher_code_s32"] = this.voucher_code_s32;
        data["voucher_code_s31"] = this.voucher_code_s31;
        data["invoice_no"] = this.invoice_no;
        data["notes"] = this.notes;
        data["customer_code"] = this.customer_code;
        data["name"] = this.name;
        data["debitor_account"] = this.debitor_account;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["tax_fc"] = this.tax_fc;
        data["tax"] = this.tax;
        data["discount_fc"] = this.discount_fc;
        data["discount"] = this.discount;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["cogs_price"] = this.cogs_price;
        data["cogs_money"] = this.cogs_money;
        data["arise_credit"] = this.arise_credit;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["company_code"] = this.company_code;
        data["warehouse_account"] = this.warehouse_account;
        data["creditor_account"] = this.creditor_account;
        data["fee_code"] = this.fee_code;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["group_code"] = this.group_code;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["id"] = this.id;
        data["series_no"] = this.series_no;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["is_average_price"] = this.is_average_price;
        data["tax_code"] = this.tax_code;
        data["tax_account"] = this.tax_account;
        data["discount_account"] = this.discount_account;
        data["total_money_goods_fc"] = this.total_money_goods_fc;
        data["total_money_goods"] = this.total_money_goods;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["discount_money_fc"] = this.discount_money_fc;
        data["discount_money"] = this.discount_money;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["customer_name"] = this.customer_name;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["sales_order_no"] = this.sales_order_no;
        data["seller_code"] = this.seller_code;
        data["seller_name"] = this.seller_name;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["is_tax"] = this.is_tax;
        data["master_code"] = this.master_code;
        data["sales_returns_account"] = this.sales_returns_account;
        data["cogs_account"] = this.cogs_account;
        data["construction_id"] = this.construction_id;
        data["standard_code"] = this.standard_code;
        data["brand"] = this.brand;
        data["lot"] = this.lot;
        data["expiration_date"] = this.expiration_date;
        data["warranty_term"] = this.warranty_term;
        data["inventory"] = this.inventory;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["sales"] = this.sales;
        return data;
    }

    clone(): SALES_Report_Sales_Daybook_ENTITY {
        const json = this.toJSON();
        let result = new SALES_Report_Sales_Daybook_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISALES_Report_Sales_Daybook_ENTITY {
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_code_s32?: string | undefined;
    voucher_code_s31?: string | undefined;
    invoice_no?: string | undefined;
    notes?: string | undefined;
    customer_code?: string | undefined;
    name?: string | undefined;
    debitor_account?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    tax_fc?: number | undefined;
    tax?: number | undefined;
    discount_fc?: number | undefined;
    discount?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    arise_credit?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    warehouse_account?: string | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    group_code?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    id?: number | undefined;
    series_no?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: string | undefined;
    is_average_price?: boolean | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    sales_order_no?: string | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    is_tax?: boolean | undefined;
    master_code?: string | undefined;
    sales_returns_account?: string | undefined;
    cogs_account?: number | undefined;
    construction_id?: string | undefined;
    standard_code?: string | undefined;
    brand?: string | undefined;
    lot?: string | undefined;
    expiration_date?: string | undefined;
    warranty_term?: string | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    sales?: number | undefined;
}

export class Sales_CAT_Goods_Configuration_Report_ENTITY implements ISales_CAT_Goods_Configuration_Report_ENTITY {
    id?: number;
    code?: string | undefined;
    goods_code?: string | undefined;
    serial?: string | undefined;
    company_code?: string | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_code_detail?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    sku?: string | undefined;
    model?: string | undefined;
    cpu?: string | undefined;
    ram?: number | undefined;
    hdd?: number | undefined;
    hdd_unit?: string | undefined;
    ssd?: number | undefined;
    ssd_unit?: string | undefined;
    lcd?: string | undefined;
    notes?: string | undefined;
    status_name?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ISales_CAT_Goods_Configuration_Report_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.goods_code = _data["goods_code"];
            this.serial = _data["serial"];
            this.company_code = _data["company_code"];
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.voucher_code_detail = _data["voucher_code_detail"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.sku = _data["sku"];
            this.model = _data["model"];
            this.cpu = _data["cpu"];
            this.ram = _data["ram"];
            this.hdd = _data["hdd"];
            this.hdd_unit = _data["hdd_unit"];
            this.ssd = _data["ssd"];
            this.ssd_unit = _data["ssd_unit"];
            this.lcd = _data["lcd"];
            this.notes = _data["notes"];
            this.status_name = _data["status_name"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): Sales_CAT_Goods_Configuration_Report_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Sales_CAT_Goods_Configuration_Report_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["goods_code"] = this.goods_code;
        data["serial"] = this.serial;
        data["company_code"] = this.company_code;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["voucher_code_detail"] = this.voucher_code_detail;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["sku"] = this.sku;
        data["model"] = this.model;
        data["cpu"] = this.cpu;
        data["ram"] = this.ram;
        data["hdd"] = this.hdd;
        data["hdd_unit"] = this.hdd_unit;
        data["ssd"] = this.ssd;
        data["ssd_unit"] = this.ssd_unit;
        data["lcd"] = this.lcd;
        data["notes"] = this.notes;
        data["status_name"] = this.status_name;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): Sales_CAT_Goods_Configuration_Report_ENTITY {
        const json = this.toJSON();
        let result = new Sales_CAT_Goods_Configuration_Report_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISales_CAT_Goods_Configuration_Report_ENTITY {
    id?: number;
    code?: string | undefined;
    goods_code?: string | undefined;
    serial?: string | undefined;
    company_code?: string | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_code_detail?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    sku?: string | undefined;
    model?: string | undefined;
    cpu?: string | undefined;
    ram?: number | undefined;
    hdd?: number | undefined;
    hdd_unit?: string | undefined;
    ssd?: number | undefined;
    ssd_unit?: string | undefined;
    lcd?: string | undefined;
    notes?: string | undefined;
    status_name?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
}

export class SALE_Accounts_Receivable_Ledger_ENTITY implements ISALE_Accounts_Receivable_Ledger_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_master_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    account?: string | undefined;
    arise_debit_fc?: number | undefined;
    arise_debit?: number | undefined;
    arise_credit_fc?: number | undefined;
    arise_credit?: number | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    stt?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ISALE_Accounts_Receivable_Ledger_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_master_code = _data["voucher_master_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.notes = _data["notes"];
            this.debitor_account = _data["debitor_account"];
            this.account = _data["account"];
            this.arise_debit_fc = _data["arise_debit_fc"];
            this.arise_debit = _data["arise_debit"];
            this.arise_credit_fc = _data["arise_credit_fc"];
            this.arise_credit = _data["arise_credit"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.stt = _data["stt"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): SALE_Accounts_Receivable_Ledger_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SALE_Accounts_Receivable_Ledger_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_master_code"] = this.voucher_master_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["notes"] = this.notes;
        data["debitor_account"] = this.debitor_account;
        data["account"] = this.account;
        data["arise_debit_fc"] = this.arise_debit_fc;
        data["arise_debit"] = this.arise_debit;
        data["arise_credit_fc"] = this.arise_credit_fc;
        data["arise_credit"] = this.arise_credit;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["stt"] = this.stt;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): SALE_Accounts_Receivable_Ledger_ENTITY {
        const json = this.toJSON();
        let result = new SALE_Accounts_Receivable_Ledger_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISALE_Accounts_Receivable_Ledger_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_master_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    notes?: string | undefined;
    debitor_account?: string | undefined;
    account?: string | undefined;
    arise_debit_fc?: number | undefined;
    arise_debit?: number | undefined;
    arise_credit_fc?: number | undefined;
    arise_credit?: number | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    stt?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class SALE_Statement_Of_Changes_In_Financial_Position_ENTITY implements ISALE_Statement_Of_Changes_In_Financial_Position_ENTITY {
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    initial_debt_fc?: number | undefined;
    initial_debt?: number | undefined;
    initial_credt_fc?: number | undefined;
    initial_credt?: number | undefined;
    arise_debit_fc?: number | undefined;
    arise_debit?: number | undefined;
    arise_credit_fc?: number | undefined;
    arise_credit?: number | undefined;
    ending_debt_fc?: number | undefined;
    ending_debt?: number | undefined;
    ending_credt_fc?: number | undefined;
    ending_credt?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    account?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ISALE_Statement_Of_Changes_In_Financial_Position_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.initial_debt_fc = _data["initial_debt_fc"];
            this.initial_debt = _data["initial_debt"];
            this.initial_credt_fc = _data["initial_credt_fc"];
            this.initial_credt = _data["initial_credt"];
            this.arise_debit_fc = _data["arise_debit_fc"];
            this.arise_debit = _data["arise_debit"];
            this.arise_credit_fc = _data["arise_credit_fc"];
            this.arise_credit = _data["arise_credit"];
            this.ending_debt_fc = _data["ending_debt_fc"];
            this.ending_debt = _data["ending_debt"];
            this.ending_credt_fc = _data["ending_credt_fc"];
            this.ending_credt = _data["ending_credt"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.account = _data["account"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): SALE_Statement_Of_Changes_In_Financial_Position_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SALE_Statement_Of_Changes_In_Financial_Position_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["initial_debt_fc"] = this.initial_debt_fc;
        data["initial_debt"] = this.initial_debt;
        data["initial_credt_fc"] = this.initial_credt_fc;
        data["initial_credt"] = this.initial_credt;
        data["arise_debit_fc"] = this.arise_debit_fc;
        data["arise_debit"] = this.arise_debit;
        data["arise_credit_fc"] = this.arise_credit_fc;
        data["arise_credit"] = this.arise_credit;
        data["ending_debt_fc"] = this.ending_debt_fc;
        data["ending_debt"] = this.ending_debt;
        data["ending_credt_fc"] = this.ending_credt_fc;
        data["ending_credt"] = this.ending_credt;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["account"] = this.account;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): SALE_Statement_Of_Changes_In_Financial_Position_ENTITY {
        const json = this.toJSON();
        let result = new SALE_Statement_Of_Changes_In_Financial_Position_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISALE_Statement_Of_Changes_In_Financial_Position_ENTITY {
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    initial_debt_fc?: number | undefined;
    initial_debt?: number | undefined;
    initial_credt_fc?: number | undefined;
    initial_credt?: number | undefined;
    arise_debit_fc?: number | undefined;
    arise_debit?: number | undefined;
    arise_credit_fc?: number | undefined;
    arise_credit?: number | undefined;
    ending_debt_fc?: number | undefined;
    ending_debt?: number | undefined;
    ending_credt_fc?: number | undefined;
    ending_credt?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    account?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY implements ISALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY {
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    voucher_no_mt?: string | undefined;
    invoice_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    payment_date?: moment.Moment | undefined;
    description?: string | undefined;
    debitor_account?: string | undefined;
    code_fc?: string | undefined;
    code_fc_mt?: string | undefined;
    code_symbol?: string | undefined;
    code_symbol_mt?: string | undefined;
    exchange_rate?: number | undefined;
    exchange_rate_mt?: number | undefined;
    total_money?: number | undefined;
    total_money_fc?: number | undefined;
    remaining_asset_fc?: number | undefined;
    remaining_asset?: number | undefined;
    payment_deadline?: number | undefined;
    payment_fc?: number | undefined;
    payment?: number | undefined;
    remaining_exchange_rate?: number | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    master_code?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date_mt?: moment.Moment | undefined;
    account?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ISALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.voucher_no_mt = _data["voucher_no_mt"];
            this.invoice_no = _data["invoice_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.payment_date = _data["payment_date"] ? moment.parseZone(_data["payment_date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.debitor_account = _data["debitor_account"];
            this.code_fc = _data["code_fc"];
            this.code_fc_mt = _data["code_fc_mt"];
            this.code_symbol = _data["code_symbol"];
            this.code_symbol_mt = _data["code_symbol_mt"];
            this.exchange_rate = _data["exchange_rate"];
            this.exchange_rate_mt = _data["exchange_rate_mt"];
            this.total_money = _data["total_money"];
            this.total_money_fc = _data["total_money_fc"];
            this.remaining_asset_fc = _data["remaining_asset_fc"];
            this.remaining_asset = _data["remaining_asset"];
            this.payment_deadline = _data["payment_deadline"];
            this.payment_fc = _data["payment_fc"];
            this.payment = _data["payment"];
            this.remaining_exchange_rate = _data["remaining_exchange_rate"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.fee_code = _data["fee_code"];
            this.master_code = _data["master_code"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.voucher_date_mt = _data["voucher_date_mt"] ? moment.parseZone(_data["voucher_date_mt"].toString()) : <any>undefined;
            this.account = _data["account"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["voucher_no_mt"] = this.voucher_no_mt;
        data["invoice_no"] = this.invoice_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["payment_date"] = this.payment_date ? this.payment_date.toISOString(true) : <any>undefined;
        data["description"] = this.description;
        data["debitor_account"] = this.debitor_account;
        data["code_fc"] = this.code_fc;
        data["code_fc_mt"] = this.code_fc_mt;
        data["code_symbol"] = this.code_symbol;
        data["code_symbol_mt"] = this.code_symbol_mt;
        data["exchange_rate"] = this.exchange_rate;
        data["exchange_rate_mt"] = this.exchange_rate_mt;
        data["total_money"] = this.total_money;
        data["total_money_fc"] = this.total_money_fc;
        data["remaining_asset_fc"] = this.remaining_asset_fc;
        data["remaining_asset"] = this.remaining_asset;
        data["payment_deadline"] = this.payment_deadline;
        data["payment_fc"] = this.payment_fc;
        data["payment"] = this.payment;
        data["remaining_exchange_rate"] = this.remaining_exchange_rate;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["fee_code"] = this.fee_code;
        data["master_code"] = this.master_code;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["voucher_date_mt"] = this.voucher_date_mt ? this.voucher_date_mt.toISOString(true) : <any>undefined;
        data["account"] = this.account;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY {
        const json = this.toJSON();
        let result = new SALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISALE_The_detailed_Accounts_Receivable_Ledger_By_Invoice_ENTITY {
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    voucher_no_mt?: string | undefined;
    invoice_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    payment_date?: moment.Moment | undefined;
    description?: string | undefined;
    debitor_account?: string | undefined;
    code_fc?: string | undefined;
    code_fc_mt?: string | undefined;
    code_symbol?: string | undefined;
    code_symbol_mt?: string | undefined;
    exchange_rate?: number | undefined;
    exchange_rate_mt?: number | undefined;
    total_money?: number | undefined;
    total_money_fc?: number | undefined;
    remaining_asset_fc?: number | undefined;
    remaining_asset?: number | undefined;
    payment_deadline?: number | undefined;
    payment_fc?: number | undefined;
    payment?: number | undefined;
    remaining_exchange_rate?: number | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    master_code?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date_mt?: moment.Moment | undefined;
    account?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class SALE_Year_End_Balance_Sheet_Compilation_ENTITY implements ISALE_Year_End_Balance_Sheet_Compilation_ENTITY {
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    debitor_money_fc?: number | undefined;
    debitor_money?: number | undefined;
    creditor_money_fc?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    creditor_money?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    debitor_account?: string | undefined;
    account?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;

    constructor(data?: ISALE_Year_End_Balance_Sheet_Compilation_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.debitor_money_fc = _data["debitor_money_fc"];
            this.debitor_money = _data["debitor_money"];
            this.creditor_money_fc = _data["creditor_money_fc"];
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.creditor_money = _data["creditor_money"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.debitor_account = _data["debitor_account"];
            this.account = _data["account"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
        }
    }

    static fromJS(data: any): SALE_Year_End_Balance_Sheet_Compilation_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SALE_Year_End_Balance_Sheet_Compilation_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["debitor_money_fc"] = this.debitor_money_fc;
        data["debitor_money"] = this.debitor_money;
        data["creditor_money_fc"] = this.creditor_money_fc;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["creditor_money"] = this.creditor_money;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["debitor_account"] = this.debitor_account;
        data["account"] = this.account;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        return data;
    }

    clone(): SALE_Year_End_Balance_Sheet_Compilation_ENTITY {
        const json = this.toJSON();
        let result = new SALE_Year_End_Balance_Sheet_Compilation_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISALE_Year_End_Balance_Sheet_Compilation_ENTITY {
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    debitor_money_fc?: number | undefined;
    debitor_money?: number | undefined;
    creditor_money_fc?: number | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    creditor_money?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    debitor_account?: string | undefined;
    account?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
}

export class Accounting_VAT_Output_ENTITY implements IAccounting_VAT_Output_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    series_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    description?: string | undefined;
    total_money?: number | undefined;
    tax_code?: string | undefined;
    tax?: number | undefined;
    tax_rate?: number | undefined;
    tax_account?: string | undefined;
    debitor_account?: string | undefined;
    notes?: string | undefined;
    voucher_code_group?: string | undefined;
    voucher_master_code?: string | undefined;
    goods_code?: string | undefined;
    voucher_detail_code?: string | undefined;
    voucher_code?: string | undefined;
    customer_name?: string | undefined;
    tax_fc?: number | undefined;
    total_money_fc?: number | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IAccounting_VAT_Output_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.invoice_no = _data["invoice_no"];
            this.series_no = _data["series_no"];
            this.customer_code = _data["customer_code"];
            this.address = _data["address"];
            this.description = _data["description"];
            this.total_money = _data["total_money"];
            this.tax_code = _data["tax_code"];
            this.tax = _data["tax"];
            this.tax_rate = _data["tax_rate"];
            this.tax_account = _data["tax_account"];
            this.debitor_account = _data["debitor_account"];
            this.notes = _data["notes"];
            this.voucher_code_group = _data["voucher_code_group"];
            this.voucher_master_code = _data["voucher_master_code"];
            this.goods_code = _data["goods_code"];
            this.voucher_detail_code = _data["voucher_detail_code"];
            this.voucher_code = _data["voucher_code"];
            this.customer_name = _data["customer_name"];
            this.tax_fc = _data["tax_fc"];
            this.total_money_fc = _data["total_money_fc"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.approve = _data["approve"];
            this.account_id = _data["account_id"];
            this.decentralization = _data["decentralization"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): Accounting_VAT_Output_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Accounting_VAT_Output_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["invoice_no"] = this.invoice_no;
        data["series_no"] = this.series_no;
        data["customer_code"] = this.customer_code;
        data["address"] = this.address;
        data["description"] = this.description;
        data["total_money"] = this.total_money;
        data["tax_code"] = this.tax_code;
        data["tax"] = this.tax;
        data["tax_rate"] = this.tax_rate;
        data["tax_account"] = this.tax_account;
        data["debitor_account"] = this.debitor_account;
        data["notes"] = this.notes;
        data["voucher_code_group"] = this.voucher_code_group;
        data["voucher_master_code"] = this.voucher_master_code;
        data["goods_code"] = this.goods_code;
        data["voucher_detail_code"] = this.voucher_detail_code;
        data["voucher_code"] = this.voucher_code;
        data["customer_name"] = this.customer_name;
        data["tax_fc"] = this.tax_fc;
        data["total_money_fc"] = this.total_money_fc;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["approve"] = this.approve;
        data["account_id"] = this.account_id;
        data["decentralization"] = this.decentralization;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): Accounting_VAT_Output_ENTITY {
        const json = this.toJSON();
        let result = new Accounting_VAT_Output_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IAccounting_VAT_Output_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    series_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    description?: string | undefined;
    total_money?: number | undefined;
    tax_code?: string | undefined;
    tax?: number | undefined;
    tax_rate?: number | undefined;
    tax_account?: string | undefined;
    debitor_account?: string | undefined;
    notes?: string | undefined;
    voucher_code_group?: string | undefined;
    voucher_master_code?: string | undefined;
    goods_code?: string | undefined;
    voucher_detail_code?: string | undefined;
    voucher_code?: string | undefined;
    customer_name?: string | undefined;
    tax_fc?: number | undefined;
    total_money_fc?: number | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class CAT_Tax_ENTITY implements ICAT_Tax_ENTITY {
    code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    tax?: number | undefined;
    tax_account?: string | undefined;
    tax_account2?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    notes?: string | undefined;
    symbol?: string | undefined;
    decentralization?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    type?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Tax_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.tax = _data["tax"];
            this.tax_account = _data["tax_account"];
            this.tax_account2 = _data["tax_account2"];
            this.approve = _data["approve"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_id = _data["account_id"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.notes = _data["notes"];
            this.symbol = _data["symbol"];
            this.decentralization = _data["decentralization"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.type = _data["type"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Tax_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Tax_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["tax"] = this.tax;
        data["tax_account"] = this.tax_account;
        data["tax_account2"] = this.tax_account2;
        data["approve"] = this.approve;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_id"] = this.account_id;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["notes"] = this.notes;
        data["symbol"] = this.symbol;
        data["decentralization"] = this.decentralization;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["type"] = this.type;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Tax_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Tax_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Tax_ENTITY {
    code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    tax?: number | undefined;
    tax_account?: string | undefined;
    tax_account2?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    notes?: string | undefined;
    symbol?: string | undefined;
    decentralization?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    type?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class S31_D_ENTITY implements IS31_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    construction_id?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IS31_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.master_code = _data["master_code"];
            this.description = _data["description"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.creditor_account = _data["creditor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.construction_id = _data["construction_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): S31_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new S31_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["master_code"] = this.master_code;
        data["description"] = this.description;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["creditor_account"] = this.creditor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["construction_id"] = this.construction_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): S31_D_ENTITY {
        const json = this.toJSON();
        let result = new S31_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IS31_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    master_code?: string | undefined;
    description?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    construction_id?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
}

export class S31_M_ENTITY implements IS31_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    seri_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    xml_31d?: string | undefined;
    xml_vat_out?: string | undefined;
    xml_31_kit?: string | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    s31_D?: S31_D_ENTITY[] | undefined;
    accounting_VAT_Outputs?: Accounting_VAT_Output_ENTITY[] | undefined;

    constructor(data?: IS31_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_year = _data["voucher_year"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.invoice_no = _data["invoice_no"];
            this.seri_no = _data["seri_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.debitor_account = _data["debitor_account"];
            this.tax_code = _data["tax_code"];
            this.tax_account = _data["tax_account"];
            this.discount_account = _data["discount_account"];
            this.total_money_goods_fc = _data["total_money_goods_fc"];
            this.total_money_goods = _data["total_money_goods"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.discount_money_fc = _data["discount_money_fc"];
            this.discount_money = _data["discount_money"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.xml_31d = _data["xml_31d"];
            this.xml_vat_out = _data["xml_vat_out"];
            this.xml_31_kit = _data["xml_31_kit"];
            this.is_tax = _data["is_tax"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            if (Array.isArray(_data["s31_D"])) {
                this.s31_D = [] as any;
                for (let item of _data["s31_D"])
                    this.s31_D.push(S31_D_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["accounting_VAT_Outputs"])) {
                this.accounting_VAT_Outputs = [] as any;
                for (let item of _data["accounting_VAT_Outputs"])
                    this.accounting_VAT_Outputs.push(Accounting_VAT_Output_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): S31_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new S31_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_year"] = this.voucher_year;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["invoice_no"] = this.invoice_no;
        data["seri_no"] = this.seri_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["debitor_account"] = this.debitor_account;
        data["tax_code"] = this.tax_code;
        data["tax_account"] = this.tax_account;
        data["discount_account"] = this.discount_account;
        data["total_money_goods_fc"] = this.total_money_goods_fc;
        data["total_money_goods"] = this.total_money_goods;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["discount_money_fc"] = this.discount_money_fc;
        data["discount_money"] = this.discount_money;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["xml_31d"] = this.xml_31d;
        data["xml_vat_out"] = this.xml_vat_out;
        data["xml_31_kit"] = this.xml_31_kit;
        data["is_tax"] = this.is_tax;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        if (Array.isArray(this.s31_D)) {
            data["s31_D"] = [];
            for (let item of this.s31_D)
                data["s31_D"].push(item.toJSON());
        }
        if (Array.isArray(this.accounting_VAT_Outputs)) {
            data["accounting_VAT_Outputs"] = [];
            for (let item of this.accounting_VAT_Outputs)
                data["accounting_VAT_Outputs"].push(item.toJSON());
        }
        return data;
    }

    clone(): S31_M_ENTITY {
        const json = this.toJSON();
        let result = new S31_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IS31_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    invoice_date?: moment.Moment | undefined;
    invoice_no?: string | undefined;
    seri_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    xml_31d?: string | undefined;
    xml_vat_out?: string | undefined;
    xml_31_kit?: string | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    s31_D?: S31_D_ENTITY[] | undefined;
    accounting_VAT_Outputs?: Accounting_VAT_Output_ENTITY[] | undefined;
}

export class CAT_Goods_Configuration_ENTITY implements ICAT_Goods_Configuration_ENTITY {
    id?: number;
    code?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    serial?: string | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_code_detail?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    sku?: string | undefined;
    model?: string | undefined;
    cpu?: string | undefined;
    ram?: number | undefined;
    hdd?: number | undefined;
    hdd_unit?: string | undefined;
    ssd?: number | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
    ssd_unit?: string | undefined;
    lcd?: string | undefined;
    notes?: string | undefined;

    constructor(data?: ICAT_Goods_Configuration_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.goods_code = _data["goods_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.serial = _data["serial"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_code_detail = _data["voucher_code_detail"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.sku = _data["sku"];
            this.model = _data["model"];
            this.cpu = _data["cpu"];
            this.ram = _data["ram"];
            this.hdd = _data["hdd"];
            this.hdd_unit = _data["hdd_unit"];
            this.ssd = _data["ssd"];
            this.voucher_year = _data["voucher_year"];
            this.language_id = _data["language_id"];
            this.ssd_unit = _data["ssd_unit"];
            this.lcd = _data["lcd"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): CAT_Goods_Configuration_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Goods_Configuration_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["goods_code"] = this.goods_code;
        data["goods_symbol"] = this.goods_symbol;
        data["serial"] = this.serial;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_code_detail"] = this.voucher_code_detail;
        data["voucher_no"] = this.voucher_no;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["sku"] = this.sku;
        data["model"] = this.model;
        data["cpu"] = this.cpu;
        data["ram"] = this.ram;
        data["hdd"] = this.hdd;
        data["hdd_unit"] = this.hdd_unit;
        data["ssd"] = this.ssd;
        data["voucher_year"] = this.voucher_year;
        data["language_id"] = this.language_id;
        data["ssd_unit"] = this.ssd_unit;
        data["lcd"] = this.lcd;
        data["notes"] = this.notes;
        return data;
    }

    clone(): CAT_Goods_Configuration_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Goods_Configuration_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Goods_Configuration_ENTITY {
    id?: number;
    code?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    serial?: string | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_code_detail?: string | undefined;
    voucher_no?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    sku?: string | undefined;
    model?: string | undefined;
    cpu?: string | undefined;
    ram?: number | undefined;
    hdd?: number | undefined;
    hdd_unit?: string | undefined;
    ssd?: number | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
    ssd_unit?: string | undefined;
    lcd?: string | undefined;
    notes?: string | undefined;
}

export class S32_D_ENTITY implements IS32_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    revenue_account?: string | undefined;
    warehouse_account?: string | undefined;
    cogs_account?: string | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    discount?: number | undefined;
    discount_fc?: number | undefined;
    construction_id?: string | undefined;
    goods_name?: string | undefined;
    group_code?: string | undefined;
    standard?: number | undefined;
    brand?: number | undefined;
    serial_no?: string | undefined;
    lot?: number | undefined;
    expiration_date?: moment.Moment | undefined;
    warranty_term?: number | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    warranty_date?: moment.Moment | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    notes?: string | undefined;
    cat_goods_configurations?: CAT_Goods_Configuration_ENTITY[] | undefined;

    constructor(data?: IS32_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.master_code = _data["master_code"];
            this.goods_code = _data["goods_code"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.revenue_account = _data["revenue_account"];
            this.warehouse_account = _data["warehouse_account"];
            this.cogs_account = _data["cogs_account"];
            this.cogs_price = _data["cogs_price"];
            this.cogs_money = _data["cogs_money"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.discount = _data["discount"];
            this.discount_fc = _data["discount_fc"];
            this.construction_id = _data["construction_id"];
            this.goods_name = _data["goods_name"];
            this.group_code = _data["group_code"];
            this.standard = _data["standard"];
            this.brand = _data["brand"];
            this.serial_no = _data["serial_no"];
            this.lot = _data["lot"];
            this.expiration_date = _data["expiration_date"] ? moment.parseZone(_data["expiration_date"].toString()) : <any>undefined;
            this.warranty_term = _data["warranty_term"];
            this.inventory = _data["inventory"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.warranty_date = _data["warranty_date"] ? moment.parseZone(_data["warranty_date"].toString()) : <any>undefined;
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_year = _data["voucher_year"];
            this.voucher_code = _data["voucher_code"];
            this.notes = _data["notes"];
            if (Array.isArray(_data["cat_goods_configurations"])) {
                this.cat_goods_configurations = [] as any;
                for (let item of _data["cat_goods_configurations"])
                    this.cat_goods_configurations.push(CAT_Goods_Configuration_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): S32_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new S32_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["master_code"] = this.master_code;
        data["goods_code"] = this.goods_code;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["revenue_account"] = this.revenue_account;
        data["warehouse_account"] = this.warehouse_account;
        data["cogs_account"] = this.cogs_account;
        data["cogs_price"] = this.cogs_price;
        data["cogs_money"] = this.cogs_money;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["discount"] = this.discount;
        data["discount_fc"] = this.discount_fc;
        data["construction_id"] = this.construction_id;
        data["goods_name"] = this.goods_name;
        data["group_code"] = this.group_code;
        data["standard"] = this.standard;
        data["brand"] = this.brand;
        data["serial_no"] = this.serial_no;
        data["lot"] = this.lot;
        data["expiration_date"] = this.expiration_date ? this.expiration_date.toISOString(true) : <any>undefined;
        data["warranty_term"] = this.warranty_term;
        data["inventory"] = this.inventory;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["warranty_date"] = this.warranty_date ? this.warranty_date.toISOString(true) : <any>undefined;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_year"] = this.voucher_year;
        data["voucher_code"] = this.voucher_code;
        data["notes"] = this.notes;
        if (Array.isArray(this.cat_goods_configurations)) {
            data["cat_goods_configurations"] = [];
            for (let item of this.cat_goods_configurations)
                data["cat_goods_configurations"].push(item.toJSON());
        }
        return data;
    }

    clone(): S32_D_ENTITY {
        const json = this.toJSON();
        let result = new S32_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IS32_D_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    revenue_account?: string | undefined;
    warehouse_account?: string | undefined;
    cogs_account?: string | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    discount?: number | undefined;
    discount_fc?: number | undefined;
    construction_id?: string | undefined;
    goods_name?: string | undefined;
    group_code?: string | undefined;
    standard?: number | undefined;
    brand?: number | undefined;
    serial_no?: string | undefined;
    lot?: number | undefined;
    expiration_date?: moment.Moment | undefined;
    warranty_term?: number | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    warranty_date?: moment.Moment | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_year?: number | undefined;
    voucher_code?: string | undefined;
    notes?: string | undefined;
    cat_goods_configurations?: CAT_Goods_Configuration_ENTITY[] | undefined;
}

export class S32_KIT_ENTITY implements IS32_KIT_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    kit_code?: string | undefined;
    kit_name?: string | undefined;
    unit_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    discount?: number | undefined;
    discount_fc?: number | undefined;
    revenue_account?: string | undefined;
    construction_id?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    account_id?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IS32_KIT_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.master_code = _data["master_code"];
            this.kit_code = _data["kit_code"];
            this.kit_name = _data["kit_name"];
            this.unit_code = _data["unit_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.discount = _data["discount"];
            this.discount_fc = _data["discount_fc"];
            this.revenue_account = _data["revenue_account"];
            this.construction_id = _data["construction_id"];
            this.department_code = _data["department_code"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.approve = _data["approve"];
            this.account_id = _data["account_id"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): S32_KIT_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new S32_KIT_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["master_code"] = this.master_code;
        data["kit_code"] = this.kit_code;
        data["kit_name"] = this.kit_name;
        data["unit_code"] = this.unit_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["discount"] = this.discount;
        data["discount_fc"] = this.discount_fc;
        data["revenue_account"] = this.revenue_account;
        data["construction_id"] = this.construction_id;
        data["department_code"] = this.department_code;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["approve"] = this.approve;
        data["account_id"] = this.account_id;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): S32_KIT_ENTITY {
        const json = this.toJSON();
        let result = new S32_KIT_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IS32_KIT_ENTITY {
    id?: number;
    code?: string | undefined;
    master_code?: string | undefined;
    kit_code?: string | undefined;
    kit_name?: string | undefined;
    unit_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    discount?: number | undefined;
    discount_fc?: number | undefined;
    revenue_account?: string | undefined;
    construction_id?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    approve?: boolean | undefined;
    account_id?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class S32_M_ENTITY implements IS32_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    serial_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    tax_code?: string | undefined;
    tax?: number | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    invoice_date?: moment.Moment | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    order_number?: string | undefined;
    total_money_goods_fc1?: number | undefined;
    total_money_goods_fc2?: number | undefined;
    total_money_goods1?: number | undefined;
    total_money_goods2?: number | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_32d?: string | undefined;
    xml_vat_out?: string | undefined;
    xml_32_kit?: string | undefined;
    xml_cat_goods_configurations?: string | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    s32_D?: S32_D_ENTITY[] | undefined;
    cat_goods_configurations?: CAT_Goods_Configuration_ENTITY[] | undefined;
    accounting_VAT_Outputs?: Accounting_VAT_Output_ENTITY[] | undefined;
    s32_KIT?: S32_KIT_ENTITY[] | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    branch_code?: string | undefined;
    is_tax?: boolean | undefined;
    is_costing?: boolean | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IS32_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.invoice_no = _data["invoice_no"];
            this.serial_no = _data["serial_no"];
            this.customer_code = _data["customer_code"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_symbol = _data["code_symbol"];
            this.exchange_rate = _data["exchange_rate"];
            this.debitor_account = _data["debitor_account"];
            this.tax_code = _data["tax_code"];
            this.tax = _data["tax"];
            this.tax_account = _data["tax_account"];
            this.discount_account = _data["discount_account"];
            this.total_money_goods_fc = _data["total_money_goods_fc"];
            this.total_money_goods = _data["total_money_goods"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.discount_money_fc = _data["discount_money_fc"];
            this.discount_money = _data["discount_money"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.customer_name = _data["customer_name"];
            this.order_number = _data["order_number"];
            this.total_money_goods_fc1 = _data["total_money_goods_fc1"];
            this.total_money_goods_fc2 = _data["total_money_goods_fc2"];
            this.total_money_goods1 = _data["total_money_goods1"];
            this.total_money_goods2 = _data["total_money_goods2"];
            this.seller_code = _data["seller_code"];
            this.seller_name = _data["seller_name"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.xml_32d = _data["xml_32d"];
            this.xml_vat_out = _data["xml_vat_out"];
            this.xml_32_kit = _data["xml_32_kit"];
            this.xml_cat_goods_configurations = _data["xml_cat_goods_configurations"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            if (Array.isArray(_data["s32_D"])) {
                this.s32_D = [] as any;
                for (let item of _data["s32_D"])
                    this.s32_D.push(S32_D_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["cat_goods_configurations"])) {
                this.cat_goods_configurations = [] as any;
                for (let item of _data["cat_goods_configurations"])
                    this.cat_goods_configurations.push(CAT_Goods_Configuration_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["accounting_VAT_Outputs"])) {
                this.accounting_VAT_Outputs = [] as any;
                for (let item of _data["accounting_VAT_Outputs"])
                    this.accounting_VAT_Outputs.push(Accounting_VAT_Output_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["s32_KIT"])) {
                this.s32_KIT = [] as any;
                for (let item of _data["s32_KIT"])
                    this.s32_KIT.push(S32_KIT_ENTITY.fromJS(item));
            }
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.branch_code = _data["branch_code"];
            this.is_tax = _data["is_tax"];
            this.is_costing = _data["is_costing"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): S32_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new S32_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["invoice_no"] = this.invoice_no;
        data["serial_no"] = this.serial_no;
        data["customer_code"] = this.customer_code;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_symbol"] = this.code_symbol;
        data["exchange_rate"] = this.exchange_rate;
        data["debitor_account"] = this.debitor_account;
        data["tax_code"] = this.tax_code;
        data["tax"] = this.tax;
        data["tax_account"] = this.tax_account;
        data["discount_account"] = this.discount_account;
        data["total_money_goods_fc"] = this.total_money_goods_fc;
        data["total_money_goods"] = this.total_money_goods;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["discount_money_fc"] = this.discount_money_fc;
        data["discount_money"] = this.discount_money;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["customer_name"] = this.customer_name;
        data["order_number"] = this.order_number;
        data["total_money_goods_fc1"] = this.total_money_goods_fc1;
        data["total_money_goods_fc2"] = this.total_money_goods_fc2;
        data["total_money_goods1"] = this.total_money_goods1;
        data["total_money_goods2"] = this.total_money_goods2;
        data["seller_code"] = this.seller_code;
        data["seller_name"] = this.seller_name;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["xml_32d"] = this.xml_32d;
        data["xml_vat_out"] = this.xml_vat_out;
        data["xml_32_kit"] = this.xml_32_kit;
        data["xml_cat_goods_configurations"] = this.xml_cat_goods_configurations;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        if (Array.isArray(this.s32_D)) {
            data["s32_D"] = [];
            for (let item of this.s32_D)
                data["s32_D"].push(item.toJSON());
        }
        if (Array.isArray(this.cat_goods_configurations)) {
            data["cat_goods_configurations"] = [];
            for (let item of this.cat_goods_configurations)
                data["cat_goods_configurations"].push(item.toJSON());
        }
        if (Array.isArray(this.accounting_VAT_Outputs)) {
            data["accounting_VAT_Outputs"] = [];
            for (let item of this.accounting_VAT_Outputs)
                data["accounting_VAT_Outputs"].push(item.toJSON());
        }
        if (Array.isArray(this.s32_KIT)) {
            data["s32_KIT"] = [];
            for (let item of this.s32_KIT)
                data["s32_KIT"].push(item.toJSON());
        }
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["branch_code"] = this.branch_code;
        data["is_tax"] = this.is_tax;
        data["is_costing"] = this.is_costing;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): S32_M_ENTITY {
        const json = this.toJSON();
        let result = new S32_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IS32_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    serial_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    tax_code?: string | undefined;
    tax?: number | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    invoice_date?: moment.Moment | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    order_number?: string | undefined;
    total_money_goods_fc1?: number | undefined;
    total_money_goods_fc2?: number | undefined;
    total_money_goods1?: number | undefined;
    total_money_goods2?: number | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_32d?: string | undefined;
    xml_vat_out?: string | undefined;
    xml_32_kit?: string | undefined;
    xml_cat_goods_configurations?: string | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    s32_D?: S32_D_ENTITY[] | undefined;
    cat_goods_configurations?: CAT_Goods_Configuration_ENTITY[] | undefined;
    accounting_VAT_Outputs?: Accounting_VAT_Output_ENTITY[] | undefined;
    s32_KIT?: S32_KIT_ENTITY[] | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    branch_code?: string | undefined;
    is_tax?: boolean | undefined;
    is_costing?: boolean | undefined;
    voucher_year?: number | undefined;
}

export class S33_D_ENTITY implements IS33_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    sales_returns_account?: string | undefined;
    warehouse_account?: string | undefined;
    cogs_account?: string | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    construction_id?: string | undefined;
    goods_name?: string | undefined;
    group_code?: string | undefined;
    standard_code?: number | undefined;
    brand?: number | undefined;
    series_no?: string | undefined;
    lot?: number | undefined;
    expiration_date?: moment.Moment | undefined;
    warranty_term?: number | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    notes?: string | undefined;
    language_id?: number | undefined;

    constructor(data?: IS33_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.master_code = _data["master_code"];
            this.goods_code = _data["goods_code"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.sales_returns_account = _data["sales_returns_account"];
            this.warehouse_account = _data["warehouse_account"];
            this.cogs_account = _data["cogs_account"];
            this.cogs_price = _data["cogs_price"];
            this.cogs_money = _data["cogs_money"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.construction_id = _data["construction_id"];
            this.goods_name = _data["goods_name"];
            this.group_code = _data["group_code"];
            this.standard_code = _data["standard_code"];
            this.brand = _data["brand"];
            this.series_no = _data["series_no"];
            this.lot = _data["lot"];
            this.expiration_date = _data["expiration_date"] ? moment.parseZone(_data["expiration_date"].toString()) : <any>undefined;
            this.warranty_term = _data["warranty_term"];
            this.inventory = _data["inventory"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.notes = _data["notes"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): S33_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new S33_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["master_code"] = this.master_code;
        data["goods_code"] = this.goods_code;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["sales_returns_account"] = this.sales_returns_account;
        data["warehouse_account"] = this.warehouse_account;
        data["cogs_account"] = this.cogs_account;
        data["cogs_price"] = this.cogs_price;
        data["cogs_money"] = this.cogs_money;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["construction_id"] = this.construction_id;
        data["goods_name"] = this.goods_name;
        data["group_code"] = this.group_code;
        data["standard_code"] = this.standard_code;
        data["brand"] = this.brand;
        data["series_no"] = this.series_no;
        data["lot"] = this.lot;
        data["expiration_date"] = this.expiration_date ? this.expiration_date.toISOString(true) : <any>undefined;
        data["warranty_term"] = this.warranty_term;
        data["inventory"] = this.inventory;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["notes"] = this.notes;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): S33_D_ENTITY {
        const json = this.toJSON();
        let result = new S33_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IS33_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    sales_returns_account?: string | undefined;
    warehouse_account?: string | undefined;
    cogs_account?: string | undefined;
    cogs_price?: number | undefined;
    cogs_money?: number | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    construction_id?: string | undefined;
    goods_name?: string | undefined;
    group_code?: string | undefined;
    standard_code?: number | undefined;
    brand?: number | undefined;
    series_no?: string | undefined;
    lot?: number | undefined;
    expiration_date?: moment.Moment | undefined;
    warranty_term?: number | undefined;
    inventory?: number | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    notes?: string | undefined;
    language_id?: number | undefined;
}

export class S33_M_ENTITY implements IS33_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    series_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    is_average_price?: boolean | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    sales_order_no?: string | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    xml_33d?: string | undefined;
    xml_vat_out?: string | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    is_costing?: boolean | undefined;
    s33_D?: S33_D_ENTITY[] | undefined;
    accounting_VAT_Outputs?: Accounting_VAT_Output_ENTITY[] | undefined;

    constructor(data?: IS33_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.invoice_no = _data["invoice_no"];
            this.series_no = _data["series_no"];
            this.customer_code = _data["customer_code"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.profession_code = _data["profession_code"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.creditor_account = _data["creditor_account"];
            this.is_average_price = _data["is_average_price"];
            this.tax_code = _data["tax_code"];
            this.tax_account = _data["tax_account"];
            this.discount_account = _data["discount_account"];
            this.total_money_goods_fc = _data["total_money_goods_fc"];
            this.total_money_goods = _data["total_money_goods"];
            this.tax_money_fc = _data["tax_money_fc"];
            this.tax_money = _data["tax_money"];
            this.discount_money_fc = _data["discount_money_fc"];
            this.discount_money = _data["discount_money"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.payment_deadline = _data["payment_deadline"];
            this.paid_fc = _data["paid_fc"];
            this.paid = _data["paid"];
            this.customer_name = _data["customer_name"];
            this.invoice_date = _data["invoice_date"] ? moment.parseZone(_data["invoice_date"].toString()) : <any>undefined;
            this.sales_order_no = _data["sales_order_no"];
            this.seller_code = _data["seller_code"];
            this.seller_name = _data["seller_name"];
            this.invoice_code = _data["invoice_code"];
            this.customer_invoice_name = _data["customer_invoice_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.xml_33d = _data["xml_33d"];
            this.xml_vat_out = _data["xml_vat_out"];
            this.is_tax = _data["is_tax"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            this.is_costing = _data["is_costing"];
            if (Array.isArray(_data["s33_D"])) {
                this.s33_D = [] as any;
                for (let item of _data["s33_D"])
                    this.s33_D.push(S33_D_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["accounting_VAT_Outputs"])) {
                this.accounting_VAT_Outputs = [] as any;
                for (let item of _data["accounting_VAT_Outputs"])
                    this.accounting_VAT_Outputs.push(Accounting_VAT_Output_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): S33_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new S33_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["invoice_no"] = this.invoice_no;
        data["series_no"] = this.series_no;
        data["customer_code"] = this.customer_code;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["profession_code"] = this.profession_code;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["creditor_account"] = this.creditor_account;
        data["is_average_price"] = this.is_average_price;
        data["tax_code"] = this.tax_code;
        data["tax_account"] = this.tax_account;
        data["discount_account"] = this.discount_account;
        data["total_money_goods_fc"] = this.total_money_goods_fc;
        data["total_money_goods"] = this.total_money_goods;
        data["tax_money_fc"] = this.tax_money_fc;
        data["tax_money"] = this.tax_money;
        data["discount_money_fc"] = this.discount_money_fc;
        data["discount_money"] = this.discount_money;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["payment_deadline"] = this.payment_deadline;
        data["paid_fc"] = this.paid_fc;
        data["paid"] = this.paid;
        data["customer_name"] = this.customer_name;
        data["invoice_date"] = this.invoice_date ? this.invoice_date.toISOString(true) : <any>undefined;
        data["sales_order_no"] = this.sales_order_no;
        data["seller_code"] = this.seller_code;
        data["seller_name"] = this.seller_name;
        data["invoice_code"] = this.invoice_code;
        data["customer_invoice_name"] = this.customer_invoice_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["xml_33d"] = this.xml_33d;
        data["xml_vat_out"] = this.xml_vat_out;
        data["is_tax"] = this.is_tax;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        data["is_costing"] = this.is_costing;
        if (Array.isArray(this.s33_D)) {
            data["s33_D"] = [];
            for (let item of this.s33_D)
                data["s33_D"].push(item.toJSON());
        }
        if (Array.isArray(this.accounting_VAT_Outputs)) {
            data["accounting_VAT_Outputs"] = [];
            for (let item of this.accounting_VAT_Outputs)
                data["accounting_VAT_Outputs"].push(item.toJSON());
        }
        return data;
    }

    clone(): S33_M_ENTITY {
        const json = this.toJSON();
        let result = new S33_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IS33_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    invoice_no?: string | undefined;
    series_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    profession_code?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    creditor_account?: string | undefined;
    is_average_price?: boolean | undefined;
    tax_code?: string | undefined;
    tax_account?: string | undefined;
    discount_account?: string | undefined;
    total_money_goods_fc?: number | undefined;
    total_money_goods?: number | undefined;
    tax_money_fc?: number | undefined;
    tax_money?: number | undefined;
    discount_money_fc?: number | undefined;
    discount_money?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    payment_deadline?: number | undefined;
    paid_fc?: number | undefined;
    paid?: number | undefined;
    customer_name?: string | undefined;
    invoice_date?: moment.Moment | undefined;
    sales_order_no?: string | undefined;
    seller_code?: string | undefined;
    seller_name?: string | undefined;
    invoice_code?: string | undefined;
    customer_invoice_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    xml_33d?: string | undefined;
    xml_vat_out?: string | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    is_costing?: boolean | undefined;
    s33_D?: S33_D_ENTITY[] | undefined;
    accounting_VAT_Outputs?: Accounting_VAT_Output_ENTITY[] | undefined;
}

export class S34_D_ENTITY implements IS34_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    master_code?: string | undefined;
    invoice_no?: string | undefined;
    voucher_34_m_code?: string | undefined;
    creditor_account?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    payment_required_fc?: number | undefined;
    payment_required?: number | undefined;
    payment_fc?: number | undefined;
    payment?: number | undefined;
    remaining_asset_acquisition_money_fc?: number | undefined;
    remaining_asset_acquisition_money?: number | undefined;
    remaining_exchange_rate?: number | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    construction_id?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IS34_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.master_code = _data["master_code"];
            this.invoice_no = _data["invoice_no"];
            this.voucher_34_m_code = _data["voucher_34_m_code"];
            this.creditor_account = _data["creditor_account"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.payment_required_fc = _data["payment_required_fc"];
            this.payment_required = _data["payment_required"];
            this.payment_fc = _data["payment_fc"];
            this.payment = _data["payment"];
            this.remaining_asset_acquisition_money_fc = _data["remaining_asset_acquisition_money_fc"];
            this.remaining_asset_acquisition_money = _data["remaining_asset_acquisition_money"];
            this.remaining_exchange_rate = _data["remaining_exchange_rate"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.fee_code = _data["fee_code"];
            this.construction_id = _data["construction_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): S34_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new S34_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["master_code"] = this.master_code;
        data["invoice_no"] = this.invoice_no;
        data["voucher_34_m_code"] = this.voucher_34_m_code;
        data["creditor_account"] = this.creditor_account;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["payment_required_fc"] = this.payment_required_fc;
        data["payment_required"] = this.payment_required;
        data["payment_fc"] = this.payment_fc;
        data["payment"] = this.payment;
        data["remaining_asset_acquisition_money_fc"] = this.remaining_asset_acquisition_money_fc;
        data["remaining_asset_acquisition_money"] = this.remaining_asset_acquisition_money;
        data["remaining_exchange_rate"] = this.remaining_exchange_rate;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["fee_code"] = this.fee_code;
        data["construction_id"] = this.construction_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): S34_D_ENTITY {
        const json = this.toJSON();
        let result = new S34_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IS34_D_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    master_code?: string | undefined;
    invoice_no?: string | undefined;
    voucher_34_m_code?: string | undefined;
    creditor_account?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    payment_required_fc?: number | undefined;
    payment_required?: number | undefined;
    payment_fc?: number | undefined;
    payment?: number | undefined;
    remaining_asset_acquisition_money_fc?: number | undefined;
    remaining_asset_acquisition_money?: number | undefined;
    remaining_exchange_rate?: number | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    construction_id?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
}

export class S34_M_ENTITY implements IS34_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_year?: number | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    remaining_exchange_rate_account?: string | undefined;
    remaining_exchange_rate_account1?: string | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    total_remaining_exchange_rate?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_34d?: string | undefined;
    s34_D?: S34_D_ENTITY[] | undefined;
    language_id?: number | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;

    constructor(data?: IS34_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.voucher_year = _data["voucher_year"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.grandparent = _data["grandparent"];
            this.description = _data["description"];
            this.code_fc = _data["code_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.debitor_account = _data["debitor_account"];
            this.remaining_exchange_rate_account = _data["remaining_exchange_rate_account"];
            this.remaining_exchange_rate_account1 = _data["remaining_exchange_rate_account1"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.total_remaining_exchange_rate = _data["total_remaining_exchange_rate"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.xml_34d = _data["xml_34d"];
            if (Array.isArray(_data["s34_D"])) {
                this.s34_D = [] as any;
                for (let item of _data["s34_D"])
                    this.s34_D.push(S34_D_ENTITY.fromJS(item));
            }
            this.language_id = _data["language_id"];
            this.is_tax = _data["is_tax"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
        }
    }

    static fromJS(data: any): S34_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new S34_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["voucher_year"] = this.voucher_year;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["grandparent"] = this.grandparent;
        data["description"] = this.description;
        data["code_fc"] = this.code_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["debitor_account"] = this.debitor_account;
        data["remaining_exchange_rate_account"] = this.remaining_exchange_rate_account;
        data["remaining_exchange_rate_account1"] = this.remaining_exchange_rate_account1;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["total_remaining_exchange_rate"] = this.total_remaining_exchange_rate;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["xml_34d"] = this.xml_34d;
        if (Array.isArray(this.s34_D)) {
            data["s34_D"] = [];
            for (let item of this.s34_D)
                data["s34_D"].push(item.toJSON());
        }
        data["language_id"] = this.language_id;
        data["is_tax"] = this.is_tax;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        return data;
    }

    clone(): S34_M_ENTITY {
        const json = this.toJSON();
        let result = new S34_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IS34_M_ENTITY {
    id?: number;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    voucher_year?: number | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    grandparent?: string | undefined;
    description?: string | undefined;
    code_fc?: string | undefined;
    exchange_rate?: number | undefined;
    debitor_account?: string | undefined;
    remaining_exchange_rate_account?: string | undefined;
    remaining_exchange_rate_account1?: string | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    total_remaining_exchange_rate?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_34d?: string | undefined;
    s34_D?: S34_D_ENTITY[] | undefined;
    language_id?: number | undefined;
    is_tax?: boolean | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
}

export class SYS_List_App_ENTITY implements ISYS_List_App_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    name_vn?: string | undefined;
    name_en?: string | undefined;
    key_app?: string | undefined;
    notes?: string | undefined;
    list_account_group?: string | undefined;
    list_account?: string | undefined;
    icon?: string | undefined;
    description?: string | undefined;
    type?: string | undefined;
    user_login?: string | undefined;
    default_link?: string | undefined;
    group_code?: string | undefined;
    is_show_app?: boolean | undefined;
    sYS_Menus?: SYS_Menu[] | undefined;

    constructor(data?: ISYS_List_App_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.name_vn = _data["name_vn"];
            this.name_en = _data["name_en"];
            this.key_app = _data["key_app"];
            this.notes = _data["notes"];
            this.list_account_group = _data["list_account_group"];
            this.list_account = _data["list_account"];
            this.icon = _data["icon"];
            this.description = _data["description"];
            this.type = _data["type"];
            this.user_login = _data["user_login"];
            this.default_link = _data["default_link"];
            this.group_code = _data["group_code"];
            this.is_show_app = _data["is_show_app"];
            if (Array.isArray(_data["sYS_Menus"])) {
                this.sYS_Menus = [] as any;
                for (let item of _data["sYS_Menus"])
                    this.sYS_Menus.push(SYS_Menu.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SYS_List_App_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_List_App_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["name_vn"] = this.name_vn;
        data["name_en"] = this.name_en;
        data["key_app"] = this.key_app;
        data["notes"] = this.notes;
        data["list_account_group"] = this.list_account_group;
        data["list_account"] = this.list_account;
        data["icon"] = this.icon;
        data["description"] = this.description;
        data["type"] = this.type;
        data["user_login"] = this.user_login;
        data["default_link"] = this.default_link;
        data["group_code"] = this.group_code;
        data["is_show_app"] = this.is_show_app;
        if (Array.isArray(this.sYS_Menus)) {
            data["sYS_Menus"] = [];
            for (let item of this.sYS_Menus)
                data["sYS_Menus"].push(item.toJSON());
        }
        return data;
    }

    clone(): SYS_List_App_ENTITY {
        const json = this.toJSON();
        let result = new SYS_List_App_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_List_App_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    name_vn?: string | undefined;
    name_en?: string | undefined;
    key_app?: string | undefined;
    notes?: string | undefined;
    list_account_group?: string | undefined;
    list_account?: string | undefined;
    icon?: string | undefined;
    description?: string | undefined;
    type?: string | undefined;
    user_login?: string | undefined;
    default_link?: string | undefined;
    group_code?: string | undefined;
    is_show_app?: boolean | undefined;
    sYS_Menus?: SYS_Menu[] | undefined;
}

export class SYS_Alter_Table_Voucher_ENTITY implements ISYS_Alter_Table_Voucher_ENTITY {
    qr?: string | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;
    starts_with_d?: string | undefined;
    starts_with_m?: string | undefined;

    constructor(data?: ISYS_Alter_Table_Voucher_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.qr = _data["qr"];
            this.voucher_code = _data["voucher_code"];
            this.company_code = _data["company_code"];
            this.voucher_year = _data["voucher_year"];
            this.starts_with_d = _data["starts_with_d"];
            this.starts_with_m = _data["starts_with_m"];
        }
    }

    static fromJS(data: any): SYS_Alter_Table_Voucher_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_Alter_Table_Voucher_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["qr"] = this.qr;
        data["voucher_code"] = this.voucher_code;
        data["company_code"] = this.company_code;
        data["voucher_year"] = this.voucher_year;
        data["starts_with_d"] = this.starts_with_d;
        data["starts_with_m"] = this.starts_with_m;
        return data;
    }

    clone(): SYS_Alter_Table_Voucher_ENTITY {
        const json = this.toJSON();
        let result = new SYS_Alter_Table_Voucher_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_Alter_Table_Voucher_ENTITY {
    qr?: string | undefined;
    voucher_code?: string | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;
    starts_with_d?: string | undefined;
    starts_with_m?: string | undefined;
}

export class SYS_List_App_Group_ENTITY implements ISYS_List_App_Group_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    name_vn?: string | undefined;
    name_en?: string | undefined;
    group_module?: string | undefined;
    icon?: string | undefined;
    icon1?: string | undefined;
    icon2?: string | undefined;
    icon3?: string | undefined;
    description?: string | undefined;
    list_account_group?: string | undefined;
    list_account?: string | undefined;
    is_show_app?: boolean | undefined;
    type?: string | undefined;
    user_login?: string | undefined;
    sYS_Menus?: SYS_Menu[] | undefined;
    sYS_List_Apps?: SYS_List_App_ENTITY[] | undefined;

    constructor(data?: ISYS_List_App_Group_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.name_vn = _data["name_vn"];
            this.name_en = _data["name_en"];
            this.group_module = _data["group_module"];
            this.icon = _data["icon"];
            this.icon1 = _data["icon1"];
            this.icon2 = _data["icon2"];
            this.icon3 = _data["icon3"];
            this.description = _data["description"];
            this.list_account_group = _data["list_account_group"];
            this.list_account = _data["list_account"];
            this.is_show_app = _data["is_show_app"];
            this.type = _data["type"];
            this.user_login = _data["user_login"];
            if (Array.isArray(_data["sYS_Menus"])) {
                this.sYS_Menus = [] as any;
                for (let item of _data["sYS_Menus"])
                    this.sYS_Menus.push(SYS_Menu.fromJS(item));
            }
            if (Array.isArray(_data["sYS_List_Apps"])) {
                this.sYS_List_Apps = [] as any;
                for (let item of _data["sYS_List_Apps"])
                    this.sYS_List_Apps.push(SYS_List_App_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SYS_List_App_Group_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new SYS_List_App_Group_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["name_vn"] = this.name_vn;
        data["name_en"] = this.name_en;
        data["group_module"] = this.group_module;
        data["icon"] = this.icon;
        data["icon1"] = this.icon1;
        data["icon2"] = this.icon2;
        data["icon3"] = this.icon3;
        data["description"] = this.description;
        data["list_account_group"] = this.list_account_group;
        data["list_account"] = this.list_account;
        data["is_show_app"] = this.is_show_app;
        data["type"] = this.type;
        data["user_login"] = this.user_login;
        if (Array.isArray(this.sYS_Menus)) {
            data["sYS_Menus"] = [];
            for (let item of this.sYS_Menus)
                data["sYS_Menus"].push(item.toJSON());
        }
        if (Array.isArray(this.sYS_List_Apps)) {
            data["sYS_List_Apps"] = [];
            for (let item of this.sYS_List_Apps)
                data["sYS_List_Apps"].push(item.toJSON());
        }
        return data;
    }

    clone(): SYS_List_App_Group_ENTITY {
        const json = this.toJSON();
        let result = new SYS_List_App_Group_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ISYS_List_App_Group_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    name_vn?: string | undefined;
    name_en?: string | undefined;
    group_module?: string | undefined;
    icon?: string | undefined;
    icon1?: string | undefined;
    icon2?: string | undefined;
    icon3?: string | undefined;
    description?: string | undefined;
    list_account_group?: string | undefined;
    list_account?: string | undefined;
    is_show_app?: boolean | undefined;
    type?: string | undefined;
    user_login?: string | undefined;
    sYS_Menus?: SYS_Menu[] | undefined;
    sYS_List_Apps?: SYS_List_App_ENTITY[] | undefined;
}

export class Tb_TestTheme_Sub1_ENTITY implements ITb_TestTheme_Sub1_ENTITY {
    id?: number;
    col_int?: number | undefined;
    col_char?: string | undefined;
    code?: string | undefined;
    col_LongText?: string | undefined;
    col_Switch?: boolean | undefined;
    col_Date?: moment.Moment | undefined;
    col_Images?: Upload_ENTITY[] | undefined;
    col_meadia?: Upload_ENTITY[] | undefined;
    col_multimedia?: Upload_ENTITY[] | undefined;
    col_datetime?: moment.Moment | undefined;
    col_dateranges?: string | undefined;
    col_time?: moment.Moment | undefined;
    col_Multivalue?: string | undefined;
    col_colorpicker?: string | undefined;
    col_float?: number | undefined;
    col_money?: number | undefined;
    col_content?: string | undefined;
    col_Rating?: number | undefined;
    col_IsOnline?: boolean | undefined;
    col_Engagement?: number | undefined;
    col_Phone?: string | undefined;
    col_Checkbox?: boolean | undefined;
    father?: number | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;

    constructor(data?: ITb_TestTheme_Sub1_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.col_int = _data["col_int"];
            this.col_char = _data["col_char"];
            this.code = _data["code"];
            this.col_LongText = _data["col_LongText"];
            this.col_Switch = _data["col_Switch"];
            this.col_Date = _data["col_Date"] ? moment.parseZone(_data["col_Date"].toString()) : <any>undefined;
            if (Array.isArray(_data["col_Images"])) {
                this.col_Images = [] as any;
                for (let item of _data["col_Images"])
                    this.col_Images.push(Upload_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["col_meadia"])) {
                this.col_meadia = [] as any;
                for (let item of _data["col_meadia"])
                    this.col_meadia.push(Upload_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["col_multimedia"])) {
                this.col_multimedia = [] as any;
                for (let item of _data["col_multimedia"])
                    this.col_multimedia.push(Upload_ENTITY.fromJS(item));
            }
            this.col_datetime = _data["col_datetime"] ? moment.parseZone(_data["col_datetime"].toString()) : <any>undefined;
            this.col_dateranges = _data["col_dateranges"];
            this.col_time = _data["col_time"] ? moment.parseZone(_data["col_time"].toString()) : <any>undefined;
            this.col_Multivalue = _data["col_Multivalue"];
            this.col_colorpicker = _data["col_colorpicker"];
            this.col_float = _data["col_float"];
            this.col_money = _data["col_money"];
            this.col_content = _data["col_content"];
            this.col_Rating = _data["col_Rating"];
            this.col_IsOnline = _data["col_IsOnline"];
            this.col_Engagement = _data["col_Engagement"];
            this.col_Phone = _data["col_Phone"];
            this.col_Checkbox = _data["col_Checkbox"];
            this.father = _data["father"];
            this.approve = _data["approve"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
        }
    }

    static fromJS(data: any): Tb_TestTheme_Sub1_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Tb_TestTheme_Sub1_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["col_int"] = this.col_int;
        data["col_char"] = this.col_char;
        data["code"] = this.code;
        data["col_LongText"] = this.col_LongText;
        data["col_Switch"] = this.col_Switch;
        data["col_Date"] = this.col_Date ? this.col_Date.toISOString(true) : <any>undefined;
        if (Array.isArray(this.col_Images)) {
            data["col_Images"] = [];
            for (let item of this.col_Images)
                data["col_Images"].push(item.toJSON());
        }
        if (Array.isArray(this.col_meadia)) {
            data["col_meadia"] = [];
            for (let item of this.col_meadia)
                data["col_meadia"].push(item.toJSON());
        }
        if (Array.isArray(this.col_multimedia)) {
            data["col_multimedia"] = [];
            for (let item of this.col_multimedia)
                data["col_multimedia"].push(item.toJSON());
        }
        data["col_datetime"] = this.col_datetime ? this.col_datetime.toISOString(true) : <any>undefined;
        data["col_dateranges"] = this.col_dateranges;
        data["col_time"] = this.col_time ? this.col_time.toISOString(true) : <any>undefined;
        data["col_Multivalue"] = this.col_Multivalue;
        data["col_colorpicker"] = this.col_colorpicker;
        data["col_float"] = this.col_float;
        data["col_money"] = this.col_money;
        data["col_content"] = this.col_content;
        data["col_Rating"] = this.col_Rating;
        data["col_IsOnline"] = this.col_IsOnline;
        data["col_Engagement"] = this.col_Engagement;
        data["col_Phone"] = this.col_Phone;
        data["col_Checkbox"] = this.col_Checkbox;
        data["father"] = this.father;
        data["approve"] = this.approve;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        return data;
    }

    clone(): Tb_TestTheme_Sub1_ENTITY {
        const json = this.toJSON();
        let result = new Tb_TestTheme_Sub1_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ITb_TestTheme_Sub1_ENTITY {
    id?: number;
    col_int?: number | undefined;
    col_char?: string | undefined;
    code?: string | undefined;
    col_LongText?: string | undefined;
    col_Switch?: boolean | undefined;
    col_Date?: moment.Moment | undefined;
    col_Images?: Upload_ENTITY[] | undefined;
    col_meadia?: Upload_ENTITY[] | undefined;
    col_multimedia?: Upload_ENTITY[] | undefined;
    col_datetime?: moment.Moment | undefined;
    col_dateranges?: string | undefined;
    col_time?: moment.Moment | undefined;
    col_Multivalue?: string | undefined;
    col_colorpicker?: string | undefined;
    col_float?: number | undefined;
    col_money?: number | undefined;
    col_content?: string | undefined;
    col_Rating?: number | undefined;
    col_IsOnline?: boolean | undefined;
    col_Engagement?: number | undefined;
    col_Phone?: string | undefined;
    col_Checkbox?: boolean | undefined;
    father?: number | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
}

export class Tb_TestTheme_Sub2_ENTITY implements ITb_TestTheme_Sub2_ENTITY {
    id?: number;
    col_int?: number | undefined;
    col_char?: string | undefined;
    code?: string | undefined;
    col_LongText?: string | undefined;
    col_Switch?: boolean | undefined;
    col_Date?: moment.Moment | undefined;
    col_Images?: Upload_ENTITY[] | undefined;
    col_meadia?: Upload_ENTITY[] | undefined;
    col_multimedia?: Upload_ENTITY[] | undefined;
    col_datetime?: moment.Moment | undefined;
    col_dateranges?: string | undefined;
    col_time?: moment.Moment | undefined;
    col_Multivalue?: string | undefined;
    col_colorpicker?: string | undefined;
    col_float?: number | undefined;
    col_money?: number | undefined;
    col_content?: string | undefined;
    col_Rating?: number | undefined;
    col_IsOnline?: boolean | undefined;
    col_Engagement?: number | undefined;
    col_Phone?: string | undefined;
    col_Checkbox?: boolean | undefined;
    father?: number | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;

    constructor(data?: ITb_TestTheme_Sub2_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.col_int = _data["col_int"];
            this.col_char = _data["col_char"];
            this.code = _data["code"];
            this.col_LongText = _data["col_LongText"];
            this.col_Switch = _data["col_Switch"];
            this.col_Date = _data["col_Date"] ? moment.parseZone(_data["col_Date"].toString()) : <any>undefined;
            if (Array.isArray(_data["col_Images"])) {
                this.col_Images = [] as any;
                for (let item of _data["col_Images"])
                    this.col_Images.push(Upload_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["col_meadia"])) {
                this.col_meadia = [] as any;
                for (let item of _data["col_meadia"])
                    this.col_meadia.push(Upload_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["col_multimedia"])) {
                this.col_multimedia = [] as any;
                for (let item of _data["col_multimedia"])
                    this.col_multimedia.push(Upload_ENTITY.fromJS(item));
            }
            this.col_datetime = _data["col_datetime"] ? moment.parseZone(_data["col_datetime"].toString()) : <any>undefined;
            this.col_dateranges = _data["col_dateranges"];
            this.col_time = _data["col_time"] ? moment.parseZone(_data["col_time"].toString()) : <any>undefined;
            this.col_Multivalue = _data["col_Multivalue"];
            this.col_colorpicker = _data["col_colorpicker"];
            this.col_float = _data["col_float"];
            this.col_money = _data["col_money"];
            this.col_content = _data["col_content"];
            this.col_Rating = _data["col_Rating"];
            this.col_IsOnline = _data["col_IsOnline"];
            this.col_Engagement = _data["col_Engagement"];
            this.col_Phone = _data["col_Phone"];
            this.col_Checkbox = _data["col_Checkbox"];
            this.father = _data["father"];
            this.approve = _data["approve"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
        }
    }

    static fromJS(data: any): Tb_TestTheme_Sub2_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Tb_TestTheme_Sub2_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["col_int"] = this.col_int;
        data["col_char"] = this.col_char;
        data["code"] = this.code;
        data["col_LongText"] = this.col_LongText;
        data["col_Switch"] = this.col_Switch;
        data["col_Date"] = this.col_Date ? this.col_Date.toISOString(true) : <any>undefined;
        if (Array.isArray(this.col_Images)) {
            data["col_Images"] = [];
            for (let item of this.col_Images)
                data["col_Images"].push(item.toJSON());
        }
        if (Array.isArray(this.col_meadia)) {
            data["col_meadia"] = [];
            for (let item of this.col_meadia)
                data["col_meadia"].push(item.toJSON());
        }
        if (Array.isArray(this.col_multimedia)) {
            data["col_multimedia"] = [];
            for (let item of this.col_multimedia)
                data["col_multimedia"].push(item.toJSON());
        }
        data["col_datetime"] = this.col_datetime ? this.col_datetime.toISOString(true) : <any>undefined;
        data["col_dateranges"] = this.col_dateranges;
        data["col_time"] = this.col_time ? this.col_time.toISOString(true) : <any>undefined;
        data["col_Multivalue"] = this.col_Multivalue;
        data["col_colorpicker"] = this.col_colorpicker;
        data["col_float"] = this.col_float;
        data["col_money"] = this.col_money;
        data["col_content"] = this.col_content;
        data["col_Rating"] = this.col_Rating;
        data["col_IsOnline"] = this.col_IsOnline;
        data["col_Engagement"] = this.col_Engagement;
        data["col_Phone"] = this.col_Phone;
        data["col_Checkbox"] = this.col_Checkbox;
        data["father"] = this.father;
        data["approve"] = this.approve;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        return data;
    }

    clone(): Tb_TestTheme_Sub2_ENTITY {
        const json = this.toJSON();
        let result = new Tb_TestTheme_Sub2_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ITb_TestTheme_Sub2_ENTITY {
    id?: number;
    col_int?: number | undefined;
    col_char?: string | undefined;
    code?: string | undefined;
    col_LongText?: string | undefined;
    col_Switch?: boolean | undefined;
    col_Date?: moment.Moment | undefined;
    col_Images?: Upload_ENTITY[] | undefined;
    col_meadia?: Upload_ENTITY[] | undefined;
    col_multimedia?: Upload_ENTITY[] | undefined;
    col_datetime?: moment.Moment | undefined;
    col_dateranges?: string | undefined;
    col_time?: moment.Moment | undefined;
    col_Multivalue?: string | undefined;
    col_colorpicker?: string | undefined;
    col_float?: number | undefined;
    col_money?: number | undefined;
    col_content?: string | undefined;
    col_Rating?: number | undefined;
    col_IsOnline?: boolean | undefined;
    col_Engagement?: number | undefined;
    col_Phone?: string | undefined;
    col_Checkbox?: boolean | undefined;
    father?: number | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
}

export class Tb_TestTheme_Sub3_ENTITY implements ITb_TestTheme_Sub3_ENTITY {
    id?: number;
    col_int?: number | undefined;
    col_char?: string | undefined;
    code?: string | undefined;
    col_LongText?: string | undefined;
    col_Switch?: boolean | undefined;
    col_Date?: moment.Moment | undefined;
    col_Images?: Upload_ENTITY[] | undefined;
    col_meadia?: Upload_ENTITY[] | undefined;
    col_multimedia?: Upload_ENTITY[] | undefined;
    col_datetime?: moment.Moment | undefined;
    col_dateranges?: string | undefined;
    col_time?: moment.Moment | undefined;
    col_Multivalue?: string | undefined;
    col_colorpicker?: string | undefined;
    col_float?: number | undefined;
    col_money?: number | undefined;
    col_content?: string | undefined;
    col_Rating?: number | undefined;
    col_IsOnline?: boolean | undefined;
    col_Engagement?: number | undefined;
    col_Phone?: string | undefined;
    col_Checkbox?: boolean | undefined;
    father?: number | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;

    constructor(data?: ITb_TestTheme_Sub3_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.col_int = _data["col_int"];
            this.col_char = _data["col_char"];
            this.code = _data["code"];
            this.col_LongText = _data["col_LongText"];
            this.col_Switch = _data["col_Switch"];
            this.col_Date = _data["col_Date"] ? moment.parseZone(_data["col_Date"].toString()) : <any>undefined;
            if (Array.isArray(_data["col_Images"])) {
                this.col_Images = [] as any;
                for (let item of _data["col_Images"])
                    this.col_Images.push(Upload_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["col_meadia"])) {
                this.col_meadia = [] as any;
                for (let item of _data["col_meadia"])
                    this.col_meadia.push(Upload_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["col_multimedia"])) {
                this.col_multimedia = [] as any;
                for (let item of _data["col_multimedia"])
                    this.col_multimedia.push(Upload_ENTITY.fromJS(item));
            }
            this.col_datetime = _data["col_datetime"] ? moment.parseZone(_data["col_datetime"].toString()) : <any>undefined;
            this.col_dateranges = _data["col_dateranges"];
            this.col_time = _data["col_time"] ? moment.parseZone(_data["col_time"].toString()) : <any>undefined;
            this.col_Multivalue = _data["col_Multivalue"];
            this.col_colorpicker = _data["col_colorpicker"];
            this.col_float = _data["col_float"];
            this.col_money = _data["col_money"];
            this.col_content = _data["col_content"];
            this.col_Rating = _data["col_Rating"];
            this.col_IsOnline = _data["col_IsOnline"];
            this.col_Engagement = _data["col_Engagement"];
            this.col_Phone = _data["col_Phone"];
            this.col_Checkbox = _data["col_Checkbox"];
            this.father = _data["father"];
            this.approve = _data["approve"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
        }
    }

    static fromJS(data: any): Tb_TestTheme_Sub3_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Tb_TestTheme_Sub3_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["col_int"] = this.col_int;
        data["col_char"] = this.col_char;
        data["code"] = this.code;
        data["col_LongText"] = this.col_LongText;
        data["col_Switch"] = this.col_Switch;
        data["col_Date"] = this.col_Date ? this.col_Date.toISOString(true) : <any>undefined;
        if (Array.isArray(this.col_Images)) {
            data["col_Images"] = [];
            for (let item of this.col_Images)
                data["col_Images"].push(item.toJSON());
        }
        if (Array.isArray(this.col_meadia)) {
            data["col_meadia"] = [];
            for (let item of this.col_meadia)
                data["col_meadia"].push(item.toJSON());
        }
        if (Array.isArray(this.col_multimedia)) {
            data["col_multimedia"] = [];
            for (let item of this.col_multimedia)
                data["col_multimedia"].push(item.toJSON());
        }
        data["col_datetime"] = this.col_datetime ? this.col_datetime.toISOString(true) : <any>undefined;
        data["col_dateranges"] = this.col_dateranges;
        data["col_time"] = this.col_time ? this.col_time.toISOString(true) : <any>undefined;
        data["col_Multivalue"] = this.col_Multivalue;
        data["col_colorpicker"] = this.col_colorpicker;
        data["col_float"] = this.col_float;
        data["col_money"] = this.col_money;
        data["col_content"] = this.col_content;
        data["col_Rating"] = this.col_Rating;
        data["col_IsOnline"] = this.col_IsOnline;
        data["col_Engagement"] = this.col_Engagement;
        data["col_Phone"] = this.col_Phone;
        data["col_Checkbox"] = this.col_Checkbox;
        data["father"] = this.father;
        data["approve"] = this.approve;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        return data;
    }

    clone(): Tb_TestTheme_Sub3_ENTITY {
        const json = this.toJSON();
        let result = new Tb_TestTheme_Sub3_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ITb_TestTheme_Sub3_ENTITY {
    id?: number;
    col_int?: number | undefined;
    col_char?: string | undefined;
    code?: string | undefined;
    col_LongText?: string | undefined;
    col_Switch?: boolean | undefined;
    col_Date?: moment.Moment | undefined;
    col_Images?: Upload_ENTITY[] | undefined;
    col_meadia?: Upload_ENTITY[] | undefined;
    col_multimedia?: Upload_ENTITY[] | undefined;
    col_datetime?: moment.Moment | undefined;
    col_dateranges?: string | undefined;
    col_time?: moment.Moment | undefined;
    col_Multivalue?: string | undefined;
    col_colorpicker?: string | undefined;
    col_float?: number | undefined;
    col_money?: number | undefined;
    col_content?: string | undefined;
    col_Rating?: number | undefined;
    col_IsOnline?: boolean | undefined;
    col_Engagement?: number | undefined;
    col_Phone?: string | undefined;
    col_Checkbox?: boolean | undefined;
    father?: number | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
}

export class Tb_TestTheme_ENTITY implements ITb_TestTheme_ENTITY {
    id?: number;
    col_int?: number | undefined;
    col_char?: string | undefined;
    code?: string | undefined;
    col_LongText?: string | undefined;
    col_Switch?: boolean | undefined;
    col_Select?: number | undefined;
    col_Date?: moment.Moment | undefined;
    col_Images?: Upload_ENTITY[] | undefined;
    col_meadia?: Upload_ENTITY[] | undefined;
    col_multimedia?: Upload_ENTITY[] | undefined;
    col_datetime?: moment.Moment | undefined;
    col_dateranges?: string | undefined;
    col_time?: moment.Moment | undefined;
    col_Multivalue?: string | undefined;
    col_colorpicker?: string | undefined;
    col_float?: number | undefined;
    col_money?: number | undefined;
    col_Multirow1?: string | undefined;
    col_Multirow2?: string | undefined;
    col_Multirow3?: string | undefined;
    col_content?: string | undefined;
    col_Rating?: number | undefined;
    col_IsOnline?: boolean | undefined;
    col_Engagement?: number | undefined;
    col_Phone?: string | undefined;
    col_Checkbox?: boolean | undefined;
    col_Autocomplete?: number | undefined;
    xmL_Detail1?: string | undefined;
    xmL_Detail2?: string | undefined;
    xmL_Detail3?: string | undefined;
    tb_TestTheme_Sub1?: Tb_TestTheme_Sub1_ENTITY[] | undefined;
    tb_TestTheme_Sub2?: Tb_TestTheme_Sub2_ENTITY[] | undefined;
    tb_TestTheme_Sub3?: Tb_TestTheme_Sub3_ENTITY[] | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;

    constructor(data?: ITb_TestTheme_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.col_int = _data["col_int"];
            this.col_char = _data["col_char"];
            this.code = _data["code"];
            this.col_LongText = _data["col_LongText"];
            this.col_Switch = _data["col_Switch"];
            this.col_Select = _data["col_Select"];
            this.col_Date = _data["col_Date"] ? moment.parseZone(_data["col_Date"].toString()) : <any>undefined;
            if (Array.isArray(_data["col_Images"])) {
                this.col_Images = [] as any;
                for (let item of _data["col_Images"])
                    this.col_Images.push(Upload_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["col_meadia"])) {
                this.col_meadia = [] as any;
                for (let item of _data["col_meadia"])
                    this.col_meadia.push(Upload_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["col_multimedia"])) {
                this.col_multimedia = [] as any;
                for (let item of _data["col_multimedia"])
                    this.col_multimedia.push(Upload_ENTITY.fromJS(item));
            }
            this.col_datetime = _data["col_datetime"] ? moment.parseZone(_data["col_datetime"].toString()) : <any>undefined;
            this.col_dateranges = _data["col_dateranges"];
            this.col_time = _data["col_time"] ? moment.parseZone(_data["col_time"].toString()) : <any>undefined;
            this.col_Multivalue = _data["col_Multivalue"];
            this.col_colorpicker = _data["col_colorpicker"];
            this.col_float = _data["col_float"];
            this.col_money = _data["col_money"];
            this.col_Multirow1 = _data["col_Multirow1"];
            this.col_Multirow2 = _data["col_Multirow2"];
            this.col_Multirow3 = _data["col_Multirow3"];
            this.col_content = _data["col_content"];
            this.col_Rating = _data["col_Rating"];
            this.col_IsOnline = _data["col_IsOnline"];
            this.col_Engagement = _data["col_Engagement"];
            this.col_Phone = _data["col_Phone"];
            this.col_Checkbox = _data["col_Checkbox"];
            this.col_Autocomplete = _data["col_Autocomplete"];
            this.xmL_Detail1 = _data["xmL_Detail1"];
            this.xmL_Detail2 = _data["xmL_Detail2"];
            this.xmL_Detail3 = _data["xmL_Detail3"];
            if (Array.isArray(_data["tb_TestTheme_Sub1"])) {
                this.tb_TestTheme_Sub1 = [] as any;
                for (let item of _data["tb_TestTheme_Sub1"])
                    this.tb_TestTheme_Sub1.push(Tb_TestTheme_Sub1_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["tb_TestTheme_Sub2"])) {
                this.tb_TestTheme_Sub2 = [] as any;
                for (let item of _data["tb_TestTheme_Sub2"])
                    this.tb_TestTheme_Sub2.push(Tb_TestTheme_Sub2_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["tb_TestTheme_Sub3"])) {
                this.tb_TestTheme_Sub3 = [] as any;
                for (let item of _data["tb_TestTheme_Sub3"])
                    this.tb_TestTheme_Sub3.push(Tb_TestTheme_Sub3_ENTITY.fromJS(item));
            }
            this.approve = _data["approve"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
        }
    }

    static fromJS(data: any): Tb_TestTheme_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Tb_TestTheme_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["col_int"] = this.col_int;
        data["col_char"] = this.col_char;
        data["code"] = this.code;
        data["col_LongText"] = this.col_LongText;
        data["col_Switch"] = this.col_Switch;
        data["col_Select"] = this.col_Select;
        data["col_Date"] = this.col_Date ? this.col_Date.toISOString(true) : <any>undefined;
        if (Array.isArray(this.col_Images)) {
            data["col_Images"] = [];
            for (let item of this.col_Images)
                data["col_Images"].push(item.toJSON());
        }
        if (Array.isArray(this.col_meadia)) {
            data["col_meadia"] = [];
            for (let item of this.col_meadia)
                data["col_meadia"].push(item.toJSON());
        }
        if (Array.isArray(this.col_multimedia)) {
            data["col_multimedia"] = [];
            for (let item of this.col_multimedia)
                data["col_multimedia"].push(item.toJSON());
        }
        data["col_datetime"] = this.col_datetime ? this.col_datetime.toISOString(true) : <any>undefined;
        data["col_dateranges"] = this.col_dateranges;
        data["col_time"] = this.col_time ? this.col_time.toISOString(true) : <any>undefined;
        data["col_Multivalue"] = this.col_Multivalue;
        data["col_colorpicker"] = this.col_colorpicker;
        data["col_float"] = this.col_float;
        data["col_money"] = this.col_money;
        data["col_Multirow1"] = this.col_Multirow1;
        data["col_Multirow2"] = this.col_Multirow2;
        data["col_Multirow3"] = this.col_Multirow3;
        data["col_content"] = this.col_content;
        data["col_Rating"] = this.col_Rating;
        data["col_IsOnline"] = this.col_IsOnline;
        data["col_Engagement"] = this.col_Engagement;
        data["col_Phone"] = this.col_Phone;
        data["col_Checkbox"] = this.col_Checkbox;
        data["col_Autocomplete"] = this.col_Autocomplete;
        data["xmL_Detail1"] = this.xmL_Detail1;
        data["xmL_Detail2"] = this.xmL_Detail2;
        data["xmL_Detail3"] = this.xmL_Detail3;
        if (Array.isArray(this.tb_TestTheme_Sub1)) {
            data["tb_TestTheme_Sub1"] = [];
            for (let item of this.tb_TestTheme_Sub1)
                data["tb_TestTheme_Sub1"].push(item.toJSON());
        }
        if (Array.isArray(this.tb_TestTheme_Sub2)) {
            data["tb_TestTheme_Sub2"] = [];
            for (let item of this.tb_TestTheme_Sub2)
                data["tb_TestTheme_Sub2"].push(item.toJSON());
        }
        if (Array.isArray(this.tb_TestTheme_Sub3)) {
            data["tb_TestTheme_Sub3"] = [];
            for (let item of this.tb_TestTheme_Sub3)
                data["tb_TestTheme_Sub3"].push(item.toJSON());
        }
        data["approve"] = this.approve;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        return data;
    }

    clone(): Tb_TestTheme_ENTITY {
        const json = this.toJSON();
        let result = new Tb_TestTheme_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ITb_TestTheme_ENTITY {
    id?: number;
    col_int?: number | undefined;
    col_char?: string | undefined;
    code?: string | undefined;
    col_LongText?: string | undefined;
    col_Switch?: boolean | undefined;
    col_Select?: number | undefined;
    col_Date?: moment.Moment | undefined;
    col_Images?: Upload_ENTITY[] | undefined;
    col_meadia?: Upload_ENTITY[] | undefined;
    col_multimedia?: Upload_ENTITY[] | undefined;
    col_datetime?: moment.Moment | undefined;
    col_dateranges?: string | undefined;
    col_time?: moment.Moment | undefined;
    col_Multivalue?: string | undefined;
    col_colorpicker?: string | undefined;
    col_float?: number | undefined;
    col_money?: number | undefined;
    col_Multirow1?: string | undefined;
    col_Multirow2?: string | undefined;
    col_Multirow3?: string | undefined;
    col_content?: string | undefined;
    col_Rating?: number | undefined;
    col_IsOnline?: boolean | undefined;
    col_Engagement?: number | undefined;
    col_Phone?: string | undefined;
    col_Checkbox?: boolean | undefined;
    col_Autocomplete?: number | undefined;
    xmL_Detail1?: string | undefined;
    xmL_Detail2?: string | undefined;
    xmL_Detail3?: string | undefined;
    tb_TestTheme_Sub1?: Tb_TestTheme_Sub1_ENTITY[] | undefined;
    tb_TestTheme_Sub2?: Tb_TestTheme_Sub2_ENTITY[] | undefined;
    tb_TestTheme_Sub3?: Tb_TestTheme_Sub3_ENTITY[] | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
}

export class HRM_TimeSheet_Detail_ENTITY implements IHRM_TimeSheet_Detail_ENTITY {
    id?: number;
    timeSheet_ID?: number | undefined;
    checkin?: boolean | undefined;
    timeCheckin?: moment.Moment | undefined;
    checkout?: boolean | undefined;
    timeCheckout?: moment.Moment | undefined;
    task_ID?: number | undefined;
    task_Description?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IHRM_TimeSheet_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.timeSheet_ID = _data["timeSheet_ID"];
            this.checkin = _data["checkin"];
            this.timeCheckin = _data["timeCheckin"] ? moment.parseZone(_data["timeCheckin"].toString()) : <any>undefined;
            this.checkout = _data["checkout"];
            this.timeCheckout = _data["timeCheckout"] ? moment.parseZone(_data["timeCheckout"].toString()) : <any>undefined;
            this.task_ID = _data["task_ID"];
            this.task_Description = _data["task_Description"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["timeSheet_ID"] = this.timeSheet_ID;
        data["checkin"] = this.checkin;
        data["timeCheckin"] = this.timeCheckin ? this.timeCheckin.toISOString(true) : <any>undefined;
        data["checkout"] = this.checkout;
        data["timeCheckout"] = this.timeCheckout ? this.timeCheckout.toISOString(true) : <any>undefined;
        data["task_ID"] = this.task_ID;
        data["task_Description"] = this.task_Description;
        data["notes"] = this.notes;
        return data;
    }

    clone(): HRM_TimeSheet_Detail_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Detail_ENTITY {
    id?: number;
    timeSheet_ID?: number | undefined;
    checkin?: boolean | undefined;
    timeCheckin?: moment.Moment | undefined;
    checkout?: boolean | undefined;
    timeCheckout?: moment.Moment | undefined;
    task_ID?: number | undefined;
    task_Description?: string | undefined;
    notes?: string | undefined;
}

export enum Base64FormattingOptions {
    _0 = 0,
    _1 = 1,
}

export class HRM_TimeSheet_ENTITY implements IHRM_TimeSheet_ENTITY {
    id?: number | undefined;
    constHour?: number | undefined;
    hourStartMonth?: number | undefined;
    employee_ID?: number | undefined;
    employee_code?: string | undefined;
    company_code?: string | undefined;
    title?: string | undefined;
    host?: string | undefined;
    start?: number | undefined;
    allday?: number | undefined;
    type_ID?: number | undefined;
    className?: string | undefined;
    hRM_TimeSheet_Details?: HRM_TimeSheet_Detail_ENTITY[] | undefined;
    code?: string | undefined;
    department?: string | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    start_date?: moment.Moment;
    end_date?: moment.Moment;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    html?: string | undefined;
    base64?: string | undefined;
    decentralization?: string | undefined;
    check_image_face?: Base64FormattingOptions;

    constructor(data?: IHRM_TimeSheet_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.constHour = _data["constHour"];
            this.hourStartMonth = _data["hourStartMonth"];
            this.employee_ID = _data["employee_ID"];
            this.employee_code = _data["employee_code"];
            this.company_code = _data["company_code"];
            this.title = _data["title"];
            this.host = _data["host"];
            this.start = _data["start"];
            this.allday = _data["allday"];
            this.type_ID = _data["type_ID"];
            this.className = _data["className"];
            if (Array.isArray(_data["hRM_TimeSheet_Details"])) {
                this.hRM_TimeSheet_Details = [] as any;
                for (let item of _data["hRM_TimeSheet_Details"])
                    this.hRM_TimeSheet_Details.push(HRM_TimeSheet_Detail_ENTITY.fromJS(item));
            }
            this.code = _data["code"];
            this.department = _data["department"];
            this.approve = _data["approve"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.start_date = _data["start_date"] ? moment.parseZone(_data["start_date"].toString()) : <any>undefined;
            this.end_date = _data["end_date"] ? moment.parseZone(_data["end_date"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.html = _data["html"];
            this.base64 = _data["base64"];
            this.decentralization = _data["decentralization"];
            this.check_image_face = _data["check_image_face"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["constHour"] = this.constHour;
        data["hourStartMonth"] = this.hourStartMonth;
        data["employee_ID"] = this.employee_ID;
        data["employee_code"] = this.employee_code;
        data["company_code"] = this.company_code;
        data["title"] = this.title;
        data["host"] = this.host;
        data["start"] = this.start;
        data["allday"] = this.allday;
        data["type_ID"] = this.type_ID;
        data["className"] = this.className;
        if (Array.isArray(this.hRM_TimeSheet_Details)) {
            data["hRM_TimeSheet_Details"] = [];
            for (let item of this.hRM_TimeSheet_Details)
                data["hRM_TimeSheet_Details"].push(item.toJSON());
        }
        data["code"] = this.code;
        data["department"] = this.department;
        data["approve"] = this.approve;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["start_date"] = this.start_date ? this.start_date.toISOString(true) : <any>undefined;
        data["end_date"] = this.end_date ? this.end_date.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["html"] = this.html;
        data["base64"] = this.base64;
        data["decentralization"] = this.decentralization;
        data["check_image_face"] = this.check_image_face;
        return data;
    }

    clone(): HRM_TimeSheet_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_ENTITY {
    id?: number | undefined;
    constHour?: number | undefined;
    hourStartMonth?: number | undefined;
    employee_ID?: number | undefined;
    employee_code?: string | undefined;
    company_code?: string | undefined;
    title?: string | undefined;
    host?: string | undefined;
    start?: number | undefined;
    allday?: number | undefined;
    type_ID?: number | undefined;
    className?: string | undefined;
    hRM_TimeSheet_Details?: HRM_TimeSheet_Detail_ENTITY[] | undefined;
    code?: string | undefined;
    department?: string | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    start_date?: moment.Moment;
    end_date?: moment.Moment;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    html?: string | undefined;
    base64?: string | undefined;
    decentralization?: string | undefined;
    check_image_face?: Base64FormattingOptions;
}

export class HRM_Employee_Log_Paid_Holiday_ENTITY implements IHRM_Employee_Log_Paid_Holiday_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    request_type?: string | undefined;
    request_code?: string | undefined;
    prev_day?: number | undefined;
    current_day?: number | undefined;
    remaining_day?: number | undefined;
    total_days_off?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_apply?: moment.Moment | undefined;
    start_datetime?: moment.Moment | undefined;
    end_datetime?: moment.Moment | undefined;
    employee_code?: string | undefined;
    work_shift_code?: string | undefined;
    type?: string | undefined;

    constructor(data?: IHRM_Employee_Log_Paid_Holiday_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.request_type = _data["request_type"];
            this.request_code = _data["request_code"];
            this.prev_day = _data["prev_day"];
            this.current_day = _data["current_day"];
            this.remaining_day = _data["remaining_day"];
            this.total_days_off = _data["total_days_off"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_apply = _data["date_apply"] ? moment.parseZone(_data["date_apply"].toString()) : <any>undefined;
            this.start_datetime = _data["start_datetime"] ? moment.parseZone(_data["start_datetime"].toString()) : <any>undefined;
            this.end_datetime = _data["end_datetime"] ? moment.parseZone(_data["end_datetime"].toString()) : <any>undefined;
            this.employee_code = _data["employee_code"];
            this.work_shift_code = _data["work_shift_code"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): HRM_Employee_Log_Paid_Holiday_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Employee_Log_Paid_Holiday_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["request_type"] = this.request_type;
        data["request_code"] = this.request_code;
        data["prev_day"] = this.prev_day;
        data["current_day"] = this.current_day;
        data["remaining_day"] = this.remaining_day;
        data["total_days_off"] = this.total_days_off;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_apply"] = this.date_apply ? this.date_apply.toISOString(true) : <any>undefined;
        data["start_datetime"] = this.start_datetime ? this.start_datetime.toISOString(true) : <any>undefined;
        data["end_datetime"] = this.end_datetime ? this.end_datetime.toISOString(true) : <any>undefined;
        data["employee_code"] = this.employee_code;
        data["work_shift_code"] = this.work_shift_code;
        data["type"] = this.type;
        return data;
    }

    clone(): HRM_Employee_Log_Paid_Holiday_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Employee_Log_Paid_Holiday_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Employee_Log_Paid_Holiday_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    request_type?: string | undefined;
    request_code?: string | undefined;
    prev_day?: number | undefined;
    current_day?: number | undefined;
    remaining_day?: number | undefined;
    total_days_off?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_apply?: moment.Moment | undefined;
    start_datetime?: moment.Moment | undefined;
    end_datetime?: moment.Moment | undefined;
    employee_code?: string | undefined;
    work_shift_code?: string | undefined;
    type?: string | undefined;
}

export class Create_Request_Action_ENTITY implements ICreate_Request_Action_ENTITY {
    employee_code?: string | undefined;
    work_shift_code?: string | undefined;
    hRM_TimeSheet_Work_Shifts?: HRM_TimeSheet_Work_Shift_ENTITY[] | undefined;
    hRM_Employee_Log_Paid_Holiday?: HRM_Employee_Log_Paid_Holiday_ENTITY;

    constructor(data?: ICreate_Request_Action_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employee_code = _data["employee_code"];
            this.work_shift_code = _data["work_shift_code"];
            if (Array.isArray(_data["hRM_TimeSheet_Work_Shifts"])) {
                this.hRM_TimeSheet_Work_Shifts = [] as any;
                for (let item of _data["hRM_TimeSheet_Work_Shifts"])
                    this.hRM_TimeSheet_Work_Shifts.push(HRM_TimeSheet_Work_Shift_ENTITY.fromJS(item));
            }
            this.hRM_Employee_Log_Paid_Holiday = _data["hRM_Employee_Log_Paid_Holiday"] ? HRM_Employee_Log_Paid_Holiday_ENTITY.fromJS(_data["hRM_Employee_Log_Paid_Holiday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Create_Request_Action_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Create_Request_Action_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employee_code"] = this.employee_code;
        data["work_shift_code"] = this.work_shift_code;
        if (Array.isArray(this.hRM_TimeSheet_Work_Shifts)) {
            data["hRM_TimeSheet_Work_Shifts"] = [];
            for (let item of this.hRM_TimeSheet_Work_Shifts)
                data["hRM_TimeSheet_Work_Shifts"].push(item.toJSON());
        }
        data["hRM_Employee_Log_Paid_Holiday"] = this.hRM_Employee_Log_Paid_Holiday ? this.hRM_Employee_Log_Paid_Holiday.toJSON() : <any>undefined;
        return data;
    }

    clone(): Create_Request_Action_ENTITY {
        const json = this.toJSON();
        let result = new Create_Request_Action_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICreate_Request_Action_ENTITY {
    employee_code?: string | undefined;
    work_shift_code?: string | undefined;
    hRM_TimeSheet_Work_Shifts?: HRM_TimeSheet_Work_Shift_ENTITY[] | undefined;
    hRM_Employee_Log_Paid_Holiday?: HRM_Employee_Log_Paid_Holiday_ENTITY;
}

export class HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY implements IHRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    work_date?: moment.Moment | undefined;
    work_shift_code?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    overtime_code?: string | undefined;
    attendance_code?: string | undefined;
    soon_late_request_code?: string | undefined;
    mission_allowance_code?: string | undefined;
    master_code?: string | undefined;
    master_name?: string | undefined;
    dates?: moment.Moment | undefined;
    is_valid?: boolean | undefined;
    day?: number | undefined;
    dates_name?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    class_name?: string | undefined;
    url?: string | undefined;
    day_in_week?: string | undefined;
    start_time?: moment.Moment | undefined;
    start_time_f?: string | undefined;
    end_time?: moment.Moment | undefined;
    end_time_f?: string | undefined;
    total_time?: number | undefined;
    work_shift_name?: string | undefined;
    is_auto_clone?: boolean | undefined;

    constructor(data?: IHRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.work_date = _data["work_date"] ? moment.parseZone(_data["work_date"].toString()) : <any>undefined;
            this.work_shift_code = _data["work_shift_code"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.overtime_code = _data["overtime_code"];
            this.attendance_code = _data["attendance_code"];
            this.soon_late_request_code = _data["soon_late_request_code"];
            this.mission_allowance_code = _data["mission_allowance_code"];
            this.master_code = _data["master_code"];
            this.master_name = _data["master_name"];
            this.dates = _data["dates"] ? moment.parseZone(_data["dates"].toString()) : <any>undefined;
            this.is_valid = _data["is_valid"];
            this.day = _data["day"];
            this.dates_name = _data["dates_name"];
            this.type = _data["type"];
            this.title = _data["title"];
            this.class_name = _data["class_name"];
            this.url = _data["url"];
            this.day_in_week = _data["day_in_week"];
            this.start_time = _data["start_time"] ? moment.parseZone(_data["start_time"].toString()) : <any>undefined;
            this.start_time_f = _data["start_time_f"];
            this.end_time = _data["end_time"] ? moment.parseZone(_data["end_time"].toString()) : <any>undefined;
            this.end_time_f = _data["end_time_f"];
            this.total_time = _data["total_time"];
            this.work_shift_name = _data["work_shift_name"];
            this.is_auto_clone = _data["is_auto_clone"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["work_date"] = this.work_date ? this.work_date.toISOString(true) : <any>undefined;
        data["work_shift_code"] = this.work_shift_code;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["overtime_code"] = this.overtime_code;
        data["attendance_code"] = this.attendance_code;
        data["soon_late_request_code"] = this.soon_late_request_code;
        data["mission_allowance_code"] = this.mission_allowance_code;
        data["master_code"] = this.master_code;
        data["master_name"] = this.master_name;
        data["dates"] = this.dates ? this.dates.toISOString(true) : <any>undefined;
        data["is_valid"] = this.is_valid;
        data["day"] = this.day;
        data["dates_name"] = this.dates_name;
        data["type"] = this.type;
        data["title"] = this.title;
        data["class_name"] = this.class_name;
        data["url"] = this.url;
        data["day_in_week"] = this.day_in_week;
        data["start_time"] = this.start_time ? this.start_time.toISOString(true) : <any>undefined;
        data["start_time_f"] = this.start_time_f;
        data["end_time"] = this.end_time ? this.end_time.toISOString(true) : <any>undefined;
        data["end_time_f"] = this.end_time_f;
        data["total_time"] = this.total_time;
        data["work_shift_name"] = this.work_shift_name;
        data["is_auto_clone"] = this.is_auto_clone;
        return data;
    }

    clone(): HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    work_date?: moment.Moment | undefined;
    work_shift_code?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    overtime_code?: string | undefined;
    attendance_code?: string | undefined;
    soon_late_request_code?: string | undefined;
    mission_allowance_code?: string | undefined;
    master_code?: string | undefined;
    master_name?: string | undefined;
    dates?: moment.Moment | undefined;
    is_valid?: boolean | undefined;
    day?: number | undefined;
    dates_name?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    class_name?: string | undefined;
    url?: string | undefined;
    day_in_week?: string | undefined;
    start_time?: moment.Moment | undefined;
    start_time_f?: string | undefined;
    end_time?: moment.Moment | undefined;
    end_time_f?: string | undefined;
    total_time?: number | undefined;
    work_shift_name?: string | undefined;
    is_auto_clone?: boolean | undefined;
}

export class HRM_TimeSheet_Employee_Work_Shift_ENTITY implements IHRM_TimeSheet_Employee_Work_Shift_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    in_month?: number | undefined;
    in_year?: number | undefined;
    date_add?: moment.Moment | undefined;
    work_date?: moment.Moment | undefined;
    work_date_f?: string | undefined;
    create_account?: string | undefined;
    login_user?: string | undefined;
    create_name?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    is_auto_clone?: boolean | undefined;
    xml?: string | undefined;
    hRM_Employees?: HRM_Employee_ENTITY[] | undefined;
    hrM_TimeSheet_Employee_Work_Shift_Details?: HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY[] | undefined;

    constructor(data?: IHRM_TimeSheet_Employee_Work_Shift_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.in_month = _data["in_month"];
            this.in_year = _data["in_year"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.work_date = _data["work_date"] ? moment.parseZone(_data["work_date"].toString()) : <any>undefined;
            this.work_date_f = _data["work_date_f"];
            this.create_account = _data["create_account"];
            this.login_user = _data["login_user"];
            this.create_name = _data["create_name"];
            this.type = _data["type"];
            this.title = _data["title"];
            this.is_auto_clone = _data["is_auto_clone"];
            this.xml = _data["xml"];
            if (Array.isArray(_data["hRM_Employees"])) {
                this.hRM_Employees = [] as any;
                for (let item of _data["hRM_Employees"])
                    this.hRM_Employees.push(HRM_Employee_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hrM_TimeSheet_Employee_Work_Shift_Details"])) {
                this.hrM_TimeSheet_Employee_Work_Shift_Details = [] as any;
                for (let item of _data["hrM_TimeSheet_Employee_Work_Shift_Details"])
                    this.hrM_TimeSheet_Employee_Work_Shift_Details.push(HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Employee_Work_Shift_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Employee_Work_Shift_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["in_month"] = this.in_month;
        data["in_year"] = this.in_year;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["work_date"] = this.work_date ? this.work_date.toISOString(true) : <any>undefined;
        data["work_date_f"] = this.work_date_f;
        data["create_account"] = this.create_account;
        data["login_user"] = this.login_user;
        data["create_name"] = this.create_name;
        data["type"] = this.type;
        data["title"] = this.title;
        data["is_auto_clone"] = this.is_auto_clone;
        data["xml"] = this.xml;
        if (Array.isArray(this.hRM_Employees)) {
            data["hRM_Employees"] = [];
            for (let item of this.hRM_Employees)
                data["hRM_Employees"].push(item.toJSON());
        }
        if (Array.isArray(this.hrM_TimeSheet_Employee_Work_Shift_Details)) {
            data["hrM_TimeSheet_Employee_Work_Shift_Details"] = [];
            for (let item of this.hrM_TimeSheet_Employee_Work_Shift_Details)
                data["hrM_TimeSheet_Employee_Work_Shift_Details"].push(item.toJSON());
        }
        return data;
    }

    clone(): HRM_TimeSheet_Employee_Work_Shift_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Employee_Work_Shift_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Employee_Work_Shift_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    in_month?: number | undefined;
    in_year?: number | undefined;
    date_add?: moment.Moment | undefined;
    work_date?: moment.Moment | undefined;
    work_date_f?: string | undefined;
    create_account?: string | undefined;
    login_user?: string | undefined;
    create_name?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    is_auto_clone?: boolean | undefined;
    xml?: string | undefined;
    hRM_Employees?: HRM_Employee_ENTITY[] | undefined;
    hrM_TimeSheet_Employee_Work_Shift_Details?: HRM_TimeSheet_Employee_Work_Shift_Detail_ENTITY[] | undefined;
}

export class HRM_TimeSheet_Attendance_ENTITY implements IHRM_TimeSheet_Attendance_ENTITY {
    id?: number;
    code?: string | undefined;
    checker_code?: string | undefined;
    checker_name?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    position_code?: string | undefined;
    position_name?: string | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    start_datetime_f?: string | undefined;
    start_datetime_f_en?: string | undefined;
    end_datetime?: moment.Moment | undefined;
    end_datetime_f?: string | undefined;
    create_datetime_f?: string | undefined;
    end_datetime_f_en?: string | undefined;
    type_off_code?: string | undefined;
    type_off_name?: string | undefined;
    type_off_name_title?: string | undefined;
    employee_code_replace?: string | undefined;
    employee_name_replace?: string | undefined;
    phone_number?: string | undefined;
    user_code_approve?: string | undefined;
    user_name_approve?: string | undefined;
    status_code?: string | undefined;
    status_name?: string | undefined;
    notes?: string | undefined;
    reason?: string | undefined;
    max_day_number?: number | undefined;
    total_days_off?: number | undefined;
    request_date?: moment.Moment | undefined;
    request_date_f?: string | undefined;
    follower?: string | undefined;
    approve_status?: string | undefined;
    approve_status_name?: string | undefined;
    request_account?: string | undefined;
    request_account_name?: string | undefined;
    class_name?: string | undefined;
    approve_status_html?: string | undefined;
    work_shift_code?: string | undefined;
    work_shift_name?: string | undefined;
    login_account?: string | undefined;
    moving?: string | undefined;
    type?: string | undefined;
    day_number?: number | undefined;

    constructor(data?: IHRM_TimeSheet_Attendance_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.checker_code = _data["checker_code"];
            this.checker_name = _data["checker_name"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.position_code = _data["position_code"];
            this.position_name = _data["position_name"];
            this.branch_code = _data["branch_code"];
            this.branch_name = _data["branch_name"];
            this.department_code = _data["department_code"];
            this.department_name = _data["department_name"];
            this.start_datetime = _data["start_datetime"] ? moment.parseZone(_data["start_datetime"].toString()) : <any>undefined;
            this.start_datetime_f = _data["start_datetime_f"];
            this.start_datetime_f_en = _data["start_datetime_f_en"];
            this.end_datetime = _data["end_datetime"] ? moment.parseZone(_data["end_datetime"].toString()) : <any>undefined;
            this.end_datetime_f = _data["end_datetime_f"];
            this.create_datetime_f = _data["create_datetime_f"];
            this.end_datetime_f_en = _data["end_datetime_f_en"];
            this.type_off_code = _data["type_off_code"];
            this.type_off_name = _data["type_off_name"];
            this.type_off_name_title = _data["type_off_name_title"];
            this.employee_code_replace = _data["employee_code_replace"];
            this.employee_name_replace = _data["employee_name_replace"];
            this.phone_number = _data["phone_number"];
            this.user_code_approve = _data["user_code_approve"];
            this.user_name_approve = _data["user_name_approve"];
            this.status_code = _data["status_code"];
            this.status_name = _data["status_name"];
            this.notes = _data["notes"];
            this.reason = _data["reason"];
            this.max_day_number = _data["max_day_number"];
            this.total_days_off = _data["total_days_off"];
            this.request_date = _data["request_date"] ? moment.parseZone(_data["request_date"].toString()) : <any>undefined;
            this.request_date_f = _data["request_date_f"];
            this.follower = _data["follower"];
            this.approve_status = _data["approve_status"];
            this.approve_status_name = _data["approve_status_name"];
            this.request_account = _data["request_account"];
            this.request_account_name = _data["request_account_name"];
            this.class_name = _data["class_name"];
            this.approve_status_html = _data["approve_status_html"];
            this.work_shift_code = _data["work_shift_code"];
            this.work_shift_name = _data["work_shift_name"];
            this.login_account = _data["login_account"];
            this.moving = _data["moving"];
            this.type = _data["type"];
            this.day_number = _data["day_number"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Attendance_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Attendance_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["checker_code"] = this.checker_code;
        data["checker_name"] = this.checker_name;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["position_code"] = this.position_code;
        data["position_name"] = this.position_name;
        data["branch_code"] = this.branch_code;
        data["branch_name"] = this.branch_name;
        data["department_code"] = this.department_code;
        data["department_name"] = this.department_name;
        data["start_datetime"] = this.start_datetime ? this.start_datetime.toISOString(true) : <any>undefined;
        data["start_datetime_f"] = this.start_datetime_f;
        data["start_datetime_f_en"] = this.start_datetime_f_en;
        data["end_datetime"] = this.end_datetime ? this.end_datetime.toISOString(true) : <any>undefined;
        data["end_datetime_f"] = this.end_datetime_f;
        data["create_datetime_f"] = this.create_datetime_f;
        data["end_datetime_f_en"] = this.end_datetime_f_en;
        data["type_off_code"] = this.type_off_code;
        data["type_off_name"] = this.type_off_name;
        data["type_off_name_title"] = this.type_off_name_title;
        data["employee_code_replace"] = this.employee_code_replace;
        data["employee_name_replace"] = this.employee_name_replace;
        data["phone_number"] = this.phone_number;
        data["user_code_approve"] = this.user_code_approve;
        data["user_name_approve"] = this.user_name_approve;
        data["status_code"] = this.status_code;
        data["status_name"] = this.status_name;
        data["notes"] = this.notes;
        data["reason"] = this.reason;
        data["max_day_number"] = this.max_day_number;
        data["total_days_off"] = this.total_days_off;
        data["request_date"] = this.request_date ? this.request_date.toISOString(true) : <any>undefined;
        data["request_date_f"] = this.request_date_f;
        data["follower"] = this.follower;
        data["approve_status"] = this.approve_status;
        data["approve_status_name"] = this.approve_status_name;
        data["request_account"] = this.request_account;
        data["request_account_name"] = this.request_account_name;
        data["class_name"] = this.class_name;
        data["approve_status_html"] = this.approve_status_html;
        data["work_shift_code"] = this.work_shift_code;
        data["work_shift_name"] = this.work_shift_name;
        data["login_account"] = this.login_account;
        data["moving"] = this.moving;
        data["type"] = this.type;
        data["day_number"] = this.day_number;
        return data;
    }

    clone(): HRM_TimeSheet_Attendance_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Attendance_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Attendance_ENTITY {
    id?: number;
    code?: string | undefined;
    checker_code?: string | undefined;
    checker_name?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    position_code?: string | undefined;
    position_name?: string | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    start_datetime_f?: string | undefined;
    start_datetime_f_en?: string | undefined;
    end_datetime?: moment.Moment | undefined;
    end_datetime_f?: string | undefined;
    create_datetime_f?: string | undefined;
    end_datetime_f_en?: string | undefined;
    type_off_code?: string | undefined;
    type_off_name?: string | undefined;
    type_off_name_title?: string | undefined;
    employee_code_replace?: string | undefined;
    employee_name_replace?: string | undefined;
    phone_number?: string | undefined;
    user_code_approve?: string | undefined;
    user_name_approve?: string | undefined;
    status_code?: string | undefined;
    status_name?: string | undefined;
    notes?: string | undefined;
    reason?: string | undefined;
    max_day_number?: number | undefined;
    total_days_off?: number | undefined;
    request_date?: moment.Moment | undefined;
    request_date_f?: string | undefined;
    follower?: string | undefined;
    approve_status?: string | undefined;
    approve_status_name?: string | undefined;
    request_account?: string | undefined;
    request_account_name?: string | undefined;
    class_name?: string | undefined;
    approve_status_html?: string | undefined;
    work_shift_code?: string | undefined;
    work_shift_name?: string | undefined;
    login_account?: string | undefined;
    moving?: string | undefined;
    type?: string | undefined;
    day_number?: number | undefined;
}

export class HRM_TimeSheet_Attendance_Status_ENTITY implements IHRM_TimeSheet_Attendance_Status_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IHRM_TimeSheet_Attendance_Status_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Attendance_Status_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Attendance_Status_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): HRM_TimeSheet_Attendance_Status_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Attendance_Status_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Attendance_Status_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    name?: string | undefined;
}

export class HRM_TimeSheet_Attendance_Type_Off_ENTITY implements IHRM_TimeSheet_Attendance_Type_Off_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    name?: string | undefined;
    is_salary?: boolean | undefined;
    is_salary_name?: string | undefined;

    constructor(data?: IHRM_TimeSheet_Attendance_Type_Off_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.is_salary = _data["is_salary"];
            this.is_salary_name = _data["is_salary_name"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Attendance_Type_Off_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Attendance_Type_Off_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["is_salary"] = this.is_salary;
        data["is_salary_name"] = this.is_salary_name;
        return data;
    }

    clone(): HRM_TimeSheet_Attendance_Type_Off_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Attendance_Type_Off_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Attendance_Type_Off_ENTITY {
    id?: number | undefined;
    code?: string | undefined;
    name?: string | undefined;
    is_salary?: boolean | undefined;
    is_salary_name?: string | undefined;
}

export class HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY implements IHRM_TimeSheet_Employee_Soon_Late_Register_ENTITY {
    id?: number;
    code?: string | undefined;
    request_date?: moment.Moment | undefined;
    request_date_f?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    start_datetime_f?: string | undefined;
    start_datetime_f_en?: string | undefined;
    end_datetime?: moment.Moment | undefined;
    end_datetime_f?: string | undefined;
    end_datetime_f_en?: string | undefined;
    for_day_in_week?: string | undefined;
    for_day_in_week_f?: string | undefined;
    for_work_shift?: string | undefined;
    for_work_shift_name?: string | undefined;
    reason?: string | undefined;
    checker?: string | undefined;
    checker_name?: string | undefined;
    follower?: string | undefined;
    follower_name?: string | undefined;
    type?: string | undefined;
    notes?: string | undefined;
    approve_status?: string | undefined;
    approve_status_name?: string | undefined;
    approve_status_html?: string | undefined;
    approve_note?: string | undefined;
    request_account?: string | undefined;
    request_account_name?: string | undefined;
    login_account?: string | undefined;
    move_to_account?: string | undefined;
    moving?: string | undefined;
    type_request?: string | undefined;
    type_request_name?: string | undefined;
    class_name?: string | undefined;
    time_request?: number | undefined;

    constructor(data?: IHRM_TimeSheet_Employee_Soon_Late_Register_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.request_date = _data["request_date"] ? moment.parseZone(_data["request_date"].toString()) : <any>undefined;
            this.request_date_f = _data["request_date_f"];
            this.start_datetime = _data["start_datetime"] ? moment.parseZone(_data["start_datetime"].toString()) : <any>undefined;
            this.start_datetime_f = _data["start_datetime_f"];
            this.start_datetime_f_en = _data["start_datetime_f_en"];
            this.end_datetime = _data["end_datetime"] ? moment.parseZone(_data["end_datetime"].toString()) : <any>undefined;
            this.end_datetime_f = _data["end_datetime_f"];
            this.end_datetime_f_en = _data["end_datetime_f_en"];
            this.for_day_in_week = _data["for_day_in_week"];
            this.for_day_in_week_f = _data["for_day_in_week_f"];
            this.for_work_shift = _data["for_work_shift"];
            this.for_work_shift_name = _data["for_work_shift_name"];
            this.reason = _data["reason"];
            this.checker = _data["checker"];
            this.checker_name = _data["checker_name"];
            this.follower = _data["follower"];
            this.follower_name = _data["follower_name"];
            this.type = _data["type"];
            this.notes = _data["notes"];
            this.approve_status = _data["approve_status"];
            this.approve_status_name = _data["approve_status_name"];
            this.approve_status_html = _data["approve_status_html"];
            this.approve_note = _data["approve_note"];
            this.request_account = _data["request_account"];
            this.request_account_name = _data["request_account_name"];
            this.login_account = _data["login_account"];
            this.move_to_account = _data["move_to_account"];
            this.moving = _data["moving"];
            this.type_request = _data["type_request"];
            this.type_request_name = _data["type_request_name"];
            this.class_name = _data["class_name"];
            this.time_request = _data["time_request"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["request_date"] = this.request_date ? this.request_date.toISOString(true) : <any>undefined;
        data["request_date_f"] = this.request_date_f;
        data["start_datetime"] = this.start_datetime ? this.start_datetime.toISOString(true) : <any>undefined;
        data["start_datetime_f"] = this.start_datetime_f;
        data["start_datetime_f_en"] = this.start_datetime_f_en;
        data["end_datetime"] = this.end_datetime ? this.end_datetime.toISOString(true) : <any>undefined;
        data["end_datetime_f"] = this.end_datetime_f;
        data["end_datetime_f_en"] = this.end_datetime_f_en;
        data["for_day_in_week"] = this.for_day_in_week;
        data["for_day_in_week_f"] = this.for_day_in_week_f;
        data["for_work_shift"] = this.for_work_shift;
        data["for_work_shift_name"] = this.for_work_shift_name;
        data["reason"] = this.reason;
        data["checker"] = this.checker;
        data["checker_name"] = this.checker_name;
        data["follower"] = this.follower;
        data["follower_name"] = this.follower_name;
        data["type"] = this.type;
        data["notes"] = this.notes;
        data["approve_status"] = this.approve_status;
        data["approve_status_name"] = this.approve_status_name;
        data["approve_status_html"] = this.approve_status_html;
        data["approve_note"] = this.approve_note;
        data["request_account"] = this.request_account;
        data["request_account_name"] = this.request_account_name;
        data["login_account"] = this.login_account;
        data["move_to_account"] = this.move_to_account;
        data["moving"] = this.moving;
        data["type_request"] = this.type_request;
        data["type_request_name"] = this.type_request_name;
        data["class_name"] = this.class_name;
        data["time_request"] = this.time_request;
        return data;
    }

    clone(): HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Employee_Soon_Late_Register_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Employee_Soon_Late_Register_ENTITY {
    id?: number;
    code?: string | undefined;
    request_date?: moment.Moment | undefined;
    request_date_f?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    start_datetime_f?: string | undefined;
    start_datetime_f_en?: string | undefined;
    end_datetime?: moment.Moment | undefined;
    end_datetime_f?: string | undefined;
    end_datetime_f_en?: string | undefined;
    for_day_in_week?: string | undefined;
    for_day_in_week_f?: string | undefined;
    for_work_shift?: string | undefined;
    for_work_shift_name?: string | undefined;
    reason?: string | undefined;
    checker?: string | undefined;
    checker_name?: string | undefined;
    follower?: string | undefined;
    follower_name?: string | undefined;
    type?: string | undefined;
    notes?: string | undefined;
    approve_status?: string | undefined;
    approve_status_name?: string | undefined;
    approve_status_html?: string | undefined;
    approve_note?: string | undefined;
    request_account?: string | undefined;
    request_account_name?: string | undefined;
    login_account?: string | undefined;
    move_to_account?: string | undefined;
    moving?: string | undefined;
    type_request?: string | undefined;
    type_request_name?: string | undefined;
    class_name?: string | undefined;
    time_request?: number | undefined;
}

export class HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY implements IHRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IHRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Employee_Soon_Late_Register_Status_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
}

export class HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY implements IHRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IHRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Employee_Soon_Late_Register_Type_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
}

export class HRM_Timesheet_Employee_Mission_Allowance_ENTITY implements IHRM_Timesheet_Employee_Mission_Allowance_ENTITY {
    id?: number;
    code?: string | undefined;
    request_date?: moment.Moment | undefined;
    request_date_f?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    start_datetime_f?: string | undefined;
    start_datetime_f_en?: string | undefined;
    end_datetime?: moment.Moment | undefined;
    end_datetime_f?: string | undefined;
    end_datetime_f_en?: string | undefined;
    for_day_in_week?: string | undefined;
    for_day_in_week_f?: string | undefined;
    for_work_shift?: string | undefined;
    for_work_shift_name?: string | undefined;
    reason?: string | undefined;
    checker?: string | undefined;
    checker_name?: string | undefined;
    follower?: string | undefined;
    follower_name?: string | undefined;
    type?: string | undefined;
    notes?: string | undefined;
    approve_status?: string | undefined;
    approve_status_name?: string | undefined;
    approve_status_html?: string | undefined;
    approve_note?: string | undefined;
    request_account?: string | undefined;
    request_account_name?: string | undefined;
    login_account?: string | undefined;
    move_to_account?: string | undefined;
    moving?: string | undefined;
    type_request?: string | undefined;
    type_request_name?: string | undefined;
    class_name?: string | undefined;
    address?: string | undefined;
    time_request?: number | undefined;
    is_mission?: boolean | undefined;

    constructor(data?: IHRM_Timesheet_Employee_Mission_Allowance_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.request_date = _data["request_date"] ? moment.parseZone(_data["request_date"].toString()) : <any>undefined;
            this.request_date_f = _data["request_date_f"];
            this.start_datetime = _data["start_datetime"] ? moment.parseZone(_data["start_datetime"].toString()) : <any>undefined;
            this.start_datetime_f = _data["start_datetime_f"];
            this.start_datetime_f_en = _data["start_datetime_f_en"];
            this.end_datetime = _data["end_datetime"] ? moment.parseZone(_data["end_datetime"].toString()) : <any>undefined;
            this.end_datetime_f = _data["end_datetime_f"];
            this.end_datetime_f_en = _data["end_datetime_f_en"];
            this.for_day_in_week = _data["for_day_in_week"];
            this.for_day_in_week_f = _data["for_day_in_week_f"];
            this.for_work_shift = _data["for_work_shift"];
            this.for_work_shift_name = _data["for_work_shift_name"];
            this.reason = _data["reason"];
            this.checker = _data["checker"];
            this.checker_name = _data["checker_name"];
            this.follower = _data["follower"];
            this.follower_name = _data["follower_name"];
            this.type = _data["type"];
            this.notes = _data["notes"];
            this.approve_status = _data["approve_status"];
            this.approve_status_name = _data["approve_status_name"];
            this.approve_status_html = _data["approve_status_html"];
            this.approve_note = _data["approve_note"];
            this.request_account = _data["request_account"];
            this.request_account_name = _data["request_account_name"];
            this.login_account = _data["login_account"];
            this.move_to_account = _data["move_to_account"];
            this.moving = _data["moving"];
            this.type_request = _data["type_request"];
            this.type_request_name = _data["type_request_name"];
            this.class_name = _data["class_name"];
            this.address = _data["address"];
            this.time_request = _data["time_request"];
            this.is_mission = _data["is_mission"];
        }
    }

    static fromJS(data: any): HRM_Timesheet_Employee_Mission_Allowance_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Timesheet_Employee_Mission_Allowance_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["request_date"] = this.request_date ? this.request_date.toISOString(true) : <any>undefined;
        data["request_date_f"] = this.request_date_f;
        data["start_datetime"] = this.start_datetime ? this.start_datetime.toISOString(true) : <any>undefined;
        data["start_datetime_f"] = this.start_datetime_f;
        data["start_datetime_f_en"] = this.start_datetime_f_en;
        data["end_datetime"] = this.end_datetime ? this.end_datetime.toISOString(true) : <any>undefined;
        data["end_datetime_f"] = this.end_datetime_f;
        data["end_datetime_f_en"] = this.end_datetime_f_en;
        data["for_day_in_week"] = this.for_day_in_week;
        data["for_day_in_week_f"] = this.for_day_in_week_f;
        data["for_work_shift"] = this.for_work_shift;
        data["for_work_shift_name"] = this.for_work_shift_name;
        data["reason"] = this.reason;
        data["checker"] = this.checker;
        data["checker_name"] = this.checker_name;
        data["follower"] = this.follower;
        data["follower_name"] = this.follower_name;
        data["type"] = this.type;
        data["notes"] = this.notes;
        data["approve_status"] = this.approve_status;
        data["approve_status_name"] = this.approve_status_name;
        data["approve_status_html"] = this.approve_status_html;
        data["approve_note"] = this.approve_note;
        data["request_account"] = this.request_account;
        data["request_account_name"] = this.request_account_name;
        data["login_account"] = this.login_account;
        data["move_to_account"] = this.move_to_account;
        data["moving"] = this.moving;
        data["type_request"] = this.type_request;
        data["type_request_name"] = this.type_request_name;
        data["class_name"] = this.class_name;
        data["address"] = this.address;
        data["time_request"] = this.time_request;
        data["is_mission"] = this.is_mission;
        return data;
    }

    clone(): HRM_Timesheet_Employee_Mission_Allowance_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Timesheet_Employee_Mission_Allowance_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Timesheet_Employee_Mission_Allowance_ENTITY {
    id?: number;
    code?: string | undefined;
    request_date?: moment.Moment | undefined;
    request_date_f?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    start_datetime_f?: string | undefined;
    start_datetime_f_en?: string | undefined;
    end_datetime?: moment.Moment | undefined;
    end_datetime_f?: string | undefined;
    end_datetime_f_en?: string | undefined;
    for_day_in_week?: string | undefined;
    for_day_in_week_f?: string | undefined;
    for_work_shift?: string | undefined;
    for_work_shift_name?: string | undefined;
    reason?: string | undefined;
    checker?: string | undefined;
    checker_name?: string | undefined;
    follower?: string | undefined;
    follower_name?: string | undefined;
    type?: string | undefined;
    notes?: string | undefined;
    approve_status?: string | undefined;
    approve_status_name?: string | undefined;
    approve_status_html?: string | undefined;
    approve_note?: string | undefined;
    request_account?: string | undefined;
    request_account_name?: string | undefined;
    login_account?: string | undefined;
    move_to_account?: string | undefined;
    moving?: string | undefined;
    type_request?: string | undefined;
    type_request_name?: string | undefined;
    class_name?: string | undefined;
    address?: string | undefined;
    time_request?: number | undefined;
    is_mission?: boolean | undefined;
}

export class HRM_Timesheet_Employee_Overtime_ENTITY implements IHRM_Timesheet_Employee_Overtime_ENTITY {
    id?: number;
    code?: string | undefined;
    checker?: string | undefined;
    checker_name?: string | undefined;
    work_land?: string | undefined;
    work_land_name?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    position_code?: string | undefined;
    position_name?: string | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    start_relax_datetime?: moment.Moment | undefined;
    start_datetime_f?: string | undefined;
    start_relax_datetime_f?: string | undefined;
    approve_note?: string | undefined;
    start_datetime_f_en?: string | undefined;
    end_datetime?: moment.Moment | undefined;
    end_relax_datetime?: moment.Moment | undefined;
    end_datetime_f?: string | undefined;
    end_relax_datetime_f?: string | undefined;
    create_datetime_f?: string | undefined;
    end_datetime_f_en?: string | undefined;
    type_off_code?: string | undefined;
    type_off_name?: string | undefined;
    type_off_name_title?: string | undefined;
    employee_code_replace?: string | undefined;
    employee_name_replace?: string | undefined;
    phone_number?: string | undefined;
    user_code_approve?: string | undefined;
    user_name_approve?: string | undefined;
    status_code?: string | undefined;
    status_name?: string | undefined;
    notes?: string | undefined;
    reason?: string | undefined;
    max_day_number?: number | undefined;
    request_date?: moment.Moment | undefined;
    request_date_f?: string | undefined;
    follower?: string | undefined;
    approve_status?: string | undefined;
    approve_status_name?: string | undefined;
    request_account?: string | undefined;
    request_account_name?: string | undefined;
    class_name?: string | undefined;
    approve_status_html?: string | undefined;
    login_account?: string | undefined;
    moving?: string | undefined;
    type?: string | undefined;
    day_number?: number | undefined;
    total_hour?: number | undefined;

    constructor(data?: IHRM_Timesheet_Employee_Overtime_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.checker = _data["checker"];
            this.checker_name = _data["checker_name"];
            this.work_land = _data["work_land"];
            this.work_land_name = _data["work_land_name"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.position_code = _data["position_code"];
            this.position_name = _data["position_name"];
            this.branch_code = _data["branch_code"];
            this.branch_name = _data["branch_name"];
            this.department_code = _data["department_code"];
            this.department_name = _data["department_name"];
            this.start_datetime = _data["start_datetime"] ? moment.parseZone(_data["start_datetime"].toString()) : <any>undefined;
            this.start_relax_datetime = _data["start_relax_datetime"] ? moment.parseZone(_data["start_relax_datetime"].toString()) : <any>undefined;
            this.start_datetime_f = _data["start_datetime_f"];
            this.start_relax_datetime_f = _data["start_relax_datetime_f"];
            this.approve_note = _data["approve_note"];
            this.start_datetime_f_en = _data["start_datetime_f_en"];
            this.end_datetime = _data["end_datetime"] ? moment.parseZone(_data["end_datetime"].toString()) : <any>undefined;
            this.end_relax_datetime = _data["end_relax_datetime"] ? moment.parseZone(_data["end_relax_datetime"].toString()) : <any>undefined;
            this.end_datetime_f = _data["end_datetime_f"];
            this.end_relax_datetime_f = _data["end_relax_datetime_f"];
            this.create_datetime_f = _data["create_datetime_f"];
            this.end_datetime_f_en = _data["end_datetime_f_en"];
            this.type_off_code = _data["type_off_code"];
            this.type_off_name = _data["type_off_name"];
            this.type_off_name_title = _data["type_off_name_title"];
            this.employee_code_replace = _data["employee_code_replace"];
            this.employee_name_replace = _data["employee_name_replace"];
            this.phone_number = _data["phone_number"];
            this.user_code_approve = _data["user_code_approve"];
            this.user_name_approve = _data["user_name_approve"];
            this.status_code = _data["status_code"];
            this.status_name = _data["status_name"];
            this.notes = _data["notes"];
            this.reason = _data["reason"];
            this.max_day_number = _data["max_day_number"];
            this.request_date = _data["request_date"] ? moment.parseZone(_data["request_date"].toString()) : <any>undefined;
            this.request_date_f = _data["request_date_f"];
            this.follower = _data["follower"];
            this.approve_status = _data["approve_status"];
            this.approve_status_name = _data["approve_status_name"];
            this.request_account = _data["request_account"];
            this.request_account_name = _data["request_account_name"];
            this.class_name = _data["class_name"];
            this.approve_status_html = _data["approve_status_html"];
            this.login_account = _data["login_account"];
            this.moving = _data["moving"];
            this.type = _data["type"];
            this.day_number = _data["day_number"];
            this.total_hour = _data["total_hour"];
        }
    }

    static fromJS(data: any): HRM_Timesheet_Employee_Overtime_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Timesheet_Employee_Overtime_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["checker"] = this.checker;
        data["checker_name"] = this.checker_name;
        data["work_land"] = this.work_land;
        data["work_land_name"] = this.work_land_name;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["position_code"] = this.position_code;
        data["position_name"] = this.position_name;
        data["branch_code"] = this.branch_code;
        data["branch_name"] = this.branch_name;
        data["department_code"] = this.department_code;
        data["department_name"] = this.department_name;
        data["start_datetime"] = this.start_datetime ? this.start_datetime.toISOString(true) : <any>undefined;
        data["start_relax_datetime"] = this.start_relax_datetime ? this.start_relax_datetime.toISOString(true) : <any>undefined;
        data["start_datetime_f"] = this.start_datetime_f;
        data["start_relax_datetime_f"] = this.start_relax_datetime_f;
        data["approve_note"] = this.approve_note;
        data["start_datetime_f_en"] = this.start_datetime_f_en;
        data["end_datetime"] = this.end_datetime ? this.end_datetime.toISOString(true) : <any>undefined;
        data["end_relax_datetime"] = this.end_relax_datetime ? this.end_relax_datetime.toISOString(true) : <any>undefined;
        data["end_datetime_f"] = this.end_datetime_f;
        data["end_relax_datetime_f"] = this.end_relax_datetime_f;
        data["create_datetime_f"] = this.create_datetime_f;
        data["end_datetime_f_en"] = this.end_datetime_f_en;
        data["type_off_code"] = this.type_off_code;
        data["type_off_name"] = this.type_off_name;
        data["type_off_name_title"] = this.type_off_name_title;
        data["employee_code_replace"] = this.employee_code_replace;
        data["employee_name_replace"] = this.employee_name_replace;
        data["phone_number"] = this.phone_number;
        data["user_code_approve"] = this.user_code_approve;
        data["user_name_approve"] = this.user_name_approve;
        data["status_code"] = this.status_code;
        data["status_name"] = this.status_name;
        data["notes"] = this.notes;
        data["reason"] = this.reason;
        data["max_day_number"] = this.max_day_number;
        data["request_date"] = this.request_date ? this.request_date.toISOString(true) : <any>undefined;
        data["request_date_f"] = this.request_date_f;
        data["follower"] = this.follower;
        data["approve_status"] = this.approve_status;
        data["approve_status_name"] = this.approve_status_name;
        data["request_account"] = this.request_account;
        data["request_account_name"] = this.request_account_name;
        data["class_name"] = this.class_name;
        data["approve_status_html"] = this.approve_status_html;
        data["login_account"] = this.login_account;
        data["moving"] = this.moving;
        data["type"] = this.type;
        data["day_number"] = this.day_number;
        data["total_hour"] = this.total_hour;
        return data;
    }

    clone(): HRM_Timesheet_Employee_Overtime_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Timesheet_Employee_Overtime_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Timesheet_Employee_Overtime_ENTITY {
    id?: number;
    code?: string | undefined;
    checker?: string | undefined;
    checker_name?: string | undefined;
    work_land?: string | undefined;
    work_land_name?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    position_code?: string | undefined;
    position_name?: string | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    start_relax_datetime?: moment.Moment | undefined;
    start_datetime_f?: string | undefined;
    start_relax_datetime_f?: string | undefined;
    approve_note?: string | undefined;
    start_datetime_f_en?: string | undefined;
    end_datetime?: moment.Moment | undefined;
    end_relax_datetime?: moment.Moment | undefined;
    end_datetime_f?: string | undefined;
    end_relax_datetime_f?: string | undefined;
    create_datetime_f?: string | undefined;
    end_datetime_f_en?: string | undefined;
    type_off_code?: string | undefined;
    type_off_name?: string | undefined;
    type_off_name_title?: string | undefined;
    employee_code_replace?: string | undefined;
    employee_name_replace?: string | undefined;
    phone_number?: string | undefined;
    user_code_approve?: string | undefined;
    user_name_approve?: string | undefined;
    status_code?: string | undefined;
    status_name?: string | undefined;
    notes?: string | undefined;
    reason?: string | undefined;
    max_day_number?: number | undefined;
    request_date?: moment.Moment | undefined;
    request_date_f?: string | undefined;
    follower?: string | undefined;
    approve_status?: string | undefined;
    approve_status_name?: string | undefined;
    request_account?: string | undefined;
    request_account_name?: string | undefined;
    class_name?: string | undefined;
    approve_status_html?: string | undefined;
    login_account?: string | undefined;
    moving?: string | undefined;
    type?: string | undefined;
    day_number?: number | undefined;
    total_hour?: number | undefined;
}

export class HRM_Timesheet_Employee_Update_Timkeeping_ENTITY implements IHRM_Timesheet_Employee_Update_Timkeeping_ENTITY {
    id?: number;
    code?: string | undefined;
    checker?: string | undefined;
    checker_name?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    position_code?: string | undefined;
    position_name?: string | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    start_relax_datetime?: moment.Moment | undefined;
    start_datetime_f?: string | undefined;
    start_relax_datetime_f?: string | undefined;
    approve_note?: string | undefined;
    start_datetime_f_en?: string | undefined;
    end_datetime?: moment.Moment | undefined;
    end_relax_datetime?: moment.Moment | undefined;
    end_datetime_f?: string | undefined;
    end_relax_datetime_f?: string | undefined;
    create_datetime_f?: string | undefined;
    end_datetime_f_en?: string | undefined;
    type_off_code?: string | undefined;
    type_off_name?: string | undefined;
    type_off_name_title?: string | undefined;
    employee_code_replace?: string | undefined;
    employee_name_replace?: string | undefined;
    phone_number?: string | undefined;
    user_code_approve?: string | undefined;
    user_name_approve?: string | undefined;
    status_code?: string | undefined;
    status_name?: string | undefined;
    notes?: string | undefined;
    reason?: string | undefined;
    max_day_number?: number | undefined;
    request_date?: moment.Moment | undefined;
    request_date_f?: string | undefined;
    follower?: string | undefined;
    approve_status?: string | undefined;
    approve_status_name?: string | undefined;
    request_account?: string | undefined;
    request_account_name?: string | undefined;
    class_name?: string | undefined;
    approve_status_html?: string | undefined;
    login_account?: string | undefined;
    moving?: string | undefined;
    type?: string | undefined;
    day_number?: number | undefined;

    constructor(data?: IHRM_Timesheet_Employee_Update_Timkeeping_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.checker = _data["checker"];
            this.checker_name = _data["checker_name"];
            this.employee_code = _data["employee_code"];
            this.employee_name = _data["employee_name"];
            this.position_code = _data["position_code"];
            this.position_name = _data["position_name"];
            this.branch_code = _data["branch_code"];
            this.branch_name = _data["branch_name"];
            this.department_code = _data["department_code"];
            this.department_name = _data["department_name"];
            this.start_datetime = _data["start_datetime"] ? moment.parseZone(_data["start_datetime"].toString()) : <any>undefined;
            this.start_relax_datetime = _data["start_relax_datetime"] ? moment.parseZone(_data["start_relax_datetime"].toString()) : <any>undefined;
            this.start_datetime_f = _data["start_datetime_f"];
            this.start_relax_datetime_f = _data["start_relax_datetime_f"];
            this.approve_note = _data["approve_note"];
            this.start_datetime_f_en = _data["start_datetime_f_en"];
            this.end_datetime = _data["end_datetime"] ? moment.parseZone(_data["end_datetime"].toString()) : <any>undefined;
            this.end_relax_datetime = _data["end_relax_datetime"] ? moment.parseZone(_data["end_relax_datetime"].toString()) : <any>undefined;
            this.end_datetime_f = _data["end_datetime_f"];
            this.end_relax_datetime_f = _data["end_relax_datetime_f"];
            this.create_datetime_f = _data["create_datetime_f"];
            this.end_datetime_f_en = _data["end_datetime_f_en"];
            this.type_off_code = _data["type_off_code"];
            this.type_off_name = _data["type_off_name"];
            this.type_off_name_title = _data["type_off_name_title"];
            this.employee_code_replace = _data["employee_code_replace"];
            this.employee_name_replace = _data["employee_name_replace"];
            this.phone_number = _data["phone_number"];
            this.user_code_approve = _data["user_code_approve"];
            this.user_name_approve = _data["user_name_approve"];
            this.status_code = _data["status_code"];
            this.status_name = _data["status_name"];
            this.notes = _data["notes"];
            this.reason = _data["reason"];
            this.max_day_number = _data["max_day_number"];
            this.request_date = _data["request_date"] ? moment.parseZone(_data["request_date"].toString()) : <any>undefined;
            this.request_date_f = _data["request_date_f"];
            this.follower = _data["follower"];
            this.approve_status = _data["approve_status"];
            this.approve_status_name = _data["approve_status_name"];
            this.request_account = _data["request_account"];
            this.request_account_name = _data["request_account_name"];
            this.class_name = _data["class_name"];
            this.approve_status_html = _data["approve_status_html"];
            this.login_account = _data["login_account"];
            this.moving = _data["moving"];
            this.type = _data["type"];
            this.day_number = _data["day_number"];
        }
    }

    static fromJS(data: any): HRM_Timesheet_Employee_Update_Timkeeping_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Timesheet_Employee_Update_Timkeeping_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["checker"] = this.checker;
        data["checker_name"] = this.checker_name;
        data["employee_code"] = this.employee_code;
        data["employee_name"] = this.employee_name;
        data["position_code"] = this.position_code;
        data["position_name"] = this.position_name;
        data["branch_code"] = this.branch_code;
        data["branch_name"] = this.branch_name;
        data["department_code"] = this.department_code;
        data["department_name"] = this.department_name;
        data["start_datetime"] = this.start_datetime ? this.start_datetime.toISOString(true) : <any>undefined;
        data["start_relax_datetime"] = this.start_relax_datetime ? this.start_relax_datetime.toISOString(true) : <any>undefined;
        data["start_datetime_f"] = this.start_datetime_f;
        data["start_relax_datetime_f"] = this.start_relax_datetime_f;
        data["approve_note"] = this.approve_note;
        data["start_datetime_f_en"] = this.start_datetime_f_en;
        data["end_datetime"] = this.end_datetime ? this.end_datetime.toISOString(true) : <any>undefined;
        data["end_relax_datetime"] = this.end_relax_datetime ? this.end_relax_datetime.toISOString(true) : <any>undefined;
        data["end_datetime_f"] = this.end_datetime_f;
        data["end_relax_datetime_f"] = this.end_relax_datetime_f;
        data["create_datetime_f"] = this.create_datetime_f;
        data["end_datetime_f_en"] = this.end_datetime_f_en;
        data["type_off_code"] = this.type_off_code;
        data["type_off_name"] = this.type_off_name;
        data["type_off_name_title"] = this.type_off_name_title;
        data["employee_code_replace"] = this.employee_code_replace;
        data["employee_name_replace"] = this.employee_name_replace;
        data["phone_number"] = this.phone_number;
        data["user_code_approve"] = this.user_code_approve;
        data["user_name_approve"] = this.user_name_approve;
        data["status_code"] = this.status_code;
        data["status_name"] = this.status_name;
        data["notes"] = this.notes;
        data["reason"] = this.reason;
        data["max_day_number"] = this.max_day_number;
        data["request_date"] = this.request_date ? this.request_date.toISOString(true) : <any>undefined;
        data["request_date_f"] = this.request_date_f;
        data["follower"] = this.follower;
        data["approve_status"] = this.approve_status;
        data["approve_status_name"] = this.approve_status_name;
        data["request_account"] = this.request_account;
        data["request_account_name"] = this.request_account_name;
        data["class_name"] = this.class_name;
        data["approve_status_html"] = this.approve_status_html;
        data["login_account"] = this.login_account;
        data["moving"] = this.moving;
        data["type"] = this.type;
        data["day_number"] = this.day_number;
        return data;
    }

    clone(): HRM_Timesheet_Employee_Update_Timkeeping_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Timesheet_Employee_Update_Timkeeping_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Timesheet_Employee_Update_Timkeeping_ENTITY {
    id?: number;
    code?: string | undefined;
    checker?: string | undefined;
    checker_name?: string | undefined;
    employee_code?: string | undefined;
    employee_name?: string | undefined;
    position_code?: string | undefined;
    position_name?: string | undefined;
    branch_code?: string | undefined;
    branch_name?: string | undefined;
    department_code?: string | undefined;
    department_name?: string | undefined;
    start_datetime?: moment.Moment | undefined;
    start_relax_datetime?: moment.Moment | undefined;
    start_datetime_f?: string | undefined;
    start_relax_datetime_f?: string | undefined;
    approve_note?: string | undefined;
    start_datetime_f_en?: string | undefined;
    end_datetime?: moment.Moment | undefined;
    end_relax_datetime?: moment.Moment | undefined;
    end_datetime_f?: string | undefined;
    end_relax_datetime_f?: string | undefined;
    create_datetime_f?: string | undefined;
    end_datetime_f_en?: string | undefined;
    type_off_code?: string | undefined;
    type_off_name?: string | undefined;
    type_off_name_title?: string | undefined;
    employee_code_replace?: string | undefined;
    employee_name_replace?: string | undefined;
    phone_number?: string | undefined;
    user_code_approve?: string | undefined;
    user_name_approve?: string | undefined;
    status_code?: string | undefined;
    status_name?: string | undefined;
    notes?: string | undefined;
    reason?: string | undefined;
    max_day_number?: number | undefined;
    request_date?: moment.Moment | undefined;
    request_date_f?: string | undefined;
    follower?: string | undefined;
    approve_status?: string | undefined;
    approve_status_name?: string | undefined;
    request_account?: string | undefined;
    request_account_name?: string | undefined;
    class_name?: string | undefined;
    approve_status_html?: string | undefined;
    login_account?: string | undefined;
    moving?: string | undefined;
    type?: string | undefined;
    day_number?: number | undefined;
}

export class HRM_Holiday_ENTITY implements IHRM_Holiday_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    start_date?: moment.Moment | undefined;
    start_day?: number | undefined;
    start_month?: number | undefined;
    total_day?: number | undefined;
    start_date_f?: string | undefined;
    start_date_f_en?: string | undefined;
    end_date?: moment.Moment | undefined;
    start_date_lunar?: moment.Moment | undefined;
    end_date_lunar?: moment.Moment | undefined;
    is_lunar?: boolean | undefined;
    lunar_name?: string | undefined;
    end_day?: number | undefined;
    year?: number | undefined;
    end_month?: number | undefined;
    end_date_f_en?: string | undefined;
    end_date_f?: string | undefined;

    constructor(data?: IHRM_Holiday_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.start_date = _data["start_date"] ? moment.parseZone(_data["start_date"].toString()) : <any>undefined;
            this.start_day = _data["start_day"];
            this.start_month = _data["start_month"];
            this.total_day = _data["total_day"];
            this.start_date_f = _data["start_date_f"];
            this.start_date_f_en = _data["start_date_f_en"];
            this.end_date = _data["end_date"] ? moment.parseZone(_data["end_date"].toString()) : <any>undefined;
            this.start_date_lunar = _data["start_date_lunar"] ? moment.parseZone(_data["start_date_lunar"].toString()) : <any>undefined;
            this.end_date_lunar = _data["end_date_lunar"] ? moment.parseZone(_data["end_date_lunar"].toString()) : <any>undefined;
            this.is_lunar = _data["is_lunar"];
            this.lunar_name = _data["lunar_name"];
            this.end_day = _data["end_day"];
            this.year = _data["year"];
            this.end_month = _data["end_month"];
            this.end_date_f_en = _data["end_date_f_en"];
            this.end_date_f = _data["end_date_f"];
        }
    }

    static fromJS(data: any): HRM_Holiday_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Holiday_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["start_date"] = this.start_date ? this.start_date.toISOString(true) : <any>undefined;
        data["start_day"] = this.start_day;
        data["start_month"] = this.start_month;
        data["total_day"] = this.total_day;
        data["start_date_f"] = this.start_date_f;
        data["start_date_f_en"] = this.start_date_f_en;
        data["end_date"] = this.end_date ? this.end_date.toISOString(true) : <any>undefined;
        data["start_date_lunar"] = this.start_date_lunar ? this.start_date_lunar.toISOString(true) : <any>undefined;
        data["end_date_lunar"] = this.end_date_lunar ? this.end_date_lunar.toISOString(true) : <any>undefined;
        data["is_lunar"] = this.is_lunar;
        data["lunar_name"] = this.lunar_name;
        data["end_day"] = this.end_day;
        data["year"] = this.year;
        data["end_month"] = this.end_month;
        data["end_date_f_en"] = this.end_date_f_en;
        data["end_date_f"] = this.end_date_f;
        return data;
    }

    clone(): HRM_Holiday_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Holiday_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Holiday_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    start_date?: moment.Moment | undefined;
    start_day?: number | undefined;
    start_month?: number | undefined;
    total_day?: number | undefined;
    start_date_f?: string | undefined;
    start_date_f_en?: string | undefined;
    end_date?: moment.Moment | undefined;
    start_date_lunar?: moment.Moment | undefined;
    end_date_lunar?: moment.Moment | undefined;
    is_lunar?: boolean | undefined;
    lunar_name?: string | undefined;
    end_day?: number | undefined;
    year?: number | undefined;
    end_month?: number | undefined;
    end_date_f_en?: string | undefined;
    end_date_f?: string | undefined;
}

export class HRM_Report_Attendance_ENTITY implements IHRM_Report_Attendance_ENTITY {
    from_date?: moment.Moment | undefined;
    to_date?: moment.Moment | undefined;
    table_employees?: string | undefined;
    table_day?: string | undefined;
    table_attendance?: string | undefined;
    table_soon_late?: string | undefined;
    table_overtime?: string | undefined;
    mission_allowance?: string | undefined;
    table_update_timkeeping?: string | undefined;
    table_holiday?: string | undefined;
    table_checkin_out_soon_late?: string | undefined;
    user_login?: string | undefined;
    labour_contract_salary?: string | undefined;
    employee_labour_contract_appendix?: string | undefined;
    table_check_in_out_soon_late_regulation?: string | undefined;
    table_check_in_out_soon_late_detail?: string | undefined;

    constructor(data?: IHRM_Report_Attendance_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from_date = _data["from_date"] ? moment.parseZone(_data["from_date"].toString()) : <any>undefined;
            this.to_date = _data["to_date"] ? moment.parseZone(_data["to_date"].toString()) : <any>undefined;
            this.table_employees = _data["table_employees"];
            this.table_day = _data["table_day"];
            this.table_attendance = _data["table_attendance"];
            this.table_soon_late = _data["table_soon_late"];
            this.table_overtime = _data["table_overtime"];
            this.mission_allowance = _data["mission_allowance"];
            this.table_update_timkeeping = _data["table_update_timkeeping"];
            this.table_holiday = _data["table_holiday"];
            this.table_checkin_out_soon_late = _data["table_checkin_out_soon_late"];
            this.user_login = _data["user_login"];
            this.labour_contract_salary = _data["labour_contract_salary"];
            this.employee_labour_contract_appendix = _data["employee_labour_contract_appendix"];
            this.table_check_in_out_soon_late_regulation = _data["table_check_in_out_soon_late_regulation"];
            this.table_check_in_out_soon_late_detail = _data["table_check_in_out_soon_late_detail"];
        }
    }

    static fromJS(data: any): HRM_Report_Attendance_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Report_Attendance_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from_date"] = this.from_date ? this.from_date.toISOString(true) : <any>undefined;
        data["to_date"] = this.to_date ? this.to_date.toISOString(true) : <any>undefined;
        data["table_employees"] = this.table_employees;
        data["table_day"] = this.table_day;
        data["table_attendance"] = this.table_attendance;
        data["table_soon_late"] = this.table_soon_late;
        data["table_overtime"] = this.table_overtime;
        data["mission_allowance"] = this.mission_allowance;
        data["table_update_timkeeping"] = this.table_update_timkeeping;
        data["table_holiday"] = this.table_holiday;
        data["table_checkin_out_soon_late"] = this.table_checkin_out_soon_late;
        data["user_login"] = this.user_login;
        data["labour_contract_salary"] = this.labour_contract_salary;
        data["employee_labour_contract_appendix"] = this.employee_labour_contract_appendix;
        data["table_check_in_out_soon_late_regulation"] = this.table_check_in_out_soon_late_regulation;
        data["table_check_in_out_soon_late_detail"] = this.table_check_in_out_soon_late_detail;
        return data;
    }

    clone(): HRM_Report_Attendance_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Report_Attendance_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Report_Attendance_ENTITY {
    from_date?: moment.Moment | undefined;
    to_date?: moment.Moment | undefined;
    table_employees?: string | undefined;
    table_day?: string | undefined;
    table_attendance?: string | undefined;
    table_soon_late?: string | undefined;
    table_overtime?: string | undefined;
    mission_allowance?: string | undefined;
    table_update_timkeeping?: string | undefined;
    table_holiday?: string | undefined;
    table_checkin_out_soon_late?: string | undefined;
    user_login?: string | undefined;
    labour_contract_salary?: string | undefined;
    employee_labour_contract_appendix?: string | undefined;
    table_check_in_out_soon_late_regulation?: string | undefined;
    table_check_in_out_soon_late_detail?: string | undefined;
}

export class HRM_Timesheet_Employee_Overtime_Type_ENTITY implements IHRM_Timesheet_Employee_Overtime_Type_ENTITY {
    id?: number;
    code?: string | undefined;
    from_time?: number | undefined;
    to_time?: number | undefined;
    multiplier?: number | undefined;
    name?: string | undefined;

    constructor(data?: IHRM_Timesheet_Employee_Overtime_Type_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.from_time = _data["from_time"];
            this.to_time = _data["to_time"];
            this.multiplier = _data["multiplier"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HRM_Timesheet_Employee_Overtime_Type_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Timesheet_Employee_Overtime_Type_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["from_time"] = this.from_time;
        data["to_time"] = this.to_time;
        data["multiplier"] = this.multiplier;
        data["name"] = this.name;
        return data;
    }

    clone(): HRM_Timesheet_Employee_Overtime_Type_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Timesheet_Employee_Overtime_Type_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Timesheet_Employee_Overtime_Type_ENTITY {
    id?: number;
    code?: string | undefined;
    from_time?: number | undefined;
    to_time?: number | undefined;
    multiplier?: number | undefined;
    name?: string | undefined;
}

export class HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY implements IHRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY {
    id?: number;
    times?: number | undefined;
    code?: string | undefined;
    type?: string | undefined;
    minute?: number | undefined;
    work_day_minus?: number | undefined;
    branch_code?: string | undefined;
    xml?: string | undefined;

    constructor(data?: IHRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.times = _data["times"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.minute = _data["minute"];
            this.work_day_minus = _data["work_day_minus"];
            this.branch_code = _data["branch_code"];
            this.xml = _data["xml"];
        }
    }

    static fromJS(data: any): HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["times"] = this.times;
        data["code"] = this.code;
        data["type"] = this.type;
        data["minute"] = this.minute;
        data["work_day_minus"] = this.work_day_minus;
        data["branch_code"] = this.branch_code;
        data["xml"] = this.xml;
        return data;
    }

    clone(): HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY {
        const json = this.toJSON();
        let result = new HRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_TimeSheet_Employee_Soon_Late_Regulation_ENTITY {
    id?: number;
    times?: number | undefined;
    code?: string | undefined;
    type?: string | undefined;
    minute?: number | undefined;
    work_day_minus?: number | undefined;
    branch_code?: string | undefined;
    xml?: string | undefined;
}

export class CRYPTModel implements ICRYPTModel {
    textEncrypt?: string | undefined;
    textDecrypt?: string | undefined;
    textResult?: string | undefined;
    text?: string | undefined;

    constructor(data?: ICRYPTModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.textEncrypt = _data["textEncrypt"];
            this.textDecrypt = _data["textDecrypt"];
            this.textResult = _data["textResult"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CRYPTModel {
        data = typeof data === 'object' ? data : {};
        let result = new CRYPTModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["textEncrypt"] = this.textEncrypt;
        data["textDecrypt"] = this.textDecrypt;
        data["textResult"] = this.textResult;
        data["text"] = this.text;
        return data;
    }

    clone(): CRYPTModel {
        const json = this.toJSON();
        let result = new CRYPTModel();
        result.init(json);
        return result;
    }
}

export interface ICRYPTModel {
    textEncrypt?: string | undefined;
    textDecrypt?: string | undefined;
    textResult?: string | undefined;
    text?: string | undefined;
}

export class WMS_Warehouse_Goods_Issue_Detail_ENTITY implements IWMS_Warehouse_Goods_Issue_Detail_ENTITY {
    id?: number;
    product_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    status?: string | undefined;

    constructor(data?: IWMS_Warehouse_Goods_Issue_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.product_code = _data["product_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): WMS_Warehouse_Goods_Issue_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Warehouse_Goods_Issue_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["product_code"] = this.product_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["status"] = this.status;
        return data;
    }

    clone(): WMS_Warehouse_Goods_Issue_Detail_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Warehouse_Goods_Issue_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Warehouse_Goods_Issue_Detail_ENTITY {
    id?: number;
    product_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    status?: string | undefined;
}

export class WMS_Warehouse_Goods_Issue_ENTITY implements IWMS_Warehouse_Goods_Issue_ENTITY {
    id?: number;
    code?: string | undefined;
    date_export?: moment.Moment | undefined;
    goods_receipt_code?: string | undefined;
    delivery_partner_code?: string | undefined;
    total?: number | undefined;
    notes?: string | undefined;
    type_of_document?: string | undefined;
    date_modified?: moment.Moment | undefined;
    status?: string | undefined;
    wMS_Warehouse_Export_Details?: WMS_Warehouse_Goods_Issue_Detail_ENTITY[] | undefined;

    constructor(data?: IWMS_Warehouse_Goods_Issue_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.date_export = _data["date_export"] ? moment.parseZone(_data["date_export"].toString()) : <any>undefined;
            this.goods_receipt_code = _data["goods_receipt_code"];
            this.delivery_partner_code = _data["delivery_partner_code"];
            this.total = _data["total"];
            this.notes = _data["notes"];
            this.type_of_document = _data["type_of_document"];
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.status = _data["status"];
            if (Array.isArray(_data["wMS_Warehouse_Export_Details"])) {
                this.wMS_Warehouse_Export_Details = [] as any;
                for (let item of _data["wMS_Warehouse_Export_Details"])
                    this.wMS_Warehouse_Export_Details.push(WMS_Warehouse_Goods_Issue_Detail_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WMS_Warehouse_Goods_Issue_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Warehouse_Goods_Issue_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["date_export"] = this.date_export ? this.date_export.toISOString(true) : <any>undefined;
        data["goods_receipt_code"] = this.goods_receipt_code;
        data["delivery_partner_code"] = this.delivery_partner_code;
        data["total"] = this.total;
        data["notes"] = this.notes;
        data["type_of_document"] = this.type_of_document;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["status"] = this.status;
        if (Array.isArray(this.wMS_Warehouse_Export_Details)) {
            data["wMS_Warehouse_Export_Details"] = [];
            for (let item of this.wMS_Warehouse_Export_Details)
                data["wMS_Warehouse_Export_Details"].push(item.toJSON());
        }
        return data;
    }

    clone(): WMS_Warehouse_Goods_Issue_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Warehouse_Goods_Issue_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Warehouse_Goods_Issue_ENTITY {
    id?: number;
    code?: string | undefined;
    date_export?: moment.Moment | undefined;
    goods_receipt_code?: string | undefined;
    delivery_partner_code?: string | undefined;
    total?: number | undefined;
    notes?: string | undefined;
    type_of_document?: string | undefined;
    date_modified?: moment.Moment | undefined;
    status?: string | undefined;
    wMS_Warehouse_Export_Details?: WMS_Warehouse_Goods_Issue_Detail_ENTITY[] | undefined;
}

export class WMS_Warehouse_Goods_Receipt_Detail_ENTITY implements IWMS_Warehouse_Goods_Receipt_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    sku?: string | undefined;
    purchase_price?: number | undefined;
    quantity?: number | undefined;
    total?: number | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IWMS_Warehouse_Goods_Receipt_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.sku = _data["sku"];
            this.purchase_price = _data["purchase_price"];
            this.quantity = _data["quantity"];
            this.total = _data["total"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): WMS_Warehouse_Goods_Receipt_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Warehouse_Goods_Receipt_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["sku"] = this.sku;
        data["purchase_price"] = this.purchase_price;
        data["quantity"] = this.quantity;
        data["total"] = this.total;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["name"] = this.name;
        return data;
    }

    clone(): WMS_Warehouse_Goods_Receipt_Detail_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Warehouse_Goods_Receipt_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Warehouse_Goods_Receipt_Detail_ENTITY {
    id?: number;
    code?: string | undefined;
    sku?: string | undefined;
    purchase_price?: number | undefined;
    quantity?: number | undefined;
    total?: number | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    name?: string | undefined;
}

export class WMS_Warehouse_Goods_Receipt_ENTITY implements IWMS_Warehouse_Goods_Receipt_ENTITY {
    id?: number;
    code?: string | undefined;
    deliver?: string | undefined;
    date_import?: moment.Moment | undefined;
    date_import_f?: string | undefined;
    time_import?: moment.Moment | undefined;
    time_import_f?: string | undefined;
    goods_receipt_code?: string | undefined;
    delivery_partner_code?: string | undefined;
    delivery_partner_name?: string | undefined;
    total?: number | undefined;
    total_f?: string | undefined;
    notes?: string | undefined;
    type_of_document?: string | undefined;
    status_code?: string | undefined;
    status_name?: string | undefined;
    xml?: string | undefined;
    type?: string | undefined;
    filter?: string | undefined;
    date_modified?: moment.Moment | undefined;
    wMS_Warehouse_Goods_Receipt_Details?: WMS_Warehouse_Goods_Receipt_Detail_ENTITY[] | undefined;

    constructor(data?: IWMS_Warehouse_Goods_Receipt_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.deliver = _data["deliver"];
            this.date_import = _data["date_import"] ? moment.parseZone(_data["date_import"].toString()) : <any>undefined;
            this.date_import_f = _data["date_import_f"];
            this.time_import = _data["time_import"] ? moment.parseZone(_data["time_import"].toString()) : <any>undefined;
            this.time_import_f = _data["time_import_f"];
            this.goods_receipt_code = _data["goods_receipt_code"];
            this.delivery_partner_code = _data["delivery_partner_code"];
            this.delivery_partner_name = _data["delivery_partner_name"];
            this.total = _data["total"];
            this.total_f = _data["total_f"];
            this.notes = _data["notes"];
            this.type_of_document = _data["type_of_document"];
            this.status_code = _data["status_code"];
            this.status_name = _data["status_name"];
            this.xml = _data["xml"];
            this.type = _data["type"];
            this.filter = _data["filter"];
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            if (Array.isArray(_data["wMS_Warehouse_Goods_Receipt_Details"])) {
                this.wMS_Warehouse_Goods_Receipt_Details = [] as any;
                for (let item of _data["wMS_Warehouse_Goods_Receipt_Details"])
                    this.wMS_Warehouse_Goods_Receipt_Details.push(WMS_Warehouse_Goods_Receipt_Detail_ENTITY.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WMS_Warehouse_Goods_Receipt_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Warehouse_Goods_Receipt_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["deliver"] = this.deliver;
        data["date_import"] = this.date_import ? this.date_import.toISOString(true) : <any>undefined;
        data["date_import_f"] = this.date_import_f;
        data["time_import"] = this.time_import ? this.time_import.toISOString(true) : <any>undefined;
        data["time_import_f"] = this.time_import_f;
        data["goods_receipt_code"] = this.goods_receipt_code;
        data["delivery_partner_code"] = this.delivery_partner_code;
        data["delivery_partner_name"] = this.delivery_partner_name;
        data["total"] = this.total;
        data["total_f"] = this.total_f;
        data["notes"] = this.notes;
        data["type_of_document"] = this.type_of_document;
        data["status_code"] = this.status_code;
        data["status_name"] = this.status_name;
        data["xml"] = this.xml;
        data["type"] = this.type;
        data["filter"] = this.filter;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        if (Array.isArray(this.wMS_Warehouse_Goods_Receipt_Details)) {
            data["wMS_Warehouse_Goods_Receipt_Details"] = [];
            for (let item of this.wMS_Warehouse_Goods_Receipt_Details)
                data["wMS_Warehouse_Goods_Receipt_Details"].push(item.toJSON());
        }
        return data;
    }

    clone(): WMS_Warehouse_Goods_Receipt_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Warehouse_Goods_Receipt_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Warehouse_Goods_Receipt_ENTITY {
    id?: number;
    code?: string | undefined;
    deliver?: string | undefined;
    date_import?: moment.Moment | undefined;
    date_import_f?: string | undefined;
    time_import?: moment.Moment | undefined;
    time_import_f?: string | undefined;
    goods_receipt_code?: string | undefined;
    delivery_partner_code?: string | undefined;
    delivery_partner_name?: string | undefined;
    total?: number | undefined;
    total_f?: string | undefined;
    notes?: string | undefined;
    type_of_document?: string | undefined;
    status_code?: string | undefined;
    status_name?: string | undefined;
    xml?: string | undefined;
    type?: string | undefined;
    filter?: string | undefined;
    date_modified?: moment.Moment | undefined;
    wMS_Warehouse_Goods_Receipt_Details?: WMS_Warehouse_Goods_Receipt_Detail_ENTITY[] | undefined;
}

export class WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY implements IWMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    phone?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IWMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.phone = _data["phone"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["phone"] = this.phone;
        data["notes"] = this.notes;
        return data;
    }

    clone(): WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Warehouse_Goods_Receipt_Delivery_Partner_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    phone?: string | undefined;
    notes?: string | undefined;
}

export class WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY implements IWMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IWMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Warehouse_Goods_Receipt_Delivery_Partner_Type_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
}

export class WMS_Warehouse_ENTITY implements IWMS_Warehouse_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    adress?: string | undefined;
    phone?: string | undefined;
    symbol?: string | undefined;

    constructor(data?: IWMS_Warehouse_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.adress = _data["adress"];
            this.phone = _data["phone"];
            this.symbol = _data["symbol"];
        }
    }

    static fromJS(data: any): WMS_Warehouse_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Warehouse_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["adress"] = this.adress;
        data["phone"] = this.phone;
        data["symbol"] = this.symbol;
        return data;
    }

    clone(): WMS_Warehouse_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Warehouse_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Warehouse_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    adress?: string | undefined;
    phone?: string | undefined;
    symbol?: string | undefined;
}

export class WMS_Warehouse_SKU_ENTITY implements IWMS_Warehouse_SKU_ENTITY {
    id?: number;
    code?: string | undefined;
    symbol_brand?: string | undefined;
    notes_brand?: string | undefined;
    symbol_description?: string | undefined;
    notes_description?: string | undefined;
    symbol_time?: string | undefined;
    notes_time?: moment.Moment | undefined;
    notes_time_f?: string | undefined;
    symbol_warehouse?: string | undefined;
    notes_warehouse?: string | undefined;
    notes_warehouse_name?: string | undefined;
    symbol_size?: string | undefined;
    notes_size?: string | undefined;
    symbol_color?: string | undefined;
    notes_color?: string | undefined;
    type?: string | undefined;
    sku?: string | undefined;

    constructor(data?: IWMS_Warehouse_SKU_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.symbol_brand = _data["symbol_brand"];
            this.notes_brand = _data["notes_brand"];
            this.symbol_description = _data["symbol_description"];
            this.notes_description = _data["notes_description"];
            this.symbol_time = _data["symbol_time"];
            this.notes_time = _data["notes_time"] ? moment.parseZone(_data["notes_time"].toString()) : <any>undefined;
            this.notes_time_f = _data["notes_time_f"];
            this.symbol_warehouse = _data["symbol_warehouse"];
            this.notes_warehouse = _data["notes_warehouse"];
            this.notes_warehouse_name = _data["notes_warehouse_name"];
            this.symbol_size = _data["symbol_size"];
            this.notes_size = _data["notes_size"];
            this.symbol_color = _data["symbol_color"];
            this.notes_color = _data["notes_color"];
            this.type = _data["type"];
            this.sku = _data["sku"];
        }
    }

    static fromJS(data: any): WMS_Warehouse_SKU_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Warehouse_SKU_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["symbol_brand"] = this.symbol_brand;
        data["notes_brand"] = this.notes_brand;
        data["symbol_description"] = this.symbol_description;
        data["notes_description"] = this.notes_description;
        data["symbol_time"] = this.symbol_time;
        data["notes_time"] = this.notes_time ? this.notes_time.toISOString(true) : <any>undefined;
        data["notes_time_f"] = this.notes_time_f;
        data["symbol_warehouse"] = this.symbol_warehouse;
        data["notes_warehouse"] = this.notes_warehouse;
        data["notes_warehouse_name"] = this.notes_warehouse_name;
        data["symbol_size"] = this.symbol_size;
        data["notes_size"] = this.notes_size;
        data["symbol_color"] = this.symbol_color;
        data["notes_color"] = this.notes_color;
        data["type"] = this.type;
        data["sku"] = this.sku;
        return data;
    }

    clone(): WMS_Warehouse_SKU_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Warehouse_SKU_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Warehouse_SKU_ENTITY {
    id?: number;
    code?: string | undefined;
    symbol_brand?: string | undefined;
    notes_brand?: string | undefined;
    symbol_description?: string | undefined;
    notes_description?: string | undefined;
    symbol_time?: string | undefined;
    notes_time?: moment.Moment | undefined;
    notes_time_f?: string | undefined;
    symbol_warehouse?: string | undefined;
    notes_warehouse?: string | undefined;
    notes_warehouse_name?: string | undefined;
    symbol_size?: string | undefined;
    notes_size?: string | undefined;
    symbol_color?: string | undefined;
    notes_color?: string | undefined;
    type?: string | undefined;
    sku?: string | undefined;
}

export class Warranty_Laptop_ENTITY implements IWarranty_Laptop_ENTITY {
    id?: number;
    code?: string | undefined;
    task_code?: string | undefined;
    doc_number?: string | undefined;
    doc_date?: moment.Moment | undefined;
    doc_date_f?: string | undefined;
    customer_name?: string | undefined;
    customer_address?: string | undefined;
    customer_email?: string | undefined;
    customer_phone?: string | undefined;
    des_model?: string | undefined;
    des_cpu?: string | undefined;
    des_ram?: number | undefined;
    des_hdd?: number | undefined;
    des_hdd_unit?: string | undefined;
    des_ssd?: number | undefined;
    des_ssd_unit?: string | undefined;
    des_is_battery?: boolean | undefined;
    des_is_battery_f?: string | undefined;
    des_is_charger?: boolean | undefined;
    des_is_charger_f?: string | undefined;
    des_notes?: string | undefined;
    des_sevice_tag?: string | undefined;
    des_password?: string | undefined;
    des_password_bios?: string | undefined;
    machine_status?: string | undefined;
    sell_date?: moment.Moment | undefined;
    sell_date_f?: string | undefined;
    customer_return_date?: moment.Moment | undefined;
    customer_return_date_f?: string | undefined;
    customer_notes?: string | undefined;
    warranty_type?: string | undefined;
    accounting_notes?: string | undefined;
    in_task?: string | undefined;
    branch_name?: string | undefined;
    branch_code?: string | undefined;
    hour_done?: number | undefined;
    topic_code?: string | undefined;
    move_from_account?: string | undefined;
    move_to_account?: string | undefined;
    account_move_name?: string | undefined;
    executor_name?: string | undefined;
    account_move_hour_done?: number | undefined;
    account_move_logtime_description?: string | undefined;
    topic_name?: string | undefined;
    user_login?: string | undefined;
    task_content?: string | undefined;
    date_add_f?: string | undefined;
    logtime_description?: string | undefined;
    type?: string | undefined;
    doc_number_guess?: string | undefined;
    path?: string | undefined;
    type_name?: string | undefined;
    drop_index?: number | undefined;
    value_index?: number | undefined;
    des_lcd?: string | undefined;
    department_followers?: string | undefined;
    employee_code?: string | undefined;
    expiry_task_name?: string | undefined;
    expiry_task_name_s?: string | undefined;
    name?: string | undefined;
    template_report?: string | undefined;
    customer_name_contact_phone?: string | undefined;
    is_done?: boolean | undefined;
    doc_date_from?: moment.Moment | undefined;
    doc_date_to?: moment.Moment | undefined;
    sku?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    move_warehouse_from?: string | undefined;
    move_warehouse_to?: string | undefined;
    warehouse_code?: string | undefined;
    company_code?: string | undefined;
    goods_name?: string | undefined;
    voucher_no?: string | undefined;
    goods_symbol?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
    is_import_goods?: boolean | undefined;
    hRM_Project_Management_Task?: HRM_Project_Management_Task_ENTITY;

    constructor(data?: IWarranty_Laptop_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.task_code = _data["task_code"];
            this.doc_number = _data["doc_number"];
            this.doc_date = _data["doc_date"] ? moment.parseZone(_data["doc_date"].toString()) : <any>undefined;
            this.doc_date_f = _data["doc_date_f"];
            this.customer_name = _data["customer_name"];
            this.customer_address = _data["customer_address"];
            this.customer_email = _data["customer_email"];
            this.customer_phone = _data["customer_phone"];
            this.des_model = _data["des_model"];
            this.des_cpu = _data["des_cpu"];
            this.des_ram = _data["des_ram"];
            this.des_hdd = _data["des_hdd"];
            this.des_hdd_unit = _data["des_hdd_unit"];
            this.des_ssd = _data["des_ssd"];
            this.des_ssd_unit = _data["des_ssd_unit"];
            this.des_is_battery = _data["des_is_battery"];
            this.des_is_battery_f = _data["des_is_battery_f"];
            this.des_is_charger = _data["des_is_charger"];
            this.des_is_charger_f = _data["des_is_charger_f"];
            this.des_notes = _data["des_notes"];
            this.des_sevice_tag = _data["des_sevice_tag"];
            this.des_password = _data["des_password"];
            this.des_password_bios = _data["des_password_bios"];
            this.machine_status = _data["machine_status"];
            this.sell_date = _data["sell_date"] ? moment.parseZone(_data["sell_date"].toString()) : <any>undefined;
            this.sell_date_f = _data["sell_date_f"];
            this.customer_return_date = _data["customer_return_date"] ? moment.parseZone(_data["customer_return_date"].toString()) : <any>undefined;
            this.customer_return_date_f = _data["customer_return_date_f"];
            this.customer_notes = _data["customer_notes"];
            this.warranty_type = _data["warranty_type"];
            this.accounting_notes = _data["accounting_notes"];
            this.in_task = _data["in_task"];
            this.branch_name = _data["branch_name"];
            this.branch_code = _data["branch_code"];
            this.hour_done = _data["hour_done"];
            this.topic_code = _data["topic_code"];
            this.move_from_account = _data["move_from_account"];
            this.move_to_account = _data["move_to_account"];
            this.account_move_name = _data["account_move_name"];
            this.executor_name = _data["executor_name"];
            this.account_move_hour_done = _data["account_move_hour_done"];
            this.account_move_logtime_description = _data["account_move_logtime_description"];
            this.topic_name = _data["topic_name"];
            this.user_login = _data["user_login"];
            this.task_content = _data["task_content"];
            this.date_add_f = _data["date_add_f"];
            this.logtime_description = _data["logtime_description"];
            this.type = _data["type"];
            this.doc_number_guess = _data["doc_number_guess"];
            this.path = _data["path"];
            this.type_name = _data["type_name"];
            this.drop_index = _data["drop_index"];
            this.value_index = _data["value_index"];
            this.des_lcd = _data["des_lcd"];
            this.department_followers = _data["department_followers"];
            this.employee_code = _data["employee_code"];
            this.expiry_task_name = _data["expiry_task_name"];
            this.expiry_task_name_s = _data["expiry_task_name_s"];
            this.name = _data["name"];
            this.template_report = _data["template_report"];
            this.customer_name_contact_phone = _data["customer_name_contact_phone"];
            this.is_done = _data["is_done"];
            this.doc_date_from = _data["doc_date_from"] ? moment.parseZone(_data["doc_date_from"].toString()) : <any>undefined;
            this.doc_date_to = _data["doc_date_to"] ? moment.parseZone(_data["doc_date_to"].toString()) : <any>undefined;
            this.sku = _data["sku"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.move_warehouse_from = _data["move_warehouse_from"];
            this.move_warehouse_to = _data["move_warehouse_to"];
            this.warehouse_code = _data["warehouse_code"];
            this.company_code = _data["company_code"];
            this.goods_name = _data["goods_name"];
            this.voucher_no = _data["voucher_no"];
            this.goods_symbol = _data["goods_symbol"];
            this.voucher_year = _data["voucher_year"];
            this.language_id = _data["language_id"];
            this.is_import_goods = _data["is_import_goods"];
            this.hRM_Project_Management_Task = _data["hRM_Project_Management_Task"] ? HRM_Project_Management_Task_ENTITY.fromJS(_data["hRM_Project_Management_Task"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Warranty_Laptop_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Warranty_Laptop_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["task_code"] = this.task_code;
        data["doc_number"] = this.doc_number;
        data["doc_date"] = this.doc_date ? this.doc_date.toISOString(true) : <any>undefined;
        data["doc_date_f"] = this.doc_date_f;
        data["customer_name"] = this.customer_name;
        data["customer_address"] = this.customer_address;
        data["customer_email"] = this.customer_email;
        data["customer_phone"] = this.customer_phone;
        data["des_model"] = this.des_model;
        data["des_cpu"] = this.des_cpu;
        data["des_ram"] = this.des_ram;
        data["des_hdd"] = this.des_hdd;
        data["des_hdd_unit"] = this.des_hdd_unit;
        data["des_ssd"] = this.des_ssd;
        data["des_ssd_unit"] = this.des_ssd_unit;
        data["des_is_battery"] = this.des_is_battery;
        data["des_is_battery_f"] = this.des_is_battery_f;
        data["des_is_charger"] = this.des_is_charger;
        data["des_is_charger_f"] = this.des_is_charger_f;
        data["des_notes"] = this.des_notes;
        data["des_sevice_tag"] = this.des_sevice_tag;
        data["des_password"] = this.des_password;
        data["des_password_bios"] = this.des_password_bios;
        data["machine_status"] = this.machine_status;
        data["sell_date"] = this.sell_date ? this.sell_date.toISOString(true) : <any>undefined;
        data["sell_date_f"] = this.sell_date_f;
        data["customer_return_date"] = this.customer_return_date ? this.customer_return_date.toISOString(true) : <any>undefined;
        data["customer_return_date_f"] = this.customer_return_date_f;
        data["customer_notes"] = this.customer_notes;
        data["warranty_type"] = this.warranty_type;
        data["accounting_notes"] = this.accounting_notes;
        data["in_task"] = this.in_task;
        data["branch_name"] = this.branch_name;
        data["branch_code"] = this.branch_code;
        data["hour_done"] = this.hour_done;
        data["topic_code"] = this.topic_code;
        data["move_from_account"] = this.move_from_account;
        data["move_to_account"] = this.move_to_account;
        data["account_move_name"] = this.account_move_name;
        data["executor_name"] = this.executor_name;
        data["account_move_hour_done"] = this.account_move_hour_done;
        data["account_move_logtime_description"] = this.account_move_logtime_description;
        data["topic_name"] = this.topic_name;
        data["user_login"] = this.user_login;
        data["task_content"] = this.task_content;
        data["date_add_f"] = this.date_add_f;
        data["logtime_description"] = this.logtime_description;
        data["type"] = this.type;
        data["doc_number_guess"] = this.doc_number_guess;
        data["path"] = this.path;
        data["type_name"] = this.type_name;
        data["drop_index"] = this.drop_index;
        data["value_index"] = this.value_index;
        data["des_lcd"] = this.des_lcd;
        data["department_followers"] = this.department_followers;
        data["employee_code"] = this.employee_code;
        data["expiry_task_name"] = this.expiry_task_name;
        data["expiry_task_name_s"] = this.expiry_task_name_s;
        data["name"] = this.name;
        data["template_report"] = this.template_report;
        data["customer_name_contact_phone"] = this.customer_name_contact_phone;
        data["is_done"] = this.is_done;
        data["doc_date_from"] = this.doc_date_from ? this.doc_date_from.toISOString(true) : <any>undefined;
        data["doc_date_to"] = this.doc_date_to ? this.doc_date_to.toISOString(true) : <any>undefined;
        data["sku"] = this.sku;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["move_warehouse_from"] = this.move_warehouse_from;
        data["move_warehouse_to"] = this.move_warehouse_to;
        data["warehouse_code"] = this.warehouse_code;
        data["company_code"] = this.company_code;
        data["goods_name"] = this.goods_name;
        data["voucher_no"] = this.voucher_no;
        data["goods_symbol"] = this.goods_symbol;
        data["voucher_year"] = this.voucher_year;
        data["language_id"] = this.language_id;
        data["is_import_goods"] = this.is_import_goods;
        data["hRM_Project_Management_Task"] = this.hRM_Project_Management_Task ? this.hRM_Project_Management_Task.toJSON() : <any>undefined;
        return data;
    }

    clone(): Warranty_Laptop_ENTITY {
        const json = this.toJSON();
        let result = new Warranty_Laptop_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWarranty_Laptop_ENTITY {
    id?: number;
    code?: string | undefined;
    task_code?: string | undefined;
    doc_number?: string | undefined;
    doc_date?: moment.Moment | undefined;
    doc_date_f?: string | undefined;
    customer_name?: string | undefined;
    customer_address?: string | undefined;
    customer_email?: string | undefined;
    customer_phone?: string | undefined;
    des_model?: string | undefined;
    des_cpu?: string | undefined;
    des_ram?: number | undefined;
    des_hdd?: number | undefined;
    des_hdd_unit?: string | undefined;
    des_ssd?: number | undefined;
    des_ssd_unit?: string | undefined;
    des_is_battery?: boolean | undefined;
    des_is_battery_f?: string | undefined;
    des_is_charger?: boolean | undefined;
    des_is_charger_f?: string | undefined;
    des_notes?: string | undefined;
    des_sevice_tag?: string | undefined;
    des_password?: string | undefined;
    des_password_bios?: string | undefined;
    machine_status?: string | undefined;
    sell_date?: moment.Moment | undefined;
    sell_date_f?: string | undefined;
    customer_return_date?: moment.Moment | undefined;
    customer_return_date_f?: string | undefined;
    customer_notes?: string | undefined;
    warranty_type?: string | undefined;
    accounting_notes?: string | undefined;
    in_task?: string | undefined;
    branch_name?: string | undefined;
    branch_code?: string | undefined;
    hour_done?: number | undefined;
    topic_code?: string | undefined;
    move_from_account?: string | undefined;
    move_to_account?: string | undefined;
    account_move_name?: string | undefined;
    executor_name?: string | undefined;
    account_move_hour_done?: number | undefined;
    account_move_logtime_description?: string | undefined;
    topic_name?: string | undefined;
    user_login?: string | undefined;
    task_content?: string | undefined;
    date_add_f?: string | undefined;
    logtime_description?: string | undefined;
    type?: string | undefined;
    doc_number_guess?: string | undefined;
    path?: string | undefined;
    type_name?: string | undefined;
    drop_index?: number | undefined;
    value_index?: number | undefined;
    des_lcd?: string | undefined;
    department_followers?: string | undefined;
    employee_code?: string | undefined;
    expiry_task_name?: string | undefined;
    expiry_task_name_s?: string | undefined;
    name?: string | undefined;
    template_report?: string | undefined;
    customer_name_contact_phone?: string | undefined;
    is_done?: boolean | undefined;
    doc_date_from?: moment.Moment | undefined;
    doc_date_to?: moment.Moment | undefined;
    sku?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    move_warehouse_from?: string | undefined;
    move_warehouse_to?: string | undefined;
    warehouse_code?: string | undefined;
    company_code?: string | undefined;
    goods_name?: string | undefined;
    voucher_no?: string | undefined;
    goods_symbol?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
    is_import_goods?: boolean | undefined;
    hRM_Project_Management_Task?: HRM_Project_Management_Task_ENTITY;
}

export class Warranty_Laptop_Print_History_ENTITY implements IWarranty_Laptop_Print_History_ENTITY {
    id?: number;
    doc_code?: string | undefined;
    datetime_print?: moment.Moment | undefined;
    datetime_print_f?: string | undefined;
    account_print?: string | undefined;
    account_print_name?: string | undefined;
    banch_print?: string | undefined;
    branch_name?: string | undefined;
    banch_print_name?: string | undefined;
    link_file_print?: string | undefined;
    warranty_type?: string | undefined;
    warranty_type_name?: string | undefined;

    constructor(data?: IWarranty_Laptop_Print_History_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.doc_code = _data["doc_code"];
            this.datetime_print = _data["datetime_print"] ? moment.parseZone(_data["datetime_print"].toString()) : <any>undefined;
            this.datetime_print_f = _data["datetime_print_f"];
            this.account_print = _data["account_print"];
            this.account_print_name = _data["account_print_name"];
            this.banch_print = _data["banch_print"];
            this.branch_name = _data["branch_name"];
            this.banch_print_name = _data["banch_print_name"];
            this.link_file_print = _data["link_file_print"];
            this.warranty_type = _data["warranty_type"];
            this.warranty_type_name = _data["warranty_type_name"];
        }
    }

    static fromJS(data: any): Warranty_Laptop_Print_History_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Warranty_Laptop_Print_History_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["doc_code"] = this.doc_code;
        data["datetime_print"] = this.datetime_print ? this.datetime_print.toISOString(true) : <any>undefined;
        data["datetime_print_f"] = this.datetime_print_f;
        data["account_print"] = this.account_print;
        data["account_print_name"] = this.account_print_name;
        data["banch_print"] = this.banch_print;
        data["branch_name"] = this.branch_name;
        data["banch_print_name"] = this.banch_print_name;
        data["link_file_print"] = this.link_file_print;
        data["warranty_type"] = this.warranty_type;
        data["warranty_type_name"] = this.warranty_type_name;
        return data;
    }

    clone(): Warranty_Laptop_Print_History_ENTITY {
        const json = this.toJSON();
        let result = new Warranty_Laptop_Print_History_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWarranty_Laptop_Print_History_ENTITY {
    id?: number;
    doc_code?: string | undefined;
    datetime_print?: moment.Moment | undefined;
    datetime_print_f?: string | undefined;
    account_print?: string | undefined;
    account_print_name?: string | undefined;
    banch_print?: string | undefined;
    branch_name?: string | undefined;
    banch_print_name?: string | undefined;
    link_file_print?: string | undefined;
    warranty_type?: string | undefined;
    warranty_type_name?: string | undefined;
}

export class Warranty_Laptop_Log_Update_ENTITY implements IWarranty_Laptop_Log_Update_ENTITY {
    id?: number;
    code?: string | undefined;
    task_code?: string | undefined;
    doc_number?: string | undefined;
    doc_date?: moment.Moment | undefined;
    doc_date_f?: string | undefined;
    customer_name?: string | undefined;
    customer_address?: string | undefined;
    customer_email?: string | undefined;
    customer_phone?: string | undefined;
    des_model?: string | undefined;
    des_cpu?: string | undefined;
    des_ram?: number | undefined;
    des_ram_f?: string | undefined;
    des_hdd?: number | undefined;
    des_hdd_unit?: string | undefined;
    des_hdd_unit_f?: string | undefined;
    des_hdd_f?: string | undefined;
    des_ssd?: number | undefined;
    des_ssd_unit?: string | undefined;
    des_ssd_unit_f?: string | undefined;
    des_ssd_f?: string | undefined;
    des_is_battery?: boolean | undefined;
    des_is_battery_f?: string | undefined;
    des_is_charger?: boolean | undefined;
    des_is_charger_f?: string | undefined;
    des_notes?: string | undefined;
    des_sevice_tag?: string | undefined;
    des_password?: string | undefined;
    des_password_bios?: string | undefined;
    machine_status?: string | undefined;
    sell_date?: moment.Moment | undefined;
    sell_date_f?: string | undefined;
    warranty_type?: string | undefined;
    customer_return_date?: moment.Moment | undefined;
    customer_return_date_f?: string | undefined;
    customer_notes?: string | undefined;
    accounting_notes?: string | undefined;
    type?: string | undefined;
    des_lcd?: string | undefined;
    log_date_modified?: moment.Moment | undefined;
    log_date_modified_f?: string | undefined;
    log_account_modified?: string | undefined;
    log_account_modified_name?: string | undefined;

    constructor(data?: IWarranty_Laptop_Log_Update_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.task_code = _data["task_code"];
            this.doc_number = _data["doc_number"];
            this.doc_date = _data["doc_date"] ? moment.parseZone(_data["doc_date"].toString()) : <any>undefined;
            this.doc_date_f = _data["doc_date_f"];
            this.customer_name = _data["customer_name"];
            this.customer_address = _data["customer_address"];
            this.customer_email = _data["customer_email"];
            this.customer_phone = _data["customer_phone"];
            this.des_model = _data["des_model"];
            this.des_cpu = _data["des_cpu"];
            this.des_ram = _data["des_ram"];
            this.des_ram_f = _data["des_ram_f"];
            this.des_hdd = _data["des_hdd"];
            this.des_hdd_unit = _data["des_hdd_unit"];
            this.des_hdd_unit_f = _data["des_hdd_unit_f"];
            this.des_hdd_f = _data["des_hdd_f"];
            this.des_ssd = _data["des_ssd"];
            this.des_ssd_unit = _data["des_ssd_unit"];
            this.des_ssd_unit_f = _data["des_ssd_unit_f"];
            this.des_ssd_f = _data["des_ssd_f"];
            this.des_is_battery = _data["des_is_battery"];
            this.des_is_battery_f = _data["des_is_battery_f"];
            this.des_is_charger = _data["des_is_charger"];
            this.des_is_charger_f = _data["des_is_charger_f"];
            this.des_notes = _data["des_notes"];
            this.des_sevice_tag = _data["des_sevice_tag"];
            this.des_password = _data["des_password"];
            this.des_password_bios = _data["des_password_bios"];
            this.machine_status = _data["machine_status"];
            this.sell_date = _data["sell_date"] ? moment.parseZone(_data["sell_date"].toString()) : <any>undefined;
            this.sell_date_f = _data["sell_date_f"];
            this.warranty_type = _data["warranty_type"];
            this.customer_return_date = _data["customer_return_date"] ? moment.parseZone(_data["customer_return_date"].toString()) : <any>undefined;
            this.customer_return_date_f = _data["customer_return_date_f"];
            this.customer_notes = _data["customer_notes"];
            this.accounting_notes = _data["accounting_notes"];
            this.type = _data["type"];
            this.des_lcd = _data["des_lcd"];
            this.log_date_modified = _data["log_date_modified"] ? moment.parseZone(_data["log_date_modified"].toString()) : <any>undefined;
            this.log_date_modified_f = _data["log_date_modified_f"];
            this.log_account_modified = _data["log_account_modified"];
            this.log_account_modified_name = _data["log_account_modified_name"];
        }
    }

    static fromJS(data: any): Warranty_Laptop_Log_Update_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new Warranty_Laptop_Log_Update_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["task_code"] = this.task_code;
        data["doc_number"] = this.doc_number;
        data["doc_date"] = this.doc_date ? this.doc_date.toISOString(true) : <any>undefined;
        data["doc_date_f"] = this.doc_date_f;
        data["customer_name"] = this.customer_name;
        data["customer_address"] = this.customer_address;
        data["customer_email"] = this.customer_email;
        data["customer_phone"] = this.customer_phone;
        data["des_model"] = this.des_model;
        data["des_cpu"] = this.des_cpu;
        data["des_ram"] = this.des_ram;
        data["des_ram_f"] = this.des_ram_f;
        data["des_hdd"] = this.des_hdd;
        data["des_hdd_unit"] = this.des_hdd_unit;
        data["des_hdd_unit_f"] = this.des_hdd_unit_f;
        data["des_hdd_f"] = this.des_hdd_f;
        data["des_ssd"] = this.des_ssd;
        data["des_ssd_unit"] = this.des_ssd_unit;
        data["des_ssd_unit_f"] = this.des_ssd_unit_f;
        data["des_ssd_f"] = this.des_ssd_f;
        data["des_is_battery"] = this.des_is_battery;
        data["des_is_battery_f"] = this.des_is_battery_f;
        data["des_is_charger"] = this.des_is_charger;
        data["des_is_charger_f"] = this.des_is_charger_f;
        data["des_notes"] = this.des_notes;
        data["des_sevice_tag"] = this.des_sevice_tag;
        data["des_password"] = this.des_password;
        data["des_password_bios"] = this.des_password_bios;
        data["machine_status"] = this.machine_status;
        data["sell_date"] = this.sell_date ? this.sell_date.toISOString(true) : <any>undefined;
        data["sell_date_f"] = this.sell_date_f;
        data["warranty_type"] = this.warranty_type;
        data["customer_return_date"] = this.customer_return_date ? this.customer_return_date.toISOString(true) : <any>undefined;
        data["customer_return_date_f"] = this.customer_return_date_f;
        data["customer_notes"] = this.customer_notes;
        data["accounting_notes"] = this.accounting_notes;
        data["type"] = this.type;
        data["des_lcd"] = this.des_lcd;
        data["log_date_modified"] = this.log_date_modified ? this.log_date_modified.toISOString(true) : <any>undefined;
        data["log_date_modified_f"] = this.log_date_modified_f;
        data["log_account_modified"] = this.log_account_modified;
        data["log_account_modified_name"] = this.log_account_modified_name;
        return data;
    }

    clone(): Warranty_Laptop_Log_Update_ENTITY {
        const json = this.toJSON();
        let result = new Warranty_Laptop_Log_Update_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWarranty_Laptop_Log_Update_ENTITY {
    id?: number;
    code?: string | undefined;
    task_code?: string | undefined;
    doc_number?: string | undefined;
    doc_date?: moment.Moment | undefined;
    doc_date_f?: string | undefined;
    customer_name?: string | undefined;
    customer_address?: string | undefined;
    customer_email?: string | undefined;
    customer_phone?: string | undefined;
    des_model?: string | undefined;
    des_cpu?: string | undefined;
    des_ram?: number | undefined;
    des_ram_f?: string | undefined;
    des_hdd?: number | undefined;
    des_hdd_unit?: string | undefined;
    des_hdd_unit_f?: string | undefined;
    des_hdd_f?: string | undefined;
    des_ssd?: number | undefined;
    des_ssd_unit?: string | undefined;
    des_ssd_unit_f?: string | undefined;
    des_ssd_f?: string | undefined;
    des_is_battery?: boolean | undefined;
    des_is_battery_f?: string | undefined;
    des_is_charger?: boolean | undefined;
    des_is_charger_f?: string | undefined;
    des_notes?: string | undefined;
    des_sevice_tag?: string | undefined;
    des_password?: string | undefined;
    des_password_bios?: string | undefined;
    machine_status?: string | undefined;
    sell_date?: moment.Moment | undefined;
    sell_date_f?: string | undefined;
    warranty_type?: string | undefined;
    customer_return_date?: moment.Moment | undefined;
    customer_return_date_f?: string | undefined;
    customer_notes?: string | undefined;
    accounting_notes?: string | undefined;
    type?: string | undefined;
    des_lcd?: string | undefined;
    log_date_modified?: moment.Moment | undefined;
    log_date_modified_f?: string | undefined;
    log_account_modified?: string | undefined;
    log_account_modified_name?: string | undefined;
}

export class CAT_Warehouse_ENTITY implements ICAT_Warehouse_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    address?: string | undefined;
    symbol?: string | undefined;
    type?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Warehouse_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.address = _data["address"];
            this.symbol = _data["symbol"];
            this.type = _data["type"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Warehouse_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Warehouse_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["address"] = this.address;
        data["symbol"] = this.symbol;
        data["type"] = this.type;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Warehouse_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Warehouse_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Warehouse_ENTITY {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    address?: string | undefined;
    symbol?: string | undefined;
    type?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class CAT_Goods_ENTITY implements ICAT_Goods_ENTITY {
    id?: number;
    code?: string | undefined;
    goods_symbol?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    part_number?: string | undefined;
    unit_code?: string | undefined;
    unit_name?: string | undefined;
    inventory?: number | undefined;
    warehouse_account?: string | undefined;
    cogs_account?: string | undefined;
    revenue_account?: string | undefined;
    inventory_max?: number | undefined;
    inventory_min?: number | undefined;
    group_code?: string | undefined;
    group_name?: string | undefined;
    goods_type?: number | undefined;
    euc_group_code?: string | undefined;
    barcode?: string | undefined;
    mac_code?: string | undefined;
    warranty_month?: number | undefined;
    purchase_price_fc?: number | undefined;
    purchase_price?: number | undefined;
    selling_price_fc?: number | undefined;
    selling_price?: number | undefined;
    tax_code?: string | undefined;
    tax_name?: string | undefined;
    notes?: string | undefined;
    producer_code?: string | undefined;
    standard_code?: string | undefined;
    color_code?: string | undefined;
    time_goods_arrive?: number | undefined;
    amount_of_consumption?: number | undefined;
    additional1?: string | undefined;
    additional2?: string | undefined;
    additional3?: string | undefined;
    type?: string | undefined;
    serial?: string | undefined;
    is_multiple_unit?: boolean | undefined;
    inventory_valuation_method_code?: string | undefined;
    inventory_valuation_method_name?: string | undefined;
    is_inventory_management?: boolean | undefined;
    is_lot_management?: boolean | undefined;
    in_active?: boolean | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    sku?: string | undefined;
    model?: string | undefined;
    cpu?: string | undefined;
    ram?: number | undefined;
    hdd?: number | undefined;
    hdd_unit?: string | undefined;
    ssd?: number | undefined;
    ssd_unit?: string | undefined;
    lcd?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Goods_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.goods_symbol = _data["goods_symbol"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.part_number = _data["part_number"];
            this.unit_code = _data["unit_code"];
            this.unit_name = _data["unit_name"];
            this.inventory = _data["inventory"];
            this.warehouse_account = _data["warehouse_account"];
            this.cogs_account = _data["cogs_account"];
            this.revenue_account = _data["revenue_account"];
            this.inventory_max = _data["inventory_max"];
            this.inventory_min = _data["inventory_min"];
            this.group_code = _data["group_code"];
            this.group_name = _data["group_name"];
            this.goods_type = _data["goods_type"];
            this.euc_group_code = _data["euc_group_code"];
            this.barcode = _data["barcode"];
            this.mac_code = _data["mac_code"];
            this.warranty_month = _data["warranty_month"];
            this.purchase_price_fc = _data["purchase_price_fc"];
            this.purchase_price = _data["purchase_price"];
            this.selling_price_fc = _data["selling_price_fc"];
            this.selling_price = _data["selling_price"];
            this.tax_code = _data["tax_code"];
            this.tax_name = _data["tax_name"];
            this.notes = _data["notes"];
            this.producer_code = _data["producer_code"];
            this.standard_code = _data["standard_code"];
            this.color_code = _data["color_code"];
            this.time_goods_arrive = _data["time_goods_arrive"];
            this.amount_of_consumption = _data["amount_of_consumption"];
            this.additional1 = _data["additional1"];
            this.additional2 = _data["additional2"];
            this.additional3 = _data["additional3"];
            this.type = _data["type"];
            this.serial = _data["serial"];
            this.is_multiple_unit = _data["is_multiple_unit"];
            this.inventory_valuation_method_code = _data["inventory_valuation_method_code"];
            this.inventory_valuation_method_name = _data["inventory_valuation_method_name"];
            this.is_inventory_management = _data["is_inventory_management"];
            this.is_lot_management = _data["is_lot_management"];
            this.in_active = _data["in_active"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.sku = _data["sku"];
            this.model = _data["model"];
            this.cpu = _data["cpu"];
            this.ram = _data["ram"];
            this.hdd = _data["hdd"];
            this.hdd_unit = _data["hdd_unit"];
            this.ssd = _data["ssd"];
            this.ssd_unit = _data["ssd_unit"];
            this.lcd = _data["lcd"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Goods_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Goods_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["goods_symbol"] = this.goods_symbol;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["part_number"] = this.part_number;
        data["unit_code"] = this.unit_code;
        data["unit_name"] = this.unit_name;
        data["inventory"] = this.inventory;
        data["warehouse_account"] = this.warehouse_account;
        data["cogs_account"] = this.cogs_account;
        data["revenue_account"] = this.revenue_account;
        data["inventory_max"] = this.inventory_max;
        data["inventory_min"] = this.inventory_min;
        data["group_code"] = this.group_code;
        data["group_name"] = this.group_name;
        data["goods_type"] = this.goods_type;
        data["euc_group_code"] = this.euc_group_code;
        data["barcode"] = this.barcode;
        data["mac_code"] = this.mac_code;
        data["warranty_month"] = this.warranty_month;
        data["purchase_price_fc"] = this.purchase_price_fc;
        data["purchase_price"] = this.purchase_price;
        data["selling_price_fc"] = this.selling_price_fc;
        data["selling_price"] = this.selling_price;
        data["tax_code"] = this.tax_code;
        data["tax_name"] = this.tax_name;
        data["notes"] = this.notes;
        data["producer_code"] = this.producer_code;
        data["standard_code"] = this.standard_code;
        data["color_code"] = this.color_code;
        data["time_goods_arrive"] = this.time_goods_arrive;
        data["amount_of_consumption"] = this.amount_of_consumption;
        data["additional1"] = this.additional1;
        data["additional2"] = this.additional2;
        data["additional3"] = this.additional3;
        data["type"] = this.type;
        data["serial"] = this.serial;
        data["is_multiple_unit"] = this.is_multiple_unit;
        data["inventory_valuation_method_code"] = this.inventory_valuation_method_code;
        data["inventory_valuation_method_name"] = this.inventory_valuation_method_name;
        data["is_inventory_management"] = this.is_inventory_management;
        data["is_lot_management"] = this.is_lot_management;
        data["in_active"] = this.in_active;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["sku"] = this.sku;
        data["model"] = this.model;
        data["cpu"] = this.cpu;
        data["ram"] = this.ram;
        data["hdd"] = this.hdd;
        data["hdd_unit"] = this.hdd_unit;
        data["ssd"] = this.ssd;
        data["ssd_unit"] = this.ssd_unit;
        data["lcd"] = this.lcd;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Goods_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Goods_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Goods_ENTITY {
    id?: number;
    code?: string | undefined;
    goods_symbol?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    part_number?: string | undefined;
    unit_code?: string | undefined;
    unit_name?: string | undefined;
    inventory?: number | undefined;
    warehouse_account?: string | undefined;
    cogs_account?: string | undefined;
    revenue_account?: string | undefined;
    inventory_max?: number | undefined;
    inventory_min?: number | undefined;
    group_code?: string | undefined;
    group_name?: string | undefined;
    goods_type?: number | undefined;
    euc_group_code?: string | undefined;
    barcode?: string | undefined;
    mac_code?: string | undefined;
    warranty_month?: number | undefined;
    purchase_price_fc?: number | undefined;
    purchase_price?: number | undefined;
    selling_price_fc?: number | undefined;
    selling_price?: number | undefined;
    tax_code?: string | undefined;
    tax_name?: string | undefined;
    notes?: string | undefined;
    producer_code?: string | undefined;
    standard_code?: string | undefined;
    color_code?: string | undefined;
    time_goods_arrive?: number | undefined;
    amount_of_consumption?: number | undefined;
    additional1?: string | undefined;
    additional2?: string | undefined;
    additional3?: string | undefined;
    type?: string | undefined;
    serial?: string | undefined;
    is_multiple_unit?: boolean | undefined;
    inventory_valuation_method_code?: string | undefined;
    inventory_valuation_method_name?: string | undefined;
    is_inventory_management?: boolean | undefined;
    is_lot_management?: boolean | undefined;
    in_active?: boolean | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    sku?: string | undefined;
    model?: string | undefined;
    cpu?: string | undefined;
    ram?: number | undefined;
    hdd?: number | undefined;
    hdd_unit?: string | undefined;
    ssd?: number | undefined;
    ssd_unit?: string | undefined;
    lcd?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class CAT_Goods_Group_ENTITY implements ICAT_Goods_Group_ENTITY {
    code?: string | undefined;
    group_code?: string | undefined;
    code_master?: string | undefined;
    master_name?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    bobus?: number | undefined;
    type?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Goods_Group_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.group_code = _data["group_code"];
            this.code_master = _data["code_master"];
            this.master_name = _data["master_name"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.bobus = _data["bobus"];
            this.type = _data["type"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Goods_Group_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Goods_Group_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["group_code"] = this.group_code;
        data["code_master"] = this.code_master;
        data["master_name"] = this.master_name;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["bobus"] = this.bobus;
        data["type"] = this.type;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Goods_Group_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Goods_Group_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Goods_Group_ENTITY {
    code?: string | undefined;
    group_code?: string | undefined;
    code_master?: string | undefined;
    master_name?: string | undefined;
    name?: string | undefined;
    name2?: string | undefined;
    bobus?: number | undefined;
    type?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class CAT_Goods_Unit_ENTITY implements ICAT_Goods_Unit_ENTITY {
    id?: number;
    code?: string | undefined;
    goods_code?: string | undefined;
    conversion_coefficient?: number | undefined;
    unit?: string | undefined;
    unit_conversion_factor_name?: string | undefined;
    length?: number | undefined;
    width?: number | undefined;
    quantitative?: number | undefined;
    type?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Goods_Unit_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.goods_code = _data["goods_code"];
            this.conversion_coefficient = _data["conversion_coefficient"];
            this.unit = _data["unit"];
            this.unit_conversion_factor_name = _data["unit_conversion_factor_name"];
            this.length = _data["length"];
            this.width = _data["width"];
            this.quantitative = _data["quantitative"];
            this.type = _data["type"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Goods_Unit_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Goods_Unit_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["goods_code"] = this.goods_code;
        data["conversion_coefficient"] = this.conversion_coefficient;
        data["unit"] = this.unit;
        data["unit_conversion_factor_name"] = this.unit_conversion_factor_name;
        data["length"] = this.length;
        data["width"] = this.width;
        data["quantitative"] = this.quantitative;
        data["type"] = this.type;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Goods_Unit_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Goods_Unit_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Goods_Unit_ENTITY {
    id?: number;
    code?: string | undefined;
    goods_code?: string | undefined;
    conversion_coefficient?: number | undefined;
    unit?: string | undefined;
    unit_conversion_factor_name?: string | undefined;
    length?: number | undefined;
    width?: number | undefined;
    quantitative?: number | undefined;
    type?: string | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class CAT_Goods_Unit_Conversion_Factor_ENTITY implements ICAT_Goods_Unit_Conversion_Factor_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    unit_code?: string | undefined;
    unit_name?: string | undefined;
    unit_code_conversion_factor?: string | undefined;
    unit_name_conversion_factor?: string | undefined;
    exchange_rate?: number | undefined;
    is_active?: boolean | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: ICAT_Goods_Unit_Conversion_Factor_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.goods_code = _data["goods_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.unit_code = _data["unit_code"];
            this.unit_name = _data["unit_name"];
            this.unit_code_conversion_factor = _data["unit_code_conversion_factor"];
            this.unit_name_conversion_factor = _data["unit_name_conversion_factor"];
            this.exchange_rate = _data["exchange_rate"];
            this.is_active = _data["is_active"];
            this.language_id = _data["language_id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): CAT_Goods_Unit_Conversion_Factor_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Goods_Unit_Conversion_Factor_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["goods_code"] = this.goods_code;
        data["goods_symbol"] = this.goods_symbol;
        data["unit_code"] = this.unit_code;
        data["unit_name"] = this.unit_name;
        data["unit_code_conversion_factor"] = this.unit_code_conversion_factor;
        data["unit_name_conversion_factor"] = this.unit_name_conversion_factor;
        data["exchange_rate"] = this.exchange_rate;
        data["is_active"] = this.is_active;
        data["language_id"] = this.language_id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): CAT_Goods_Unit_Conversion_Factor_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Goods_Unit_Conversion_Factor_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Goods_Unit_Conversion_Factor_ENTITY {
    id?: number;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    unit_code?: string | undefined;
    unit_name?: string | undefined;
    unit_code_conversion_factor?: string | undefined;
    unit_name_conversion_factor?: string | undefined;
    exchange_rate?: number | undefined;
    is_active?: boolean | undefined;
    language_id?: number | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class CAT_Goods_Serial_ENTITY implements ICAT_Goods_Serial_ENTITY {
    id?: number;
    code?: string | undefined;
    sku?: string | undefined;
    serial?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    goods_code?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    model?: string | undefined;
    cpu?: string | undefined;
    ram?: number | undefined;
    hdd?: number | undefined;
    hdd_unit?: string | undefined;
    ssd?: number | undefined;
    ssd_unit?: string | undefined;
    lcd?: string | undefined;

    constructor(data?: ICAT_Goods_Serial_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.sku = _data["sku"];
            this.serial = _data["serial"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.goods_code = _data["goods_code"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.model = _data["model"];
            this.cpu = _data["cpu"];
            this.ram = _data["ram"];
            this.hdd = _data["hdd"];
            this.hdd_unit = _data["hdd_unit"];
            this.ssd = _data["ssd"];
            this.ssd_unit = _data["ssd_unit"];
            this.lcd = _data["lcd"];
        }
    }

    static fromJS(data: any): CAT_Goods_Serial_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new CAT_Goods_Serial_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["sku"] = this.sku;
        data["serial"] = this.serial;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["goods_code"] = this.goods_code;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["model"] = this.model;
        data["cpu"] = this.cpu;
        data["ram"] = this.ram;
        data["hdd"] = this.hdd;
        data["hdd_unit"] = this.hdd_unit;
        data["ssd"] = this.ssd;
        data["ssd_unit"] = this.ssd_unit;
        data["lcd"] = this.lcd;
        return data;
    }

    clone(): CAT_Goods_Serial_ENTITY {
        const json = this.toJSON();
        let result = new CAT_Goods_Serial_ENTITY();
        result.init(json);
        return result;
    }
}

export interface ICAT_Goods_Serial_ENTITY {
    id?: number;
    code?: string | undefined;
    sku?: string | undefined;
    serial?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    goods_code?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    model?: string | undefined;
    cpu?: string | undefined;
    ram?: number | undefined;
    hdd?: number | undefined;
    hdd_unit?: string | undefined;
    ssd?: number | undefined;
    ssd_unit?: string | undefined;
    lcd?: string | undefined;
}

export class WMS_Report_Inventory_Movement_ENTITY implements IWMS_Report_Inventory_Movement_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    code?: string | undefined;
    group_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    goods_unit_name?: string | undefined;
    ob_inventory_quantity?: number | undefined;
    ob_inventory_quantity_start?: number | undefined;
    ob_inventory_quantity_end?: number | undefined;
    initial_balance_end?: number | undefined;
    initial_balance_start?: number | undefined;
    initial_balance?: number | undefined;
    quantity_input?: number | undefined;
    quantity_input_start?: number | undefined;
    quantity_input_end?: number | undefined;
    arise_debit?: number | undefined;
    arise_debit_start?: number | undefined;
    arise_debit_end?: number | undefined;
    quantity_export?: number | undefined;
    quantity_export_start?: number | undefined;
    quantity_export_end?: number | undefined;
    arise_credit?: number | undefined;
    arise_credit_start?: number | undefined;
    arise_credit_end?: number | undefined;
    ending_inventory_quantity?: number | undefined;
    ending_inventory_quantity_start?: number | undefined;
    ending_inventory_quantity_end?: number | undefined;
    ending_balance?: number | undefined;
    ending_balance_start?: number | undefined;
    ending_balance_end?: number | undefined;
    group_symbol?: string | undefined;
    group_name?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_Inventory_Movement_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.group_code = _data["group_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.goods_unit_name = _data["goods_unit_name"];
            this.ob_inventory_quantity = _data["ob_inventory_quantity"];
            this.ob_inventory_quantity_start = _data["ob_inventory_quantity_start"];
            this.ob_inventory_quantity_end = _data["ob_inventory_quantity_end"];
            this.initial_balance_end = _data["initial_balance_end"];
            this.initial_balance_start = _data["initial_balance_start"];
            this.initial_balance = _data["initial_balance"];
            this.quantity_input = _data["quantity_input"];
            this.quantity_input_start = _data["quantity_input_start"];
            this.quantity_input_end = _data["quantity_input_end"];
            this.arise_debit = _data["arise_debit"];
            this.arise_debit_start = _data["arise_debit_start"];
            this.arise_debit_end = _data["arise_debit_end"];
            this.quantity_export = _data["quantity_export"];
            this.quantity_export_start = _data["quantity_export_start"];
            this.quantity_export_end = _data["quantity_export_end"];
            this.arise_credit = _data["arise_credit"];
            this.arise_credit_start = _data["arise_credit_start"];
            this.arise_credit_end = _data["arise_credit_end"];
            this.ending_inventory_quantity = _data["ending_inventory_quantity"];
            this.ending_inventory_quantity_start = _data["ending_inventory_quantity_start"];
            this.ending_inventory_quantity_end = _data["ending_inventory_quantity_end"];
            this.ending_balance = _data["ending_balance"];
            this.ending_balance_start = _data["ending_balance_start"];
            this.ending_balance_end = _data["ending_balance_end"];
            this.group_symbol = _data["group_symbol"];
            this.group_name = _data["group_name"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_Inventory_Movement_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Inventory_Movement_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["group_code"] = this.group_code;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["goods_unit_name"] = this.goods_unit_name;
        data["ob_inventory_quantity"] = this.ob_inventory_quantity;
        data["ob_inventory_quantity_start"] = this.ob_inventory_quantity_start;
        data["ob_inventory_quantity_end"] = this.ob_inventory_quantity_end;
        data["initial_balance_end"] = this.initial_balance_end;
        data["initial_balance_start"] = this.initial_balance_start;
        data["initial_balance"] = this.initial_balance;
        data["quantity_input"] = this.quantity_input;
        data["quantity_input_start"] = this.quantity_input_start;
        data["quantity_input_end"] = this.quantity_input_end;
        data["arise_debit"] = this.arise_debit;
        data["arise_debit_start"] = this.arise_debit_start;
        data["arise_debit_end"] = this.arise_debit_end;
        data["quantity_export"] = this.quantity_export;
        data["quantity_export_start"] = this.quantity_export_start;
        data["quantity_export_end"] = this.quantity_export_end;
        data["arise_credit"] = this.arise_credit;
        data["arise_credit_start"] = this.arise_credit_start;
        data["arise_credit_end"] = this.arise_credit_end;
        data["ending_inventory_quantity"] = this.ending_inventory_quantity;
        data["ending_inventory_quantity_start"] = this.ending_inventory_quantity_start;
        data["ending_inventory_quantity_end"] = this.ending_inventory_quantity_end;
        data["ending_balance"] = this.ending_balance;
        data["ending_balance_start"] = this.ending_balance_start;
        data["ending_balance_end"] = this.ending_balance_end;
        data["group_symbol"] = this.group_symbol;
        data["group_name"] = this.group_name;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_Inventory_Movement_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Inventory_Movement_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Inventory_Movement_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    code?: string | undefined;
    group_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    goods_unit_name?: string | undefined;
    ob_inventory_quantity?: number | undefined;
    ob_inventory_quantity_start?: number | undefined;
    ob_inventory_quantity_end?: number | undefined;
    initial_balance_end?: number | undefined;
    initial_balance_start?: number | undefined;
    initial_balance?: number | undefined;
    quantity_input?: number | undefined;
    quantity_input_start?: number | undefined;
    quantity_input_end?: number | undefined;
    arise_debit?: number | undefined;
    arise_debit_start?: number | undefined;
    arise_debit_end?: number | undefined;
    quantity_export?: number | undefined;
    quantity_export_start?: number | undefined;
    quantity_export_end?: number | undefined;
    arise_credit?: number | undefined;
    arise_credit_start?: number | undefined;
    arise_credit_end?: number | undefined;
    ending_inventory_quantity?: number | undefined;
    ending_inventory_quantity_start?: number | undefined;
    ending_inventory_quantity_end?: number | undefined;
    ending_balance?: number | undefined;
    ending_balance_start?: number | undefined;
    ending_balance_end?: number | undefined;
    group_symbol?: string | undefined;
    group_name?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Report_Inventory_ENTITY implements IWMS_Report_Inventory_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    code?: string | undefined;
    group_code?: string | undefined;
    warehouse_symbol?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_name?: string | undefined;
    goods_symbol?: string | undefined;
    goods_serial?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    goods_unit_name?: string | undefined;
    ob_inventory_quantity?: number | undefined;
    ob_inventory_quantity_start?: number | undefined;
    ob_inventory_quantity_end?: number | undefined;
    initial_balance_end?: number | undefined;
    initial_balance_start?: number | undefined;
    initial_balance?: number | undefined;
    quantity_input?: number | undefined;
    quantity_input_start?: number | undefined;
    quantity_input_end?: number | undefined;
    arise_debit?: number | undefined;
    arise_debit_start?: number | undefined;
    arise_debit_end?: number | undefined;
    quantity_export?: number | undefined;
    inventory_quantity?: number | undefined;
    quantity_export_start?: number | undefined;
    quantity_export_end?: number | undefined;
    arise_credit?: number | undefined;
    arise_credit_start?: number | undefined;
    arise_credit_end?: number | undefined;
    ending_inventory_quantity?: number | undefined;
    ending_inventory_quantity_start?: number | undefined;
    ending_inventory_quantity_end?: number | undefined;
    ending_balance?: number | undefined;
    ending_balance_start?: number | undefined;
    ending_balance_end?: number | undefined;
    group_symbol?: string | undefined;
    group_name?: string | undefined;
    sku?: string | undefined;
    serial?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_Inventory_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.group_code = _data["group_code"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.warehouse_code = _data["warehouse_code"];
            this.warehouse_name = _data["warehouse_name"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_serial = _data["goods_serial"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.goods_unit_name = _data["goods_unit_name"];
            this.ob_inventory_quantity = _data["ob_inventory_quantity"];
            this.ob_inventory_quantity_start = _data["ob_inventory_quantity_start"];
            this.ob_inventory_quantity_end = _data["ob_inventory_quantity_end"];
            this.initial_balance_end = _data["initial_balance_end"];
            this.initial_balance_start = _data["initial_balance_start"];
            this.initial_balance = _data["initial_balance"];
            this.quantity_input = _data["quantity_input"];
            this.quantity_input_start = _data["quantity_input_start"];
            this.quantity_input_end = _data["quantity_input_end"];
            this.arise_debit = _data["arise_debit"];
            this.arise_debit_start = _data["arise_debit_start"];
            this.arise_debit_end = _data["arise_debit_end"];
            this.quantity_export = _data["quantity_export"];
            this.inventory_quantity = _data["inventory_quantity"];
            this.quantity_export_start = _data["quantity_export_start"];
            this.quantity_export_end = _data["quantity_export_end"];
            this.arise_credit = _data["arise_credit"];
            this.arise_credit_start = _data["arise_credit_start"];
            this.arise_credit_end = _data["arise_credit_end"];
            this.ending_inventory_quantity = _data["ending_inventory_quantity"];
            this.ending_inventory_quantity_start = _data["ending_inventory_quantity_start"];
            this.ending_inventory_quantity_end = _data["ending_inventory_quantity_end"];
            this.ending_balance = _data["ending_balance"];
            this.ending_balance_start = _data["ending_balance_start"];
            this.ending_balance_end = _data["ending_balance_end"];
            this.group_symbol = _data["group_symbol"];
            this.group_name = _data["group_name"];
            this.sku = _data["sku"];
            this.serial = _data["serial"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_Inventory_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Inventory_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["group_code"] = this.group_code;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["warehouse_code"] = this.warehouse_code;
        data["warehouse_name"] = this.warehouse_name;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_serial"] = this.goods_serial;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["goods_unit_name"] = this.goods_unit_name;
        data["ob_inventory_quantity"] = this.ob_inventory_quantity;
        data["ob_inventory_quantity_start"] = this.ob_inventory_quantity_start;
        data["ob_inventory_quantity_end"] = this.ob_inventory_quantity_end;
        data["initial_balance_end"] = this.initial_balance_end;
        data["initial_balance_start"] = this.initial_balance_start;
        data["initial_balance"] = this.initial_balance;
        data["quantity_input"] = this.quantity_input;
        data["quantity_input_start"] = this.quantity_input_start;
        data["quantity_input_end"] = this.quantity_input_end;
        data["arise_debit"] = this.arise_debit;
        data["arise_debit_start"] = this.arise_debit_start;
        data["arise_debit_end"] = this.arise_debit_end;
        data["quantity_export"] = this.quantity_export;
        data["inventory_quantity"] = this.inventory_quantity;
        data["quantity_export_start"] = this.quantity_export_start;
        data["quantity_export_end"] = this.quantity_export_end;
        data["arise_credit"] = this.arise_credit;
        data["arise_credit_start"] = this.arise_credit_start;
        data["arise_credit_end"] = this.arise_credit_end;
        data["ending_inventory_quantity"] = this.ending_inventory_quantity;
        data["ending_inventory_quantity_start"] = this.ending_inventory_quantity_start;
        data["ending_inventory_quantity_end"] = this.ending_inventory_quantity_end;
        data["ending_balance"] = this.ending_balance;
        data["ending_balance_start"] = this.ending_balance_start;
        data["ending_balance_end"] = this.ending_balance_end;
        data["group_symbol"] = this.group_symbol;
        data["group_name"] = this.group_name;
        data["sku"] = this.sku;
        data["serial"] = this.serial;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_Inventory_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Inventory_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Inventory_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    code?: string | undefined;
    group_code?: string | undefined;
    warehouse_symbol?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_name?: string | undefined;
    goods_symbol?: string | undefined;
    goods_serial?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    goods_unit_name?: string | undefined;
    ob_inventory_quantity?: number | undefined;
    ob_inventory_quantity_start?: number | undefined;
    ob_inventory_quantity_end?: number | undefined;
    initial_balance_end?: number | undefined;
    initial_balance_start?: number | undefined;
    initial_balance?: number | undefined;
    quantity_input?: number | undefined;
    quantity_input_start?: number | undefined;
    quantity_input_end?: number | undefined;
    arise_debit?: number | undefined;
    arise_debit_start?: number | undefined;
    arise_debit_end?: number | undefined;
    quantity_export?: number | undefined;
    inventory_quantity?: number | undefined;
    quantity_export_start?: number | undefined;
    quantity_export_end?: number | undefined;
    arise_credit?: number | undefined;
    arise_credit_start?: number | undefined;
    arise_credit_end?: number | undefined;
    ending_inventory_quantity?: number | undefined;
    ending_inventory_quantity_start?: number | undefined;
    ending_inventory_quantity_end?: number | undefined;
    ending_balance?: number | undefined;
    ending_balance_start?: number | undefined;
    ending_balance_end?: number | undefined;
    group_symbol?: string | undefined;
    group_name?: string | undefined;
    sku?: string | undefined;
    serial?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Prepaid_Expense_Allocation_ENTITY implements IWMS_Prepaid_Expense_Allocation_ENTITY {
    id?: number;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    notes?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    i45_m_code?: string | undefined;
    i45_d_code?: string | undefined;
    quantity?: number | undefined;
    damaged_quantity?: number | undefined;
    damaged_quantity_before?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    expense_account?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    allocation_period?: number | undefined;
    period_number?: number | undefined;
    allocation?: string | undefined;
    language_id?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Prepaid_Expense_Allocation_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.notes = _data["notes"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.i45_m_code = _data["i45_m_code"];
            this.i45_d_code = _data["i45_d_code"];
            this.quantity = _data["quantity"];
            this.damaged_quantity = _data["damaged_quantity"];
            this.damaged_quantity_before = _data["damaged_quantity_before"];
            this.arise = _data["arise"];
            this.debitor_account = _data["debitor_account"];
            this.expense_account = _data["expense_account"];
            this.goods_code = _data["goods_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.department_code = _data["department_code"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.allocation_period = _data["allocation_period"];
            this.period_number = _data["period_number"];
            this.allocation = _data["allocation"];
            this.language_id = _data["language_id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Prepaid_Expense_Allocation_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Prepaid_Expense_Allocation_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["notes"] = this.notes;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["i45_m_code"] = this.i45_m_code;
        data["i45_d_code"] = this.i45_d_code;
        data["quantity"] = this.quantity;
        data["damaged_quantity"] = this.damaged_quantity;
        data["damaged_quantity_before"] = this.damaged_quantity_before;
        data["arise"] = this.arise;
        data["debitor_account"] = this.debitor_account;
        data["expense_account"] = this.expense_account;
        data["goods_code"] = this.goods_code;
        data["goods_symbol"] = this.goods_symbol;
        data["department_code"] = this.department_code;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["allocation_period"] = this.allocation_period;
        data["period_number"] = this.period_number;
        data["allocation"] = this.allocation;
        data["language_id"] = this.language_id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Prepaid_Expense_Allocation_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Prepaid_Expense_Allocation_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Prepaid_Expense_Allocation_ENTITY {
    id?: number;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    notes?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    i45_m_code?: string | undefined;
    i45_d_code?: string | undefined;
    quantity?: number | undefined;
    damaged_quantity?: number | undefined;
    damaged_quantity_before?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    expense_account?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    allocation_period?: number | undefined;
    period_number?: number | undefined;
    allocation?: string | undefined;
    language_id?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Report_I45_ENTITY implements IWMS_Report_I45_ENTITY {
    code?: string | undefined;
    numerical_order?: number | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    total_money_start?: number | undefined;
    total_money_end?: number | undefined;
    is_in_progress?: boolean | undefined;
    is_cost_allocation?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    goods_group?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    unit_name?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    allocation_period?: number | undefined;
    period_number?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    expense_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    case_name?: string | undefined;
    department_code?: string | undefined;
    goods_code1?: string | undefined;
    construction_id?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    name?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_I45_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.numerical_order = _data["numerical_order"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.profession_code = _data["profession_code"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_symbol = _data["code_symbol"];
            this.exchange_rate = _data["exchange_rate"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.total_money_start = _data["total_money_start"];
            this.total_money_end = _data["total_money_end"];
            this.is_in_progress = _data["is_in_progress"];
            this.is_cost_allocation = _data["is_cost_allocation"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.master_code = _data["master_code"];
            this.goods_code = _data["goods_code"];
            this.goods_group = _data["goods_group"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.unit_name = _data["unit_name"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.allocation_period = _data["allocation_period"];
            this.period_number = _data["period_number"];
            this.creditor_account = _data["creditor_account"];
            this.debitor_account = _data["debitor_account"];
            this.expense_account = _data["expense_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.case_name = _data["case_name"];
            this.department_code = _data["department_code"];
            this.goods_code1 = _data["goods_code1"];
            this.construction_id = _data["construction_id"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.name = _data["name"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_I45_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_I45_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["numerical_order"] = this.numerical_order;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["profession_code"] = this.profession_code;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_symbol"] = this.code_symbol;
        data["exchange_rate"] = this.exchange_rate;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["total_money_start"] = this.total_money_start;
        data["total_money_end"] = this.total_money_end;
        data["is_in_progress"] = this.is_in_progress;
        data["is_cost_allocation"] = this.is_cost_allocation;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["master_code"] = this.master_code;
        data["goods_code"] = this.goods_code;
        data["goods_group"] = this.goods_group;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["unit_name"] = this.unit_name;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["allocation_period"] = this.allocation_period;
        data["period_number"] = this.period_number;
        data["creditor_account"] = this.creditor_account;
        data["debitor_account"] = this.debitor_account;
        data["expense_account"] = this.expense_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["case_name"] = this.case_name;
        data["department_code"] = this.department_code;
        data["goods_code1"] = this.goods_code1;
        data["construction_id"] = this.construction_id;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["name"] = this.name;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_I45_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_I45_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_I45_ENTITY {
    code?: string | undefined;
    numerical_order?: number | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_symbol?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    total_money_start?: number | undefined;
    total_money_end?: number | undefined;
    is_in_progress?: boolean | undefined;
    is_cost_allocation?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    goods_group?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    unit_name?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    allocation_period?: number | undefined;
    period_number?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    expense_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    case_name?: string | undefined;
    department_code?: string | undefined;
    goods_code1?: string | undefined;
    construction_id?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    name?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Report_I44_ENTITY implements IWMS_Report_I44_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    id?: number;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    numerical_order?: number | undefined;
    warehouse_out_code?: string | undefined;
    warehouse_out_name?: string | undefined;
    warehouse_in_code?: string | undefined;
    warehouse_in_name?: string | undefined;
    customer_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_44d?: string | undefined;
    voucher_year?: number | undefined;
    approve?: boolean | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    unit_name?: string | undefined;
    warehouse_out_symbol?: string | undefined;
    warehouse_in_symbol?: string | undefined;
    quantity?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    goods_code?: string | undefined;
    group_code?: string | undefined;
    price?: number | undefined;
    price_fc?: number | undefined;
    arise?: number | undefined;
    arise_fc?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_name?: string | undefined;
    construction_name?: string | undefined;
    conversion_factor?: string | undefined;
    conversion_quantity?: string | undefined;
    conversion_price?: string | undefined;

    constructor(data?: IWMS_Report_I44_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.id = _data["id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.address = _data["address"];
            this.profession_code = _data["profession_code"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_name = _data["code_name"];
            this.symbol_fc = _data["symbol_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.numerical_order = _data["numerical_order"];
            this.warehouse_out_code = _data["warehouse_out_code"];
            this.warehouse_out_name = _data["warehouse_out_name"];
            this.warehouse_in_code = _data["warehouse_in_code"];
            this.warehouse_in_name = _data["warehouse_in_name"];
            this.customer_name = _data["customer_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.xml_44d = _data["xml_44d"];
            this.voucher_year = _data["voucher_year"];
            this.approve = _data["approve"];
            this.account_id = _data["account_id"];
            this.decentralization = _data["decentralization"];
            this.language_id = _data["language_id"];
            this.unit_name = _data["unit_name"];
            this.warehouse_out_symbol = _data["warehouse_out_symbol"];
            this.warehouse_in_symbol = _data["warehouse_in_symbol"];
            this.quantity = _data["quantity"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_name = _data["goods_name"];
            this.goods_code = _data["goods_code"];
            this.group_code = _data["group_code"];
            this.price = _data["price"];
            this.price_fc = _data["price_fc"];
            this.arise = _data["arise"];
            this.arise_fc = _data["arise_fc"];
            this.creditor_account = _data["creditor_account"];
            this.debitor_account = _data["debitor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_name = _data["department_name"];
            this.construction_name = _data["construction_name"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
        }
    }

    static fromJS(data: any): WMS_Report_I44_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_I44_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["id"] = this.id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["address"] = this.address;
        data["profession_code"] = this.profession_code;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_name"] = this.code_name;
        data["symbol_fc"] = this.symbol_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["numerical_order"] = this.numerical_order;
        data["warehouse_out_code"] = this.warehouse_out_code;
        data["warehouse_out_name"] = this.warehouse_out_name;
        data["warehouse_in_code"] = this.warehouse_in_code;
        data["warehouse_in_name"] = this.warehouse_in_name;
        data["customer_name"] = this.customer_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["xml_44d"] = this.xml_44d;
        data["voucher_year"] = this.voucher_year;
        data["approve"] = this.approve;
        data["account_id"] = this.account_id;
        data["decentralization"] = this.decentralization;
        data["language_id"] = this.language_id;
        data["unit_name"] = this.unit_name;
        data["warehouse_out_symbol"] = this.warehouse_out_symbol;
        data["warehouse_in_symbol"] = this.warehouse_in_symbol;
        data["quantity"] = this.quantity;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_name"] = this.goods_name;
        data["goods_code"] = this.goods_code;
        data["group_code"] = this.group_code;
        data["price"] = this.price;
        data["price_fc"] = this.price_fc;
        data["arise"] = this.arise;
        data["arise_fc"] = this.arise_fc;
        data["creditor_account"] = this.creditor_account;
        data["debitor_account"] = this.debitor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_name"] = this.department_name;
        data["construction_name"] = this.construction_name;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        return data;
    }

    clone(): WMS_Report_I44_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_I44_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_I44_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    id?: number;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    numerical_order?: number | undefined;
    warehouse_out_code?: string | undefined;
    warehouse_out_name?: string | undefined;
    warehouse_in_code?: string | undefined;
    warehouse_in_name?: string | undefined;
    customer_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_44d?: string | undefined;
    voucher_year?: number | undefined;
    approve?: boolean | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
    unit_name?: string | undefined;
    warehouse_out_symbol?: string | undefined;
    warehouse_in_symbol?: string | undefined;
    quantity?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    goods_code?: string | undefined;
    group_code?: string | undefined;
    price?: number | undefined;
    price_fc?: number | undefined;
    arise?: number | undefined;
    arise_fc?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_name?: string | undefined;
    construction_name?: string | undefined;
    conversion_factor?: string | undefined;
    conversion_quantity?: string | undefined;
    conversion_price?: string | undefined;
}

export class WMS_Report_I43_ENTITY implements IWMS_Report_I43_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    numerical_order?: number | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    customer_name?: string | undefined;
    ref_value?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    name_fc?: string | undefined;
    voucher_year?: number | undefined;
    xml_43d?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    code_symbol?: string | undefined;
    unit_name?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_name?: string | undefined;
    construction_name?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    goods_name?: string | undefined;

    constructor(data?: IWMS_Report_I43_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.warehouse_name = _data["warehouse_name"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.numerical_order = _data["numerical_order"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.address = _data["address"];
            this.profession_code = _data["profession_code"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_name = _data["code_name"];
            this.symbol_fc = _data["symbol_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.customer_name = _data["customer_name"];
            this.ref_value = _data["ref_value"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.name_fc = _data["name_fc"];
            this.voucher_year = _data["voucher_year"];
            this.xml_43d = _data["xml_43d"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.code_symbol = _data["code_symbol"];
            this.unit_name = _data["unit_name"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.creditor_account = _data["creditor_account"];
            this.debitor_account = _data["debitor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_name = _data["department_name"];
            this.construction_name = _data["construction_name"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.goods_name = _data["goods_name"];
        }
    }

    static fromJS(data: any): WMS_Report_I43_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_I43_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["warehouse_code"] = this.warehouse_code;
        data["warehouse_name"] = this.warehouse_name;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["numerical_order"] = this.numerical_order;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["address"] = this.address;
        data["profession_code"] = this.profession_code;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_name"] = this.code_name;
        data["symbol_fc"] = this.symbol_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["customer_name"] = this.customer_name;
        data["ref_value"] = this.ref_value;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["name_fc"] = this.name_fc;
        data["voucher_year"] = this.voucher_year;
        data["xml_43d"] = this.xml_43d;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["code_symbol"] = this.code_symbol;
        data["unit_name"] = this.unit_name;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["creditor_account"] = this.creditor_account;
        data["debitor_account"] = this.debitor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_name"] = this.department_name;
        data["construction_name"] = this.construction_name;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["goods_name"] = this.goods_name;
        return data;
    }

    clone(): WMS_Report_I43_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_I43_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_I43_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    numerical_order?: number | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    customer_name?: string | undefined;
    ref_value?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    name_fc?: string | undefined;
    voucher_year?: number | undefined;
    xml_43d?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    code_symbol?: string | undefined;
    unit_name?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_name?: string | undefined;
    construction_name?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    goods_name?: string | undefined;
}

export class WMS_Report_I42_ENTITY implements IWMS_Report_I42_ENTITY {
    id?: number;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    profession_name?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    numerical_order?: number | undefined;
    is_average_price?: boolean | undefined;
    is_direct_import_and_export?: boolean | undefined;
    xml_42d?: string | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    unit_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    group_code?: string | undefined;
    customer_symbol?: string | undefined;
    price?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_symbol?: string | undefined;
    construction_id?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    language_id?: number | undefined;

    constructor(data?: IWMS_Report_I42_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.profession_code = _data["profession_code"];
            this.profession_name = _data["profession_name"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_name = _data["code_name"];
            this.symbol_fc = _data["symbol_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.numerical_order = _data["numerical_order"];
            this.is_average_price = _data["is_average_price"];
            this.is_direct_import_and_export = _data["is_direct_import_and_export"];
            this.xml_42d = _data["xml_42d"];
            this.code = _data["code"];
            this.approve = _data["approve"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_id = _data["account_id"];
            this.decentralization = _data["decentralization"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_year = _data["voucher_year"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.unit_name = _data["unit_name"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_name = _data["goods_name"];
            this.group_code = _data["group_code"];
            this.customer_symbol = _data["customer_symbol"];
            this.price = _data["price"];
            this.creditor_account = _data["creditor_account"];
            this.debitor_account = _data["debitor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_symbol = _data["department_symbol"];
            this.construction_id = _data["construction_id"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): WMS_Report_I42_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_I42_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["profession_code"] = this.profession_code;
        data["profession_name"] = this.profession_name;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_name"] = this.code_name;
        data["symbol_fc"] = this.symbol_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["numerical_order"] = this.numerical_order;
        data["is_average_price"] = this.is_average_price;
        data["is_direct_import_and_export"] = this.is_direct_import_and_export;
        data["xml_42d"] = this.xml_42d;
        data["code"] = this.code;
        data["approve"] = this.approve;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_id"] = this.account_id;
        data["decentralization"] = this.decentralization;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_year"] = this.voucher_year;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["unit_name"] = this.unit_name;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_name"] = this.goods_name;
        data["group_code"] = this.group_code;
        data["customer_symbol"] = this.customer_symbol;
        data["price"] = this.price;
        data["creditor_account"] = this.creditor_account;
        data["debitor_account"] = this.debitor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_symbol"] = this.department_symbol;
        data["construction_id"] = this.construction_id;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): WMS_Report_I42_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_I42_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_I42_ENTITY {
    id?: number;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    profession_name?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    numerical_order?: number | undefined;
    is_average_price?: boolean | undefined;
    is_direct_import_and_export?: boolean | undefined;
    xml_42d?: string | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    unit_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    group_code?: string | undefined;
    customer_symbol?: string | undefined;
    price?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_symbol?: string | undefined;
    construction_id?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    language_id?: number | undefined;
}

export class WMS_Report_I41_ENTITY implements IWMS_Report_I41_ENTITY {
    id?: number;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    numerical_order?: number | undefined;
    is_average_price?: boolean | undefined;
    is_direct_import_and_export?: boolean | undefined;
    customer_name?: string | undefined;
    xml_42d?: string | undefined;
    code?: string | undefined;
    detail_code?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;

    constructor(data?: IWMS_Report_I41_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.address = _data["address"];
            this.profession_code = _data["profession_code"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_name = _data["code_name"];
            this.symbol_fc = _data["symbol_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.numerical_order = _data["numerical_order"];
            this.is_average_price = _data["is_average_price"];
            this.is_direct_import_and_export = _data["is_direct_import_and_export"];
            this.customer_name = _data["customer_name"];
            this.xml_42d = _data["xml_42d"];
            this.code = _data["code"];
            this.detail_code = _data["detail_code"];
            this.approve = _data["approve"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_id = _data["account_id"];
            this.decentralization = _data["decentralization"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_year = _data["voucher_year"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): WMS_Report_I41_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_I41_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["address"] = this.address;
        data["profession_code"] = this.profession_code;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_name"] = this.code_name;
        data["symbol_fc"] = this.symbol_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["numerical_order"] = this.numerical_order;
        data["is_average_price"] = this.is_average_price;
        data["is_direct_import_and_export"] = this.is_direct_import_and_export;
        data["customer_name"] = this.customer_name;
        data["xml_42d"] = this.xml_42d;
        data["code"] = this.code;
        data["detail_code"] = this.detail_code;
        data["approve"] = this.approve;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_id"] = this.account_id;
        data["decentralization"] = this.decentralization;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_year"] = this.voucher_year;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): WMS_Report_I41_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_I41_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_I41_ENTITY {
    id?: number;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    numerical_order?: number | undefined;
    is_average_price?: boolean | undefined;
    is_direct_import_and_export?: boolean | undefined;
    customer_name?: string | undefined;
    xml_42d?: string | undefined;
    code?: string | undefined;
    detail_code?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
}

export class WMS_Report_Allocation_ENTITY implements IWMS_Report_Allocation_ENTITY {
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    description?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    i45_m_code?: string | undefined;
    i45_d_code?: string | undefined;
    quantity?: number | undefined;
    quantity_of_damaged_items_on_hand?: number | undefined;
    beginning_period_defective_quantity?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    expense_account?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    fee_sumbol?: string | undefined;
    case_code?: string | undefined;
    case_symbol?: string | undefined;
    allocation_period?: number | undefined;
    period_number?: number | undefined;
    amortization_Expense_for_the_period?: number | undefined;
    allocated_money?: number | undefined;
    remaining_funds?: number | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    unit_symbol?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_Allocation_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.description = _data["description"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.i45_m_code = _data["i45_m_code"];
            this.i45_d_code = _data["i45_d_code"];
            this.quantity = _data["quantity"];
            this.quantity_of_damaged_items_on_hand = _data["quantity_of_damaged_items_on_hand"];
            this.beginning_period_defective_quantity = _data["beginning_period_defective_quantity"];
            this.arise = _data["arise"];
            this.debitor_account = _data["debitor_account"];
            this.expense_account = _data["expense_account"];
            this.goods_code = _data["goods_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.department_code = _data["department_code"];
            this.fee_code = _data["fee_code"];
            this.fee_sumbol = _data["fee_sumbol"];
            this.case_code = _data["case_code"];
            this.case_symbol = _data["case_symbol"];
            this.allocation_period = _data["allocation_period"];
            this.period_number = _data["period_number"];
            this.amortization_Expense_for_the_period = _data["amortization_Expense_for_the_period"];
            this.allocated_money = _data["allocated_money"];
            this.remaining_funds = _data["remaining_funds"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.unit_symbol = _data["unit_symbol"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_Allocation_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Allocation_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["description"] = this.description;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["i45_m_code"] = this.i45_m_code;
        data["i45_d_code"] = this.i45_d_code;
        data["quantity"] = this.quantity;
        data["quantity_of_damaged_items_on_hand"] = this.quantity_of_damaged_items_on_hand;
        data["beginning_period_defective_quantity"] = this.beginning_period_defective_quantity;
        data["arise"] = this.arise;
        data["debitor_account"] = this.debitor_account;
        data["expense_account"] = this.expense_account;
        data["goods_code"] = this.goods_code;
        data["goods_symbol"] = this.goods_symbol;
        data["department_code"] = this.department_code;
        data["fee_code"] = this.fee_code;
        data["fee_sumbol"] = this.fee_sumbol;
        data["case_code"] = this.case_code;
        data["case_symbol"] = this.case_symbol;
        data["allocation_period"] = this.allocation_period;
        data["period_number"] = this.period_number;
        data["amortization_Expense_for_the_period"] = this.amortization_Expense_for_the_period;
        data["allocated_money"] = this.allocated_money;
        data["remaining_funds"] = this.remaining_funds;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["unit_symbol"] = this.unit_symbol;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_Allocation_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Allocation_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Allocation_ENTITY {
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    description?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    i45_m_code?: string | undefined;
    i45_d_code?: string | undefined;
    quantity?: number | undefined;
    quantity_of_damaged_items_on_hand?: number | undefined;
    beginning_period_defective_quantity?: number | undefined;
    arise?: number | undefined;
    debitor_account?: string | undefined;
    expense_account?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    fee_sumbol?: string | undefined;
    case_code?: string | undefined;
    case_symbol?: string | undefined;
    allocation_period?: number | undefined;
    period_number?: number | undefined;
    amortization_Expense_for_the_period?: number | undefined;
    allocated_money?: number | undefined;
    remaining_funds?: number | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    unit_symbol?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Report_Goods_Import_ENTITY implements IWMS_Report_Goods_Import_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    description?: string | undefined;
    warehouse_code?: string | undefined;
    total_money?: number | undefined;
    goods_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    arise_fc?: number | undefined;
    price?: number | undefined;
    arise?: number | undefined;
    case_code?: string | undefined;
    customer_name?: string | undefined;
    goods_name?: string | undefined;
    goods_unit_name?: string | undefined;
    group_code?: string | undefined;
    group_name?: string | undefined;
    case_name?: string | undefined;
    goods_symbol?: string | undefined;
    warehouse_symbol?: string | undefined;
    customer_symbol?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_Goods_Import_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.description = _data["description"];
            this.warehouse_code = _data["warehouse_code"];
            this.total_money = _data["total_money"];
            this.goods_code = _data["goods_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.arise_fc = _data["arise_fc"];
            this.price = _data["price"];
            this.arise = _data["arise"];
            this.case_code = _data["case_code"];
            this.customer_name = _data["customer_name"];
            this.goods_name = _data["goods_name"];
            this.goods_unit_name = _data["goods_unit_name"];
            this.group_code = _data["group_code"];
            this.group_name = _data["group_name"];
            this.case_name = _data["case_name"];
            this.goods_symbol = _data["goods_symbol"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.customer_symbol = _data["customer_symbol"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_Goods_Import_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Goods_Import_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["description"] = this.description;
        data["warehouse_code"] = this.warehouse_code;
        data["total_money"] = this.total_money;
        data["goods_code"] = this.goods_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["arise_fc"] = this.arise_fc;
        data["price"] = this.price;
        data["arise"] = this.arise;
        data["case_code"] = this.case_code;
        data["customer_name"] = this.customer_name;
        data["goods_name"] = this.goods_name;
        data["goods_unit_name"] = this.goods_unit_name;
        data["group_code"] = this.group_code;
        data["group_name"] = this.group_name;
        data["case_name"] = this.case_name;
        data["goods_symbol"] = this.goods_symbol;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["customer_symbol"] = this.customer_symbol;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_Goods_Import_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Goods_Import_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Goods_Import_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    description?: string | undefined;
    warehouse_code?: string | undefined;
    total_money?: number | undefined;
    goods_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    arise_fc?: number | undefined;
    price?: number | undefined;
    arise?: number | undefined;
    case_code?: string | undefined;
    customer_name?: string | undefined;
    goods_name?: string | undefined;
    goods_unit_name?: string | undefined;
    group_code?: string | undefined;
    group_name?: string | undefined;
    case_name?: string | undefined;
    goods_symbol?: string | undefined;
    warehouse_symbol?: string | undefined;
    customer_symbol?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Report_Inventory_Material_Ledger_ENTITY implements IWMS_Report_Inventory_Material_Ledger_ENTITY {
    code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    warehouse_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_name?: string | undefined;
    notes?: string | undefined;
    price?: number | undefined;
    goods_code?: string | undefined;
    goods_serial?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_import?: number | undefined;
    quantity_export?: number | undefined;
    price_export?: number | undefined;
    quantity_iventory?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_Inventory_Material_Ledger_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_name = _data["goods_name"];
            this.warehouse_name = _data["warehouse_name"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_name = _data["customer_name"];
            this.notes = _data["notes"];
            this.price = _data["price"];
            this.goods_code = _data["goods_code"];
            this.goods_serial = _data["goods_serial"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_import = _data["price_import"];
            this.quantity_export = _data["quantity_export"];
            this.price_export = _data["price_export"];
            this.quantity_iventory = _data["quantity_iventory"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_Inventory_Material_Ledger_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Inventory_Material_Ledger_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_name"] = this.goods_name;
        data["warehouse_name"] = this.warehouse_name;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_name"] = this.customer_name;
        data["notes"] = this.notes;
        data["price"] = this.price;
        data["goods_code"] = this.goods_code;
        data["goods_serial"] = this.goods_serial;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_import"] = this.price_import;
        data["quantity_export"] = this.quantity_export;
        data["price_export"] = this.price_export;
        data["quantity_iventory"] = this.quantity_iventory;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_Inventory_Material_Ledger_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Inventory_Material_Ledger_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Inventory_Material_Ledger_ENTITY {
    code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    warehouse_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_name?: string | undefined;
    notes?: string | undefined;
    price?: number | undefined;
    goods_code?: string | undefined;
    goods_serial?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_import?: number | undefined;
    quantity_export?: number | undefined;
    price_export?: number | undefined;
    quantity_iventory?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Report_Inventory_Book_Detail_ENTITY implements IWMS_Report_Inventory_Book_Detail_ENTITY {
    goods_name?: string | undefined;
    goods_symbol?: string | undefined;
    goods_serial?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    warehouse_code?: string | undefined;
    voucher_detail_code?: string | undefined;
    voucher_master_code?: string | undefined;
    voucher_no?: string | undefined;
    customer_name?: string | undefined;
    description?: string | undefined;
    price?: number | undefined;
    goods_code?: string | undefined;
    quantity?: number | undefined;
    quantity_x?: number | undefined;
    price_import?: number | undefined;
    quantity_export?: string | undefined;
    price_export?: number | undefined;
    stt?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_Inventory_Book_Detail_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.goods_name = _data["goods_name"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_serial = _data["goods_serial"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.voucher_detail_code = _data["voucher_detail_code"];
            this.voucher_master_code = _data["voucher_master_code"];
            this.voucher_no = _data["voucher_no"];
            this.customer_name = _data["customer_name"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.goods_code = _data["goods_code"];
            this.quantity = _data["quantity"];
            this.quantity_x = _data["quantity_x"];
            this.price_import = _data["price_import"];
            this.quantity_export = _data["quantity_export"];
            this.price_export = _data["price_export"];
            this.stt = _data["stt"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_Inventory_Book_Detail_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Inventory_Book_Detail_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["goods_name"] = this.goods_name;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_serial"] = this.goods_serial;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["warehouse_code"] = this.warehouse_code;
        data["voucher_detail_code"] = this.voucher_detail_code;
        data["voucher_master_code"] = this.voucher_master_code;
        data["voucher_no"] = this.voucher_no;
        data["customer_name"] = this.customer_name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["goods_code"] = this.goods_code;
        data["quantity"] = this.quantity;
        data["quantity_x"] = this.quantity_x;
        data["price_import"] = this.price_import;
        data["quantity_export"] = this.quantity_export;
        data["price_export"] = this.price_export;
        data["stt"] = this.stt;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_Inventory_Book_Detail_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Inventory_Book_Detail_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Inventory_Book_Detail_ENTITY {
    goods_name?: string | undefined;
    goods_symbol?: string | undefined;
    goods_serial?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    warehouse_code?: string | undefined;
    voucher_detail_code?: string | undefined;
    voucher_master_code?: string | undefined;
    voucher_no?: string | undefined;
    customer_name?: string | undefined;
    description?: string | undefined;
    price?: number | undefined;
    goods_code?: string | undefined;
    quantity?: number | undefined;
    quantity_x?: number | undefined;
    price_import?: number | undefined;
    quantity_export?: string | undefined;
    price_export?: number | undefined;
    stt?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    code?: string | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Report_Inventory_By_Warehouse_ENTITY implements IWMS_Report_Inventory_By_Warehouse_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    code?: string | undefined;
    warehouse_code?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    unit_name?: string | undefined;
    ending_inventory_quantity?: string | undefined;
    ending_balance?: string | undefined;
    warehouse_symbol?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_Inventory_By_Warehouse_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.warehouse_code = _data["warehouse_code"];
            this.goods_code = _data["goods_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_name = _data["goods_name"];
            this.unit_name = _data["unit_name"];
            this.ending_inventory_quantity = _data["ending_inventory_quantity"];
            this.ending_balance = _data["ending_balance"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_Inventory_By_Warehouse_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Inventory_By_Warehouse_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["warehouse_code"] = this.warehouse_code;
        data["goods_code"] = this.goods_code;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_name"] = this.goods_name;
        data["unit_name"] = this.unit_name;
        data["ending_inventory_quantity"] = this.ending_inventory_quantity;
        data["ending_balance"] = this.ending_balance;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_Inventory_By_Warehouse_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Inventory_By_Warehouse_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Inventory_By_Warehouse_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    code?: string | undefined;
    warehouse_code?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    unit_name?: string | undefined;
    ending_inventory_quantity?: string | undefined;
    ending_balance?: string | undefined;
    warehouse_symbol?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Report_Inventory_Import_Export_ENTITY implements IWMS_Report_Inventory_Import_Export_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    code?: string | undefined;
    group_code?: string | undefined;
    group_name?: string | undefined;
    group_symbol?: string | undefined;
    goods_code?: string | undefined;
    warehouse_symbol?: string | undefined;
    goods_symbol?: string | undefined;
    goods_serial?: string | undefined;
    goods_name?: string | undefined;
    unit_name?: string | undefined;
    ob_inventory_quantity?: number | undefined;
    opening_balance?: number | undefined;
    quantity_import?: number | undefined;
    price_import?: number | undefined;
    quantity_export?: number | undefined;
    price_export?: number | undefined;
    ending_inventory_quantity?: number | undefined;
    ending_balance?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_account?: string | undefined;
    goods_type?: number | undefined;
    goods_unit_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_Inventory_Import_Export_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.group_code = _data["group_code"];
            this.group_name = _data["group_name"];
            this.group_symbol = _data["group_symbol"];
            this.goods_code = _data["goods_code"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_serial = _data["goods_serial"];
            this.goods_name = _data["goods_name"];
            this.unit_name = _data["unit_name"];
            this.ob_inventory_quantity = _data["ob_inventory_quantity"];
            this.opening_balance = _data["opening_balance"];
            this.quantity_import = _data["quantity_import"];
            this.price_import = _data["price_import"];
            this.quantity_export = _data["quantity_export"];
            this.price_export = _data["price_export"];
            this.ending_inventory_quantity = _data["ending_inventory_quantity"];
            this.ending_balance = _data["ending_balance"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.warehouse_code = _data["warehouse_code"];
            this.warehouse_account = _data["warehouse_account"];
            this.goods_type = _data["goods_type"];
            this.goods_unit_code = _data["goods_unit_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_Inventory_Import_Export_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Inventory_Import_Export_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["group_code"] = this.group_code;
        data["group_name"] = this.group_name;
        data["group_symbol"] = this.group_symbol;
        data["goods_code"] = this.goods_code;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_serial"] = this.goods_serial;
        data["goods_name"] = this.goods_name;
        data["unit_name"] = this.unit_name;
        data["ob_inventory_quantity"] = this.ob_inventory_quantity;
        data["opening_balance"] = this.opening_balance;
        data["quantity_import"] = this.quantity_import;
        data["price_import"] = this.price_import;
        data["quantity_export"] = this.quantity_export;
        data["price_export"] = this.price_export;
        data["ending_inventory_quantity"] = this.ending_inventory_quantity;
        data["ending_balance"] = this.ending_balance;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["warehouse_code"] = this.warehouse_code;
        data["warehouse_account"] = this.warehouse_account;
        data["goods_type"] = this.goods_type;
        data["goods_unit_code"] = this.goods_unit_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_Inventory_Import_Export_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Inventory_Import_Export_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Inventory_Import_Export_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    code?: string | undefined;
    group_code?: string | undefined;
    group_name?: string | undefined;
    group_symbol?: string | undefined;
    goods_code?: string | undefined;
    warehouse_symbol?: string | undefined;
    goods_symbol?: string | undefined;
    goods_serial?: string | undefined;
    goods_name?: string | undefined;
    unit_name?: string | undefined;
    ob_inventory_quantity?: number | undefined;
    opening_balance?: number | undefined;
    quantity_import?: number | undefined;
    price_import?: number | undefined;
    quantity_export?: number | undefined;
    price_export?: number | undefined;
    ending_inventory_quantity?: number | undefined;
    ending_balance?: number | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_account?: string | undefined;
    goods_type?: number | undefined;
    goods_unit_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Report_Inventory_Incoming_Summary_ENTITY implements IWMS_Report_Inventory_Incoming_Summary_ENTITY {
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    warehouse_code?: string | undefined;
    group_code?: string | undefined;
    goods_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    customer_code?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    goods_serial?: string | undefined;
    unit_name?: string | undefined;
    quantity?: number | undefined;
    arise_credit?: number | undefined;
    nhom?: string | undefined;
    group_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    id?: number;
    code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_Inventory_Incoming_Summary_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.group_code = _data["group_code"];
            this.goods_code = _data["goods_code"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.customer_code = _data["customer_code"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_name = _data["goods_name"];
            this.goods_serial = _data["goods_serial"];
            this.unit_name = _data["unit_name"];
            this.quantity = _data["quantity"];
            this.arise_credit = _data["arise_credit"];
            this.nhom = _data["nhom"];
            this.group_name = _data["group_name"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.id = _data["id"];
            this.code = _data["code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_Inventory_Incoming_Summary_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Inventory_Incoming_Summary_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["warehouse_code"] = this.warehouse_code;
        data["group_code"] = this.group_code;
        data["goods_code"] = this.goods_code;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["customer_code"] = this.customer_code;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_name"] = this.goods_name;
        data["goods_serial"] = this.goods_serial;
        data["unit_name"] = this.unit_name;
        data["quantity"] = this.quantity;
        data["arise_credit"] = this.arise_credit;
        data["nhom"] = this.nhom;
        data["group_name"] = this.group_name;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["id"] = this.id;
        data["code"] = this.code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_Inventory_Incoming_Summary_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Inventory_Incoming_Summary_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Inventory_Incoming_Summary_ENTITY {
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    warehouse_code?: string | undefined;
    group_code?: string | undefined;
    goods_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    customer_code?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    goods_serial?: string | undefined;
    unit_name?: string | undefined;
    quantity?: number | undefined;
    arise_credit?: number | undefined;
    nhom?: string | undefined;
    group_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    id?: number;
    code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Report_Inventory_Issued_Summary_ENTITY implements IWMS_Report_Inventory_Issued_Summary_ENTITY {
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    warehouse_code?: string | undefined;
    group_code?: string | undefined;
    goods_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    customer_code?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    goods_serial?: string | undefined;
    unit_name?: string | undefined;
    quantity?: number | undefined;
    arise_credit?: number | undefined;
    nhom?: string | undefined;
    group_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    id?: number;
    code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: IWMS_Report_Inventory_Issued_Summary_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.group_code = _data["group_code"];
            this.goods_code = _data["goods_code"];
            this.department_code = _data["department_code"];
            this.case_code = _data["case_code"];
            this.customer_code = _data["customer_code"];
            this.company_code = _data["company_code"];
            this.language_id = _data["language_id"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_name = _data["goods_name"];
            this.goods_serial = _data["goods_serial"];
            this.unit_name = _data["unit_name"];
            this.quantity = _data["quantity"];
            this.arise_credit = _data["arise_credit"];
            this.nhom = _data["nhom"];
            this.group_name = _data["group_name"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.id = _data["id"];
            this.code = _data["code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): WMS_Report_Inventory_Issued_Summary_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Inventory_Issued_Summary_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["warehouse_code"] = this.warehouse_code;
        data["group_code"] = this.group_code;
        data["goods_code"] = this.goods_code;
        data["department_code"] = this.department_code;
        data["case_code"] = this.case_code;
        data["customer_code"] = this.customer_code;
        data["company_code"] = this.company_code;
        data["language_id"] = this.language_id;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_name"] = this.goods_name;
        data["goods_serial"] = this.goods_serial;
        data["unit_name"] = this.unit_name;
        data["quantity"] = this.quantity;
        data["arise_credit"] = this.arise_credit;
        data["nhom"] = this.nhom;
        data["group_name"] = this.group_name;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["id"] = this.id;
        data["code"] = this.code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): WMS_Report_Inventory_Issued_Summary_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Inventory_Issued_Summary_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Inventory_Issued_Summary_ENTITY {
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    warehouse_code?: string | undefined;
    group_code?: string | undefined;
    goods_code?: string | undefined;
    department_code?: string | undefined;
    case_code?: string | undefined;
    customer_code?: string | undefined;
    company_code?: string | undefined;
    language_id?: number | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    goods_serial?: string | undefined;
    unit_name?: string | undefined;
    quantity?: number | undefined;
    arise_credit?: number | undefined;
    nhom?: string | undefined;
    group_name?: string | undefined;
    warehouse_symbol?: string | undefined;
    id?: number;
    code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_year?: number | undefined;
}

export class WMS_Average_Cost_Sheet_ENTITY implements IWMS_Average_Cost_Sheet_ENTITY {
    id?: number;
    company_code?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_symbol?: string | undefined;
    warehouse_name?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    quantity?: number | undefined;
    arise_debit?: number | undefined;
    price?: number | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    group_code?: string | undefined;
    warehouse_account?: string | undefined;
    discrepancies_account?: string | undefined;
    inventory_valuation_method?: number | undefined;
    from_month?: number | undefined;
    to_month?: number | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    starts_with_m?: string | undefined;
    is_costing?: boolean | undefined;

    constructor(data?: IWMS_Average_Cost_Sheet_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_code = _data["company_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.warehouse_symbol = _data["warehouse_symbol"];
            this.warehouse_name = _data["warehouse_name"];
            this.goods_code = _data["goods_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_name = _data["goods_name"];
            this.quantity = _data["quantity"];
            this.arise_debit = _data["arise_debit"];
            this.price = _data["price"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.group_code = _data["group_code"];
            this.warehouse_account = _data["warehouse_account"];
            this.discrepancies_account = _data["discrepancies_account"];
            this.inventory_valuation_method = _data["inventory_valuation_method"];
            this.from_month = _data["from_month"];
            this.to_month = _data["to_month"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_no = _data["voucher_no"];
            this.starts_with_m = _data["starts_with_m"];
            this.is_costing = _data["is_costing"];
        }
    }

    static fromJS(data: any): WMS_Average_Cost_Sheet_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Average_Cost_Sheet_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_code"] = this.company_code;
        data["warehouse_code"] = this.warehouse_code;
        data["warehouse_symbol"] = this.warehouse_symbol;
        data["warehouse_name"] = this.warehouse_name;
        data["goods_code"] = this.goods_code;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_name"] = this.goods_name;
        data["quantity"] = this.quantity;
        data["arise_debit"] = this.arise_debit;
        data["price"] = this.price;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["group_code"] = this.group_code;
        data["warehouse_account"] = this.warehouse_account;
        data["discrepancies_account"] = this.discrepancies_account;
        data["inventory_valuation_method"] = this.inventory_valuation_method;
        data["from_month"] = this.from_month;
        data["to_month"] = this.to_month;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_no"] = this.voucher_no;
        data["starts_with_m"] = this.starts_with_m;
        data["is_costing"] = this.is_costing;
        return data;
    }

    clone(): WMS_Average_Cost_Sheet_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Average_Cost_Sheet_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Average_Cost_Sheet_ENTITY {
    id?: number;
    company_code?: string | undefined;
    warehouse_code?: string | undefined;
    warehouse_symbol?: string | undefined;
    warehouse_name?: string | undefined;
    goods_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_name?: string | undefined;
    quantity?: number | undefined;
    arise_debit?: number | undefined;
    price?: number | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    group_code?: string | undefined;
    warehouse_account?: string | undefined;
    discrepancies_account?: string | undefined;
    inventory_valuation_method?: number | undefined;
    from_month?: number | undefined;
    to_month?: number | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_no?: string | undefined;
    starts_with_m?: string | undefined;
    is_costing?: boolean | undefined;
}

export class WMS_Report_Inventory_Check_ENTITY implements IWMS_Report_Inventory_Check_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    code?: string | undefined;
    warehouse_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    tasck_code?: string | undefined;

    constructor(data?: IWMS_Report_Inventory_Check_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.warehouse_code = _data["warehouse_code"];
            this.goods_symbol = _data["goods_symbol"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.company_code = _data["company_code"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.tasck_code = _data["tasck_code"];
        }
    }

    static fromJS(data: any): WMS_Report_Inventory_Check_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new WMS_Report_Inventory_Check_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["warehouse_code"] = this.warehouse_code;
        data["goods_symbol"] = this.goods_symbol;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["company_code"] = this.company_code;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["tasck_code"] = this.tasck_code;
        return data;
    }

    clone(): WMS_Report_Inventory_Check_ENTITY {
        const json = this.toJSON();
        let result = new WMS_Report_Inventory_Check_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IWMS_Report_Inventory_Check_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    code?: string | undefined;
    warehouse_code?: string | undefined;
    goods_symbol?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    tasck_code?: string | undefined;
}

export class I41_D_ENTITY implements II41_D_ENTITY {
    code?: string | undefined;
    numerical_order?: number | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    construction_id?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: II41_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.numerical_order = _data["numerical_order"];
            this.master_code = _data["master_code"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.creditor_account = _data["creditor_account"];
            this.debitor_account = _data["debitor_account"];
            this.department_code = _data["department_code"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.construction_id = _data["construction_id"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): I41_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I41_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["numerical_order"] = this.numerical_order;
        data["master_code"] = this.master_code;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["creditor_account"] = this.creditor_account;
        data["debitor_account"] = this.debitor_account;
        data["department_code"] = this.department_code;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["construction_id"] = this.construction_id;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): I41_D_ENTITY {
        const json = this.toJSON();
        let result = new I41_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II41_D_ENTITY {
    code?: string | undefined;
    numerical_order?: number | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    department_code?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    construction_id?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    voucher_date?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class I41_M_ENTITY implements II41_M_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    numerical_order?: number | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    is_average_price?: boolean | undefined;
    is_costing?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_41d?: string | undefined;
    voucher_year?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    i41_D?: I41_D_ENTITY[] | undefined;
    id?: number;
    language_id?: number | undefined;

    constructor(data?: II41_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.numerical_order = _data["numerical_order"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.profession_code = _data["profession_code"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_name = _data["code_name"];
            this.symbol_fc = _data["symbol_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.is_average_price = _data["is_average_price"];
            this.is_costing = _data["is_costing"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.xml_41d = _data["xml_41d"];
            this.voucher_year = _data["voucher_year"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            if (Array.isArray(_data["i41_D"])) {
                this.i41_D = [] as any;
                for (let item of _data["i41_D"])
                    this.i41_D.push(I41_D_ENTITY.fromJS(item));
            }
            this.id = _data["id"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): I41_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I41_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["numerical_order"] = this.numerical_order;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["profession_code"] = this.profession_code;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_name"] = this.code_name;
        data["symbol_fc"] = this.symbol_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["is_average_price"] = this.is_average_price;
        data["is_costing"] = this.is_costing;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["xml_41d"] = this.xml_41d;
        data["voucher_year"] = this.voucher_year;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        if (Array.isArray(this.i41_D)) {
            data["i41_D"] = [];
            for (let item of this.i41_D)
                data["i41_D"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): I41_M_ENTITY {
        const json = this.toJSON();
        let result = new I41_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II41_M_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    numerical_order?: number | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    is_average_price?: boolean | undefined;
    is_costing?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_41d?: string | undefined;
    voucher_year?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    i41_D?: I41_D_ENTITY[] | undefined;
    id?: number;
    language_id?: number | undefined;
}

export class I42_D_ENTITY implements II42_D_ENTITY {
    id?: number;
    master_id?: string | undefined;
    voucher_code?: string | undefined;
    goods_code?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    vv_code?: string | undefined;
    department_code?: string | undefined;
    numerical_order?: number | undefined;
    construction_id?: string | undefined;
    goods_name?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;

    constructor(data?: II42_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.master_id = _data["master_id"];
            this.voucher_code = _data["voucher_code"];
            this.goods_code = _data["goods_code"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.creditor_account = _data["creditor_account"];
            this.debitor_account = _data["debitor_account"];
            this.fee_code = _data["fee_code"];
            this.vv_code = _data["vv_code"];
            this.department_code = _data["department_code"];
            this.numerical_order = _data["numerical_order"];
            this.construction_id = _data["construction_id"];
            this.goods_name = _data["goods_name"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.approve = _data["approve"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_id = _data["account_id"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.company_code = _data["company_code"];
        }
    }

    static fromJS(data: any): I42_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I42_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["master_id"] = this.master_id;
        data["voucher_code"] = this.voucher_code;
        data["goods_code"] = this.goods_code;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["creditor_account"] = this.creditor_account;
        data["debitor_account"] = this.debitor_account;
        data["fee_code"] = this.fee_code;
        data["vv_code"] = this.vv_code;
        data["department_code"] = this.department_code;
        data["numerical_order"] = this.numerical_order;
        data["construction_id"] = this.construction_id;
        data["goods_name"] = this.goods_name;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["code"] = this.code;
        data["approve"] = this.approve;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_id"] = this.account_id;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["company_code"] = this.company_code;
        return data;
    }

    clone(): I42_D_ENTITY {
        const json = this.toJSON();
        let result = new I42_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II42_D_ENTITY {
    id?: number;
    master_id?: string | undefined;
    voucher_code?: string | undefined;
    goods_code?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    vv_code?: string | undefined;
    department_code?: string | undefined;
    numerical_order?: number | undefined;
    construction_id?: string | undefined;
    goods_name?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    voucher_date?: moment.Moment | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
}

export class I42_M_ENTITY implements II42_M_ENTITY {
    id?: number;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    numerical_order?: number | undefined;
    is_average_price?: boolean | undefined;
    is_direct_import_and_export?: boolean | undefined;
    customer_name?: string | undefined;
    xml_42d?: string | undefined;
    xml_cat_goods_configurations?: string | undefined;
    i42_D?: I42_D_ENTITY[] | undefined;
    cat_goods_configurations?: CAT_Goods_Configuration_ENTITY[] | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    warehouse_code?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;

    constructor(data?: II42_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.address = _data["address"];
            this.profession_code = _data["profession_code"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_name = _data["code_name"];
            this.symbol_fc = _data["symbol_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.numerical_order = _data["numerical_order"];
            this.is_average_price = _data["is_average_price"];
            this.is_direct_import_and_export = _data["is_direct_import_and_export"];
            this.customer_name = _data["customer_name"];
            this.xml_42d = _data["xml_42d"];
            this.xml_cat_goods_configurations = _data["xml_cat_goods_configurations"];
            if (Array.isArray(_data["i42_D"])) {
                this.i42_D = [] as any;
                for (let item of _data["i42_D"])
                    this.i42_D.push(I42_D_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["cat_goods_configurations"])) {
                this.cat_goods_configurations = [] as any;
                for (let item of _data["cat_goods_configurations"])
                    this.cat_goods_configurations.push(CAT_Goods_Configuration_ENTITY.fromJS(item));
            }
            this.code = _data["code"];
            this.approve = _data["approve"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_id = _data["account_id"];
            this.decentralization = _data["decentralization"];
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.warehouse_code = _data["warehouse_code"];
            this.voucher_year = _data["voucher_year"];
            this.language_id = _data["language_id"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
        }
    }

    static fromJS(data: any): I42_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I42_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["address"] = this.address;
        data["profession_code"] = this.profession_code;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_name"] = this.code_name;
        data["symbol_fc"] = this.symbol_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["numerical_order"] = this.numerical_order;
        data["is_average_price"] = this.is_average_price;
        data["is_direct_import_and_export"] = this.is_direct_import_and_export;
        data["customer_name"] = this.customer_name;
        data["xml_42d"] = this.xml_42d;
        data["xml_cat_goods_configurations"] = this.xml_cat_goods_configurations;
        if (Array.isArray(this.i42_D)) {
            data["i42_D"] = [];
            for (let item of this.i42_D)
                data["i42_D"].push(item.toJSON());
        }
        if (Array.isArray(this.cat_goods_configurations)) {
            data["cat_goods_configurations"] = [];
            for (let item of this.cat_goods_configurations)
                data["cat_goods_configurations"].push(item.toJSON());
        }
        data["code"] = this.code;
        data["approve"] = this.approve;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_id"] = this.account_id;
        data["decentralization"] = this.decentralization;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["warehouse_code"] = this.warehouse_code;
        data["voucher_year"] = this.voucher_year;
        data["language_id"] = this.language_id;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        return data;
    }

    clone(): I42_M_ENTITY {
        const json = this.toJSON();
        let result = new I42_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II42_M_ENTITY {
    id?: number;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    numerical_order?: number | undefined;
    is_average_price?: boolean | undefined;
    is_direct_import_and_export?: boolean | undefined;
    customer_name?: string | undefined;
    xml_42d?: string | undefined;
    xml_cat_goods_configurations?: string | undefined;
    i42_D?: I42_D_ENTITY[] | undefined;
    cat_goods_configurations?: CAT_Goods_Configuration_ENTITY[] | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    warehouse_code?: string | undefined;
    voucher_year?: number | undefined;
    language_id?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
}

export class I43_D_ENTITY implements II43_D_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code_1?: string | undefined;
    numerical_order?: number | undefined;
    construction_id?: string | undefined;
    goods_name?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    is_spec_iden?: boolean | undefined;

    constructor(data?: II43_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.code = _data["code"];
            this.master_code = _data["master_code"];
            this.goods_code = _data["goods_code"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.creditor_account = _data["creditor_account"];
            this.debitor_account = _data["debitor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.goods_code_1 = _data["goods_code_1"];
            this.numerical_order = _data["numerical_order"];
            this.construction_id = _data["construction_id"];
            this.goods_name = _data["goods_name"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.is_spec_iden = _data["is_spec_iden"];
        }
    }

    static fromJS(data: any): I43_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I43_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["code"] = this.code;
        data["master_code"] = this.master_code;
        data["goods_code"] = this.goods_code;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["creditor_account"] = this.creditor_account;
        data["debitor_account"] = this.debitor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["goods_code_1"] = this.goods_code_1;
        data["numerical_order"] = this.numerical_order;
        data["construction_id"] = this.construction_id;
        data["goods_name"] = this.goods_name;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["is_spec_iden"] = this.is_spec_iden;
        return data;
    }

    clone(): I43_D_ENTITY {
        const json = this.toJSON();
        let result = new I43_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II43_D_ENTITY {
    voucher_date?: moment.Moment | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    code?: string | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code_1?: string | undefined;
    numerical_order?: number | undefined;
    construction_id?: string | undefined;
    goods_name?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    id?: number;
    language_id?: number | undefined;
    company_code?: string | undefined;
    is_spec_iden?: boolean | undefined;
}

export class I43_M_ENTITY implements II43_M_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    numerical_order?: number | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    customer_name?: string | undefined;
    ref_value?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    name_fc?: string | undefined;
    voucher_year?: number | undefined;
    xml_43d?: string | undefined;
    xml_cat_goods_configurations?: string | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    s32_detail_code?: string | undefined;
    i43_D?: I43_D_ENTITY[] | undefined;
    cat_goods_configurations?: CAT_Goods_Configuration_ENTITY[] | undefined;
    id?: number;
    language_id?: number | undefined;
    is_costing?: boolean | undefined;

    constructor(data?: II43_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.numerical_order = _data["numerical_order"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.address = _data["address"];
            this.profession_code = _data["profession_code"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_name = _data["code_name"];
            this.symbol_fc = _data["symbol_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.customer_name = _data["customer_name"];
            this.ref_value = _data["ref_value"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.name_fc = _data["name_fc"];
            this.voucher_year = _data["voucher_year"];
            this.xml_43d = _data["xml_43d"];
            this.xml_cat_goods_configurations = _data["xml_cat_goods_configurations"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            this.s32_detail_code = _data["s32_detail_code"];
            if (Array.isArray(_data["i43_D"])) {
                this.i43_D = [] as any;
                for (let item of _data["i43_D"])
                    this.i43_D.push(I43_D_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["cat_goods_configurations"])) {
                this.cat_goods_configurations = [] as any;
                for (let item of _data["cat_goods_configurations"])
                    this.cat_goods_configurations.push(CAT_Goods_Configuration_ENTITY.fromJS(item));
            }
            this.id = _data["id"];
            this.language_id = _data["language_id"];
            this.is_costing = _data["is_costing"];
        }
    }

    static fromJS(data: any): I43_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I43_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["numerical_order"] = this.numerical_order;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["address"] = this.address;
        data["profession_code"] = this.profession_code;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_name"] = this.code_name;
        data["symbol_fc"] = this.symbol_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["customer_name"] = this.customer_name;
        data["ref_value"] = this.ref_value;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["name_fc"] = this.name_fc;
        data["voucher_year"] = this.voucher_year;
        data["xml_43d"] = this.xml_43d;
        data["xml_cat_goods_configurations"] = this.xml_cat_goods_configurations;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        data["s32_detail_code"] = this.s32_detail_code;
        if (Array.isArray(this.i43_D)) {
            data["i43_D"] = [];
            for (let item of this.i43_D)
                data["i43_D"].push(item.toJSON());
        }
        if (Array.isArray(this.cat_goods_configurations)) {
            data["cat_goods_configurations"] = [];
            for (let item of this.cat_goods_configurations)
                data["cat_goods_configurations"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        data["is_costing"] = this.is_costing;
        return data;
    }

    clone(): I43_M_ENTITY {
        const json = this.toJSON();
        let result = new I43_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II43_M_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    numerical_order?: number | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    customer_name?: string | undefined;
    ref_value?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    name_fc?: string | undefined;
    voucher_year?: number | undefined;
    xml_43d?: string | undefined;
    xml_cat_goods_configurations?: string | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    s32_detail_code?: string | undefined;
    i43_D?: I43_D_ENTITY[] | undefined;
    cat_goods_configurations?: CAT_Goods_Configuration_ENTITY[] | undefined;
    id?: number;
    language_id?: number | undefined;
    is_costing?: boolean | undefined;
}

export class I44_D_ENTITY implements II44_D_ENTITY {
    code?: string | undefined;
    id?: number;
    master_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    goods_code_realtime?: string | undefined;
    goods_code?: string | undefined;
    serial_no?: string | undefined;
    unit_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    numerical_order?: number | undefined;
    construction_id?: string | undefined;
    goods_name?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;

    constructor(data?: II44_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.id = _data["id"];
            this.master_code = _data["master_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.goods_code_realtime = _data["goods_code_realtime"];
            this.goods_code = _data["goods_code"];
            this.serial_no = _data["serial_no"];
            this.unit_code = _data["unit_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.creditor_account = _data["creditor_account"];
            this.debitor_account = _data["debitor_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.numerical_order = _data["numerical_order"];
            this.construction_id = _data["construction_id"];
            this.goods_name = _data["goods_name"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.language_id = _data["language_id"];
            this.voucher_year = _data["voucher_year"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
        }
    }

    static fromJS(data: any): I44_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I44_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["id"] = this.id;
        data["master_code"] = this.master_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["goods_code_realtime"] = this.goods_code_realtime;
        data["goods_code"] = this.goods_code;
        data["serial_no"] = this.serial_no;
        data["unit_code"] = this.unit_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["creditor_account"] = this.creditor_account;
        data["debitor_account"] = this.debitor_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["numerical_order"] = this.numerical_order;
        data["construction_id"] = this.construction_id;
        data["goods_name"] = this.goods_name;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["language_id"] = this.language_id;
        data["voucher_year"] = this.voucher_year;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        return data;
    }

    clone(): I44_D_ENTITY {
        const json = this.toJSON();
        let result = new I44_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II44_D_ENTITY {
    code?: string | undefined;
    id?: number;
    master_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    goods_code_realtime?: string | undefined;
    goods_code?: string | undefined;
    serial_no?: string | undefined;
    unit_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    numerical_order?: number | undefined;
    construction_id?: string | undefined;
    goods_name?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    language_id?: number | undefined;
    voucher_year?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
}

export class I44_M_ENTITY implements II44_M_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    id?: number;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    numerical_order?: number | undefined;
    warehouse_out_code?: string | undefined;
    warehouse_out_name?: string | undefined;
    warehouse_in_code?: string | undefined;
    warehouse_in_name?: string | undefined;
    customer_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_44d?: string | undefined;
    voucher_year?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    i44_D?: I44_D_ENTITY[] | undefined;
    approve?: boolean | undefined;
    is_costing?: boolean | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;

    constructor(data?: II44_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.id = _data["id"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.address = _data["address"];
            this.profession_code = _data["profession_code"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_name = _data["code_name"];
            this.symbol_fc = _data["symbol_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.numerical_order = _data["numerical_order"];
            this.warehouse_out_code = _data["warehouse_out_code"];
            this.warehouse_out_name = _data["warehouse_out_name"];
            this.warehouse_in_code = _data["warehouse_in_code"];
            this.warehouse_in_name = _data["warehouse_in_name"];
            this.customer_name = _data["customer_name"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.xml_44d = _data["xml_44d"];
            this.voucher_year = _data["voucher_year"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            if (Array.isArray(_data["i44_D"])) {
                this.i44_D = [] as any;
                for (let item of _data["i44_D"])
                    this.i44_D.push(I44_D_ENTITY.fromJS(item));
            }
            this.approve = _data["approve"];
            this.is_costing = _data["is_costing"];
            this.account_id = _data["account_id"];
            this.decentralization = _data["decentralization"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): I44_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I44_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["id"] = this.id;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["address"] = this.address;
        data["profession_code"] = this.profession_code;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_name"] = this.code_name;
        data["symbol_fc"] = this.symbol_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["numerical_order"] = this.numerical_order;
        data["warehouse_out_code"] = this.warehouse_out_code;
        data["warehouse_out_name"] = this.warehouse_out_name;
        data["warehouse_in_code"] = this.warehouse_in_code;
        data["warehouse_in_name"] = this.warehouse_in_name;
        data["customer_name"] = this.customer_name;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["xml_44d"] = this.xml_44d;
        data["voucher_year"] = this.voucher_year;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        if (Array.isArray(this.i44_D)) {
            data["i44_D"] = [];
            for (let item of this.i44_D)
                data["i44_D"].push(item.toJSON());
        }
        data["approve"] = this.approve;
        data["is_costing"] = this.is_costing;
        data["account_id"] = this.account_id;
        data["decentralization"] = this.decentralization;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): I44_M_ENTITY {
        const json = this.toJSON();
        let result = new I44_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II44_M_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    id?: number;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    numerical_order?: number | undefined;
    warehouse_out_code?: string | undefined;
    warehouse_out_name?: string | undefined;
    warehouse_in_code?: string | undefined;
    warehouse_in_name?: string | undefined;
    customer_name?: string | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_44d?: string | undefined;
    voucher_year?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    i44_D?: I44_D_ENTITY[] | undefined;
    approve?: boolean | undefined;
    is_costing?: boolean | undefined;
    account_id?: number | undefined;
    decentralization?: string | undefined;
    language_id?: number | undefined;
}

export class I45_D_ENTITY implements II45_D_ENTITY {
    id?: number;
    code?: string | undefined;
    numerical_order?: number | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    allocation_period?: number | undefined;
    period_number?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    expense_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code1?: string | undefined;
    construction_id?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;

    constructor(data?: II45_D_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.numerical_order = _data["numerical_order"];
            this.master_code = _data["master_code"];
            this.goods_code = _data["goods_code"];
            this.goods_name = _data["goods_name"];
            this.unit_code = _data["unit_code"];
            this.warehouse_code = _data["warehouse_code"];
            this.quantity = _data["quantity"];
            this.price_fc = _data["price_fc"];
            this.price = _data["price"];
            this.arise_fc = _data["arise_fc"];
            this.arise = _data["arise"];
            this.allocation_period = _data["allocation_period"];
            this.period_number = _data["period_number"];
            this.creditor_account = _data["creditor_account"];
            this.debitor_account = _data["debitor_account"];
            this.expense_account = _data["expense_account"];
            this.fee_code = _data["fee_code"];
            this.case_code = _data["case_code"];
            this.department_code = _data["department_code"];
            this.goods_code1 = _data["goods_code1"];
            this.construction_id = _data["construction_id"];
            this.conversion_factor = _data["conversion_factor"];
            this.conversion_quantity = _data["conversion_quantity"];
            this.conversion_price = _data["conversion_price"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.language_id = _data["language_id"];
            this.company_code = _data["company_code"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
        }
    }

    static fromJS(data: any): I45_D_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I45_D_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["numerical_order"] = this.numerical_order;
        data["master_code"] = this.master_code;
        data["goods_code"] = this.goods_code;
        data["goods_name"] = this.goods_name;
        data["unit_code"] = this.unit_code;
        data["warehouse_code"] = this.warehouse_code;
        data["quantity"] = this.quantity;
        data["price_fc"] = this.price_fc;
        data["price"] = this.price;
        data["arise_fc"] = this.arise_fc;
        data["arise"] = this.arise;
        data["allocation_period"] = this.allocation_period;
        data["period_number"] = this.period_number;
        data["creditor_account"] = this.creditor_account;
        data["debitor_account"] = this.debitor_account;
        data["expense_account"] = this.expense_account;
        data["fee_code"] = this.fee_code;
        data["case_code"] = this.case_code;
        data["department_code"] = this.department_code;
        data["goods_code1"] = this.goods_code1;
        data["construction_id"] = this.construction_id;
        data["conversion_factor"] = this.conversion_factor;
        data["conversion_quantity"] = this.conversion_quantity;
        data["conversion_price"] = this.conversion_price;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["language_id"] = this.language_id;
        data["company_code"] = this.company_code;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        return data;
    }

    clone(): I45_D_ENTITY {
        const json = this.toJSON();
        let result = new I45_D_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II45_D_ENTITY {
    id?: number;
    code?: string | undefined;
    numerical_order?: number | undefined;
    master_code?: string | undefined;
    goods_code?: string | undefined;
    goods_name?: string | undefined;
    unit_code?: string | undefined;
    warehouse_code?: string | undefined;
    quantity?: number | undefined;
    price_fc?: number | undefined;
    price?: number | undefined;
    arise_fc?: number | undefined;
    arise?: number | undefined;
    allocation_period?: number | undefined;
    period_number?: number | undefined;
    creditor_account?: string | undefined;
    debitor_account?: string | undefined;
    expense_account?: string | undefined;
    fee_code?: string | undefined;
    case_code?: string | undefined;
    department_code?: string | undefined;
    goods_code1?: string | undefined;
    construction_id?: string | undefined;
    conversion_factor?: number | undefined;
    conversion_quantity?: number | undefined;
    conversion_price?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    language_id?: number | undefined;
    company_code?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
}

export class I45_M_ENTITY implements II45_M_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    numerical_order?: number | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    is_in_progress?: boolean | undefined;
    is_cost_allocation?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_45d?: string | undefined;
    voucher_year?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    i45_D?: I45_D_ENTITY[] | undefined;
    id?: number;
    language_id?: number | undefined;

    constructor(data?: II45_M_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.company_code = _data["company_code"];
            this.numerical_order = _data["numerical_order"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.customer_code = _data["customer_code"];
            this.customer_name = _data["customer_name"];
            this.address = _data["address"];
            this.profession_code = _data["profession_code"];
            this.notes = _data["notes"];
            this.code_fc = _data["code_fc"];
            this.code_name = _data["code_name"];
            this.symbol_fc = _data["symbol_fc"];
            this.exchange_rate = _data["exchange_rate"];
            this.total_money_fc = _data["total_money_fc"];
            this.total_money = _data["total_money"];
            this.is_in_progress = _data["is_in_progress"];
            this.is_cost_allocation = _data["is_cost_allocation"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.xml_45d = _data["xml_45d"];
            this.voucher_year = _data["voucher_year"];
            this.goods_serial = _data["goods_serial"];
            this.goods_symbol = _data["goods_symbol"];
            if (Array.isArray(_data["i45_D"])) {
                this.i45_D = [] as any;
                for (let item of _data["i45_D"])
                    this.i45_D.push(I45_D_ENTITY.fromJS(item));
            }
            this.id = _data["id"];
            this.language_id = _data["language_id"];
        }
    }

    static fromJS(data: any): I45_M_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I45_M_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["company_code"] = this.company_code;
        data["numerical_order"] = this.numerical_order;
        data["voucher_code"] = this.voucher_code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["customer_code"] = this.customer_code;
        data["customer_name"] = this.customer_name;
        data["address"] = this.address;
        data["profession_code"] = this.profession_code;
        data["notes"] = this.notes;
        data["code_fc"] = this.code_fc;
        data["code_name"] = this.code_name;
        data["symbol_fc"] = this.symbol_fc;
        data["exchange_rate"] = this.exchange_rate;
        data["total_money_fc"] = this.total_money_fc;
        data["total_money"] = this.total_money;
        data["is_in_progress"] = this.is_in_progress;
        data["is_cost_allocation"] = this.is_cost_allocation;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["xml_45d"] = this.xml_45d;
        data["voucher_year"] = this.voucher_year;
        data["goods_serial"] = this.goods_serial;
        data["goods_symbol"] = this.goods_symbol;
        if (Array.isArray(this.i45_D)) {
            data["i45_D"] = [];
            for (let item of this.i45_D)
                data["i45_D"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["language_id"] = this.language_id;
        return data;
    }

    clone(): I45_M_ENTITY {
        const json = this.toJSON();
        let result = new I45_M_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II45_M_ENTITY {
    code?: string | undefined;
    company_code?: string | undefined;
    numerical_order?: number | undefined;
    voucher_code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    customer_code?: string | undefined;
    customer_name?: string | undefined;
    address?: string | undefined;
    profession_code?: string | undefined;
    notes?: string | undefined;
    code_fc?: string | undefined;
    code_name?: string | undefined;
    symbol_fc?: string | undefined;
    exchange_rate?: number | undefined;
    total_money_fc?: number | undefined;
    total_money?: number | undefined;
    is_in_progress?: boolean | undefined;
    is_cost_allocation?: boolean | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    xml_45d?: string | undefined;
    voucher_year?: number | undefined;
    goods_serial?: string | undefined;
    goods_symbol?: string | undefined;
    i45_D?: I45_D_ENTITY[] | undefined;
    id?: number;
    language_id?: number | undefined;
}

export class I45_Damaged_Tools_Equipment_ENTITY implements II45_Damaged_Tools_Equipment_ENTITY {
    numerical_order?: number;
    company_code?: string | undefined;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    i45_m_code?: string | undefined;
    i45_d_code?: string | undefined;
    quantity?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    goods_name?: string | undefined;
    xml?: string | undefined;

    constructor(data?: II45_Damaged_Tools_Equipment_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numerical_order = _data["numerical_order"];
            this.company_code = _data["company_code"];
            this.code = _data["code"];
            this.voucher_date = _data["voucher_date"] ? moment.parseZone(_data["voucher_date"].toString()) : <any>undefined;
            this.voucher_date_start = _data["voucher_date_start"] ? moment.parseZone(_data["voucher_date_start"].toString()) : <any>undefined;
            this.voucher_date_end = _data["voucher_date_end"] ? moment.parseZone(_data["voucher_date_end"].toString()) : <any>undefined;
            this.voucher_no = _data["voucher_no"];
            this.voucher_code = _data["voucher_code"];
            this.voucher_year = _data["voucher_year"];
            this.i45_m_code = _data["i45_m_code"];
            this.i45_d_code = _data["i45_d_code"];
            this.quantity = _data["quantity"];
            this.date_add = _data["date_add"] ? moment.parseZone(_data["date_add"].toString()) : <any>undefined;
            this.date_modified = _data["date_modified"] ? moment.parseZone(_data["date_modified"].toString()) : <any>undefined;
            this.account_code_add = _data["account_code_add"];
            this.account_code_modified = _data["account_code_modified"];
            this.goods_name = _data["goods_name"];
            this.xml = _data["xml"];
        }
    }

    static fromJS(data: any): I45_Damaged_Tools_Equipment_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new I45_Damaged_Tools_Equipment_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numerical_order"] = this.numerical_order;
        data["company_code"] = this.company_code;
        data["code"] = this.code;
        data["voucher_date"] = this.voucher_date ? this.voucher_date.toISOString(true) : <any>undefined;
        data["voucher_date_start"] = this.voucher_date_start ? this.voucher_date_start.toISOString(true) : <any>undefined;
        data["voucher_date_end"] = this.voucher_date_end ? this.voucher_date_end.toISOString(true) : <any>undefined;
        data["voucher_no"] = this.voucher_no;
        data["voucher_code"] = this.voucher_code;
        data["voucher_year"] = this.voucher_year;
        data["i45_m_code"] = this.i45_m_code;
        data["i45_d_code"] = this.i45_d_code;
        data["quantity"] = this.quantity;
        data["date_add"] = this.date_add ? this.date_add.toISOString(true) : <any>undefined;
        data["date_modified"] = this.date_modified ? this.date_modified.toISOString(true) : <any>undefined;
        data["account_code_add"] = this.account_code_add;
        data["account_code_modified"] = this.account_code_modified;
        data["goods_name"] = this.goods_name;
        data["xml"] = this.xml;
        return data;
    }

    clone(): I45_Damaged_Tools_Equipment_ENTITY {
        const json = this.toJSON();
        let result = new I45_Damaged_Tools_Equipment_ENTITY();
        result.init(json);
        return result;
    }
}

export interface II45_Damaged_Tools_Equipment_ENTITY {
    numerical_order?: number;
    company_code?: string | undefined;
    code?: string | undefined;
    voucher_date?: moment.Moment | undefined;
    voucher_date_start?: moment.Moment | undefined;
    voucher_date_end?: moment.Moment | undefined;
    voucher_no?: string | undefined;
    voucher_code?: string | undefined;
    voucher_year?: number | undefined;
    i45_m_code?: string | undefined;
    i45_d_code?: string | undefined;
    quantity?: number | undefined;
    date_add?: moment.Moment | undefined;
    date_modified?: moment.Moment | undefined;
    account_code_add?: string | undefined;
    account_code_modified?: string | undefined;
    goods_name?: string | undefined;
    xml?: string | undefined;
}

export class HRM_Workspace_Comment_Image_ENTITY implements IHRM_Workspace_Comment_Image_ENTITY {
    id?: number;
    comment_code?: string | undefined;
    image_base64?: string | undefined;
    name?: string | undefined;
    length?: number | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;

    constructor(data?: IHRM_Workspace_Comment_Image_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.comment_code = _data["comment_code"];
            this.image_base64 = _data["image_base64"];
            this.name = _data["name"];
            this.length = _data["length"];
            this.code = _data["code"];
            this.approve = _data["approve"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
        }
    }

    static fromJS(data: any): HRM_Workspace_Comment_Image_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Workspace_Comment_Image_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["comment_code"] = this.comment_code;
        data["image_base64"] = this.image_base64;
        data["name"] = this.name;
        data["length"] = this.length;
        data["code"] = this.code;
        data["approve"] = this.approve;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        return data;
    }

    clone(): HRM_Workspace_Comment_Image_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Workspace_Comment_Image_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Workspace_Comment_Image_ENTITY {
    id?: number;
    comment_code?: string | undefined;
    image_base64?: string | undefined;
    name?: string | undefined;
    length?: number | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
}

export class HRM_Workspace_Comment_Files_ENTITY implements IHRM_Workspace_Comment_Files_ENTITY {
    id?: number;
    comment_code?: string | undefined;
    url_file?: string | undefined;
    name?: string | undefined;
    path?: string | undefined;
    size?: number | undefined;
    description?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    fileName?: string | undefined;
    type_file?: string | undefined;
    length?: number | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;

    constructor(data?: IHRM_Workspace_Comment_Files_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.comment_code = _data["comment_code"];
            this.url_file = _data["url_file"];
            this.name = _data["name"];
            this.path = _data["path"];
            this.size = _data["size"];
            this.description = _data["description"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.fileName = _data["fileName"];
            this.type_file = _data["type_file"];
            this.length = _data["length"];
            this.code = _data["code"];
            this.approve = _data["approve"];
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
        }
    }

    static fromJS(data: any): HRM_Workspace_Comment_Files_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Workspace_Comment_Files_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["comment_code"] = this.comment_code;
        data["url_file"] = this.url_file;
        data["name"] = this.name;
        data["path"] = this.path;
        data["size"] = this.size;
        data["description"] = this.description;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["fileName"] = this.fileName;
        data["type_file"] = this.type_file;
        data["length"] = this.length;
        data["code"] = this.code;
        data["approve"] = this.approve;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        return data;
    }

    clone(): HRM_Workspace_Comment_Files_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Workspace_Comment_Files_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Workspace_Comment_Files_ENTITY {
    id?: number;
    comment_code?: string | undefined;
    url_file?: string | undefined;
    name?: string | undefined;
    path?: string | undefined;
    size?: number | undefined;
    description?: string | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    fileName?: string | undefined;
    type_file?: string | undefined;
    length?: number | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
}

export class HRM_Workspace_Comment_ENTITY implements IHRM_Workspace_Comment_ENTITY {
    id?: number;
    key_calendar?: string | undefined;
    code?: string | undefined;
    content?: string | undefined;
    account_create?: string | undefined;
    xml_image?: string | undefined;
    percent_done?: number | undefined;
    hrm_workspace_comment_images?: HRM_Workspace_Comment_Image_ENTITY[] | undefined;
    hRM_Workspace_Comment_Files?: HRM_Workspace_Comment_Files_ENTITY[] | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;

    constructor(data?: IHRM_Workspace_Comment_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key_calendar = _data["key_calendar"];
            this.code = _data["code"];
            this.content = _data["content"];
            this.account_create = _data["account_create"];
            this.xml_image = _data["xml_image"];
            this.percent_done = _data["percent_done"];
            if (Array.isArray(_data["hrm_workspace_comment_images"])) {
                this.hrm_workspace_comment_images = [] as any;
                for (let item of _data["hrm_workspace_comment_images"])
                    this.hrm_workspace_comment_images.push(HRM_Workspace_Comment_Image_ENTITY.fromJS(item));
            }
            if (Array.isArray(_data["hRM_Workspace_Comment_Files"])) {
                this.hRM_Workspace_Comment_Files = [] as any;
                for (let item of _data["hRM_Workspace_Comment_Files"])
                    this.hRM_Workspace_Comment_Files.push(HRM_Workspace_Comment_Files_ENTITY.fromJS(item));
            }
            this.approve = _data["approve"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
        }
    }

    static fromJS(data: any): HRM_Workspace_Comment_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Workspace_Comment_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key_calendar"] = this.key_calendar;
        data["code"] = this.code;
        data["content"] = this.content;
        data["account_create"] = this.account_create;
        data["xml_image"] = this.xml_image;
        data["percent_done"] = this.percent_done;
        if (Array.isArray(this.hrm_workspace_comment_images)) {
            data["hrm_workspace_comment_images"] = [];
            for (let item of this.hrm_workspace_comment_images)
                data["hrm_workspace_comment_images"].push(item.toJSON());
        }
        if (Array.isArray(this.hRM_Workspace_Comment_Files)) {
            data["hRM_Workspace_Comment_Files"] = [];
            for (let item of this.hRM_Workspace_Comment_Files)
                data["hRM_Workspace_Comment_Files"].push(item.toJSON());
        }
        data["approve"] = this.approve;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        return data;
    }

    clone(): HRM_Workspace_Comment_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Workspace_Comment_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Workspace_Comment_ENTITY {
    id?: number;
    key_calendar?: string | undefined;
    code?: string | undefined;
    content?: string | undefined;
    account_create?: string | undefined;
    xml_image?: string | undefined;
    percent_done?: number | undefined;
    hrm_workspace_comment_images?: HRM_Workspace_Comment_Image_ENTITY[] | undefined;
    hRM_Workspace_Comment_Files?: HRM_Workspace_Comment_Files_ENTITY[] | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
}

export class HRM_Workspace_ENTITY implements IHRM_Workspace_ENTITY {
    id?: number | undefined;
    key?: string | undefined;
    title?: string | undefined;
    start?: moment.Moment | undefined;
    allDay?: boolean | undefined;
    wkName?: string | undefined;
    wkHour?: number | undefined;
    className?: string | undefined;
    idCalendar?: string | undefined;
    idEmployee?: string | undefined;
    idWorkingTime?: string | undefined;
    description?: string | undefined;
    master_id?: string | undefined;
    percent_done?: number | undefined;
    constHour?: number | undefined;
    hRM_TimeSheet_ENTITY?: HRM_TimeSheet_ENTITY;
    hrm_workspace_comment?: HRM_Workspace_Comment_ENTITY[] | undefined;
    html_comment?: string | undefined;
    color?: string | undefined;
    total_comment_load?: number | undefined;
    xml_comment?: string | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;

    constructor(data?: IHRM_Workspace_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key = _data["key"];
            this.title = _data["title"];
            this.start = _data["start"] ? moment.parseZone(_data["start"].toString()) : <any>undefined;
            this.allDay = _data["allDay"];
            this.wkName = _data["wkName"];
            this.wkHour = _data["wkHour"];
            this.className = _data["className"];
            this.idCalendar = _data["idCalendar"];
            this.idEmployee = _data["idEmployee"];
            this.idWorkingTime = _data["idWorkingTime"];
            this.description = _data["description"];
            this.master_id = _data["master_id"];
            this.percent_done = _data["percent_done"];
            this.constHour = _data["constHour"];
            this.hRM_TimeSheet_ENTITY = _data["hRM_TimeSheet_ENTITY"] ? HRM_TimeSheet_ENTITY.fromJS(_data["hRM_TimeSheet_ENTITY"]) : <any>undefined;
            if (Array.isArray(_data["hrm_workspace_comment"])) {
                this.hrm_workspace_comment = [] as any;
                for (let item of _data["hrm_workspace_comment"])
                    this.hrm_workspace_comment.push(HRM_Workspace_Comment_ENTITY.fromJS(item));
            }
            this.html_comment = _data["html_comment"];
            this.color = _data["color"];
            this.total_comment_load = _data["total_comment_load"];
            this.xml_comment = _data["xml_comment"];
            this.code = _data["code"];
            this.approve = _data["approve"];
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
        }
    }

    static fromJS(data: any): HRM_Workspace_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Workspace_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["title"] = this.title;
        data["start"] = this.start ? this.start.toISOString(true) : <any>undefined;
        data["allDay"] = this.allDay;
        data["wkName"] = this.wkName;
        data["wkHour"] = this.wkHour;
        data["className"] = this.className;
        data["idCalendar"] = this.idCalendar;
        data["idEmployee"] = this.idEmployee;
        data["idWorkingTime"] = this.idWorkingTime;
        data["description"] = this.description;
        data["master_id"] = this.master_id;
        data["percent_done"] = this.percent_done;
        data["constHour"] = this.constHour;
        data["hRM_TimeSheet_ENTITY"] = this.hRM_TimeSheet_ENTITY ? this.hRM_TimeSheet_ENTITY.toJSON() : <any>undefined;
        if (Array.isArray(this.hrm_workspace_comment)) {
            data["hrm_workspace_comment"] = [];
            for (let item of this.hrm_workspace_comment)
                data["hrm_workspace_comment"].push(item.toJSON());
        }
        data["html_comment"] = this.html_comment;
        data["color"] = this.color;
        data["total_comment_load"] = this.total_comment_load;
        data["xml_comment"] = this.xml_comment;
        data["code"] = this.code;
        data["approve"] = this.approve;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        return data;
    }

    clone(): HRM_Workspace_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Workspace_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Workspace_ENTITY {
    id?: number | undefined;
    key?: string | undefined;
    title?: string | undefined;
    start?: moment.Moment | undefined;
    allDay?: boolean | undefined;
    wkName?: string | undefined;
    wkHour?: number | undefined;
    className?: string | undefined;
    idCalendar?: string | undefined;
    idEmployee?: string | undefined;
    idWorkingTime?: string | undefined;
    description?: string | undefined;
    master_id?: string | undefined;
    percent_done?: number | undefined;
    constHour?: number | undefined;
    hRM_TimeSheet_ENTITY?: HRM_TimeSheet_ENTITY;
    hrm_workspace_comment?: HRM_Workspace_Comment_ENTITY[] | undefined;
    html_comment?: string | undefined;
    color?: string | undefined;
    total_comment_load?: number | undefined;
    xml_comment?: string | undefined;
    code?: string | undefined;
    approve?: boolean | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
}

export class HRM_Workspace_Master_ENTITY implements IHRM_Workspace_Master_ENTITY {
    key?: string | undefined;
    hRM_Workspace?: HRM_Workspace_ENTITY[] | undefined;
    xmL_Workspace?: string | undefined;
    name?: string | undefined;
    code?: string | undefined;
    type?: string | undefined;
    check_in?: number | undefined;
    check_out?: number | undefined;
    timesheet_early?: number | undefined;
    late_timesheet?: number | undefined;
    day_off?: number | undefined;
    indexRow?: number | undefined;
    approve?: boolean | undefined;
    data_month?: moment.Moment | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;

    constructor(data?: IHRM_Workspace_Master_ENTITY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            if (Array.isArray(_data["hRM_Workspace"])) {
                this.hRM_Workspace = [] as any;
                for (let item of _data["hRM_Workspace"])
                    this.hRM_Workspace.push(HRM_Workspace_ENTITY.fromJS(item));
            }
            this.xmL_Workspace = _data["xmL_Workspace"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.check_in = _data["check_in"];
            this.check_out = _data["check_out"];
            this.timesheet_early = _data["timesheet_early"];
            this.late_timesheet = _data["late_timesheet"];
            this.day_off = _data["day_off"];
            this.indexRow = _data["indexRow"];
            this.approve = _data["approve"];
            this.data_month = _data["data_month"] ? moment.parseZone(_data["data_month"].toString()) : <any>undefined;
            this.datE_ADD = _data["datE_ADD"] ? moment.parseZone(_data["datE_ADD"].toString()) : <any>undefined;
            this.datE_EDIT = _data["datE_EDIT"] ? moment.parseZone(_data["datE_EDIT"].toString()) : <any>undefined;
            this.accounT_ID = _data["accounT_ID"];
            this.notes = _data["notes"];
            this.decentralization = _data["decentralization"];
        }
    }

    static fromJS(data: any): HRM_Workspace_Master_ENTITY {
        data = typeof data === 'object' ? data : {};
        let result = new HRM_Workspace_Master_ENTITY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        if (Array.isArray(this.hRM_Workspace)) {
            data["hRM_Workspace"] = [];
            for (let item of this.hRM_Workspace)
                data["hRM_Workspace"].push(item.toJSON());
        }
        data["xmL_Workspace"] = this.xmL_Workspace;
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["check_in"] = this.check_in;
        data["check_out"] = this.check_out;
        data["timesheet_early"] = this.timesheet_early;
        data["late_timesheet"] = this.late_timesheet;
        data["day_off"] = this.day_off;
        data["indexRow"] = this.indexRow;
        data["approve"] = this.approve;
        data["data_month"] = this.data_month ? this.data_month.toISOString(true) : <any>undefined;
        data["datE_ADD"] = this.datE_ADD ? this.datE_ADD.toISOString(true) : <any>undefined;
        data["datE_EDIT"] = this.datE_EDIT ? this.datE_EDIT.toISOString(true) : <any>undefined;
        data["accounT_ID"] = this.accounT_ID;
        data["notes"] = this.notes;
        data["decentralization"] = this.decentralization;
        return data;
    }

    clone(): HRM_Workspace_Master_ENTITY {
        const json = this.toJSON();
        let result = new HRM_Workspace_Master_ENTITY();
        result.init(json);
        return result;
    }
}

export interface IHRM_Workspace_Master_ENTITY {
    key?: string | undefined;
    hRM_Workspace?: HRM_Workspace_ENTITY[] | undefined;
    xmL_Workspace?: string | undefined;
    name?: string | undefined;
    code?: string | undefined;
    type?: string | undefined;
    check_in?: number | undefined;
    check_out?: number | undefined;
    timesheet_early?: number | undefined;
    late_timesheet?: number | undefined;
    day_off?: number | undefined;
    indexRow?: number | undefined;
    approve?: boolean | undefined;
    data_month?: moment.Moment | undefined;
    datE_ADD?: moment.Moment | undefined;
    datE_EDIT?: moment.Moment | undefined;
    accounT_ID?: number | undefined;
    notes?: string | undefined;
    decentralization?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new ApiException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

let dataUploads: any[] = [];