@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<!DOCTYPE html>
@*<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="~/js/face-api.min.js"></script>
    <script src="~/js/script.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        canvas {
            position: absolute;
        }
    </style>
</head>
<body>
    <video id="video" width="720" height="560" autoplay muted></video>
</body>
</html>*@
@using HRMS.Intfs.Employee.Dto;
@{
    HRM_Employee_Check_In_Out_ENTITY input = ViewBag.Customers;
}
<!DOCTYPE html>
<html>

<head>

    <script type="text/javascript" src="/js/jquery-2.1.1.min.js"></script>
    <script src="/js/materialize.min.js"></script>
    <script src="/js/face-api/face-api.js"></script>
    <script src="/js/face-api/commons.js"></script>
    <script src="/js/script.js"></script>
    <script src="/js/face-api/bbt.js"></script>
    <link rel="stylesheet" href="/css/face-api/styles.css">
    <script>
        let dif = @ViewBag.dif/100;
        let age = @ViewBag.age;
        let age1 = @ViewBag.age - 1;
        let age2 = @ViewBag.age + 1;
        let gender = '@ViewBag.gender';
    </script>
    <script>
    </script>
</head>

<body>
    <div id="navbar"></div>
    <div class="center-content page-container">
        <div>
            <div class="progress" id="loader">
                <div class="indeterminate"></div>
            </div>
            <div class="row side-by-side">
                <div class="center-content">
                    @{
                        if (input.hRM_Employee_Check_In_Out_Image_Trainings != null && ViewBag.setting == 0)
                        {
                                                                                            <img id="face-left" style="width:200px;height:auto" src="@input.hRM_Employee_Check_In_Out_Image_Trainings.left_base64" class="margin" />
                                                                                            <img id="face-right" style="width:200px;height:auto" src="@input.hRM_Employee_Check_In_Out_Image_Trainings.right_base64" class="margin" />
                                                                                            <img id="face-bottom" style="width:200px;height:auto" src="@input.hRM_Employee_Check_In_Out_Image_Trainings.bottom_base64" class="margin" />
                                                                                            <img id="face-top" style="width:200px;height:auto" src="@input.hRM_Employee_Check_In_Out_Image_Trainings.top_base64" class="margin" />
                                                                                            <img id="my-face" style="width:200px;height:auto" src="@input.hRM_Employee_Check_In_Out_Image_Trainings.top_base64" class="margin" />
                        }
                        if (input.hRM_Employee_Check_In_Out_Image_Trainings != null && ViewBag.setting == 1)
                        {
                                                                                            <img id="face-left" style="width:200px;height:auto" src="@input.hRM_Employee_Check_In_Out_Image_Trainings.left_base64" class="margin" />
                                                                                            <img id="face-right" style="width:200px;height:auto" src="@input.hRM_Employee_Check_In_Out_Image_Trainings.right_base64" class="margin" />
                                                                                            <img id="face-bottom" style="width:200px;height:auto" src="@input.hRM_Employee_Check_In_Out_Image_Trainings.bottom_base64" class="margin" />
                                                                                            <img id="face-top" style="width:200px;height:auto" src="@input.hRM_Employee_Check_In_Out_Image_Trainings.top_base64" class="margin" />
                                                                                                                   <img id="my-face" style="width:200px;height:auto" src="@input.hRM_Employee_Check_In_Out_Image_Trainings.top_base64" class="margin" />

                                            }
                    }

                    <img id="face1" src="" class="margin" />
                </div>
                <div class="center-content">
                    <img id="face2" src="" class="margin" />
                    <div id="selectList2"></div>
                </div>
            </div>
            <div class="row">
                <label for="distance">Distance:</label>
                <input disabled value="-" id="distance" type="text" class="bold value-distance" style="width: 550px;">
            </div>

        </div>
    </div>

    <script>
        const threshold = 0.6;
        var setting = @ViewBag.setting;
        let descriptors = {
            desc1: null,
            desc2: null,
            desc3: null,
            desc4: null,
            desc5: null
        }

        async function updateResult() {
            try {
                if (setting == 1) await runTraining();
                else {

                    const optionsSSD = getFaceDetectorOptions()
                    var check_obj = {}
        
                    const results = await faceapi.detectAllFaces(document.getElementById('my-face'), optionsSSD)
                        .withFaceLandmarks()
                        .withAgeAndGender(); 
                    var _age, _gender, _genderProbability;

                    const resizedResults = faceapi.resizeResults(results, document.getElementById('my-face'));
                   
                    resizedResults.forEach(result => {
                        const { age, gender, genderProbability } = result;
                        _age = age ? age : 0;
                        _gender = gender ? gender : gender;
                        _genderProbability = genderProbability ? genderProbability : genderProbability;
                    })
                    let  input = $('#my-face')[0];
                    descriptors.desc1 = await faceapi.computeFaceDescriptor(input);

                    descriptors.desc2 = await faceapi.computeFaceDescriptor($('#face-left')[0]);
             
                    let distance = faceapi.utils.round(
                        faceapi.euclideanDistance(descriptors.desc1, descriptors.desc2)
                    )
                    
                    if (distance <= dif && (_age >= age1 || _age <= age2 || age == 0) && (_gender == gender || gender == '')) {
                        postMessageWebView({
                            status: 0,
                            message: 'OK',
                            employee_code: "",
                            distance: distance,
                            age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        });
                        return {
                            status: 0,
                            message: 'OK',
                            employee_code: "",
                            distance: distance,
                            age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        };
                    } else {
                        check_obj = {
                            status: 2,
                            message: 'Failed desc2',
                            employee_code: "",
                            distance: distance,
                             age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        };
                    }
                           descriptors.desc3 = await faceapi.computeFaceDescriptor($('#face-right')[0]);
                  
                    distance = faceapi.utils.round(
                        faceapi.euclideanDistance(descriptors.desc1, descriptors.desc3)
                    )
                    if (distance <= dif && (_age >= age1 || _age <= age2 || age == 0) && (_gender == gender || gender == '')) {
                        postMessageWebView({
                            status: 0,
                            message: 'OK',
                            employee_code: "",
                            distance: distance,
                              age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        });
                        return {
                            status: 0,
                            message: 'OK',
                            employee_code: "",
                            distance: distance,
                              age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        };
                    } else {
                        check_obj = {
                            status: 2,
                            message: 'Failed desc3',
                            employee_code: "",
                            distance: distance,
                             age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        };
                    }
                      descriptors.desc4 = await faceapi.computeFaceDescriptor($('#face-top')[0]);
                    distance = faceapi.utils.round(
                        faceapi.euclideanDistance(descriptors.desc1, descriptors.desc4)
                    )
                    if (distance <= dif && (_age >= age1 || _age <= age2 || age == 0) && (_gender == gender || gender == '')) {
                        postMessageWebView({
                            status: 0,
                            message: 'OK',
                            employee_code: "",
                            distance: distance,
                             age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        });
                        return {
                            status: 0,
                            message: 'OK',
                            employee_code: "",
                            distance: distance,
                             age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        };
                    }
                    else {
                        check_obj = {
                            status: 2,
                            message: 'Failed desc4',
                            employee_code: "",
                            distance: distance,
                              age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        };
                    }
                    descriptors.desc5 = await faceapi.computeFaceDescriptor($('#face-bottom')[0]);

                    distance = faceapi.utils.round(
                        faceapi.euclideanDistance(descriptors.desc1, descriptors.desc5)
                    )
                    if (distance <= dif && (_age >= age1 || _age <= age2 || age == 0) && (_gender == gender || gender == '')) {
                        postMessageWebView({
                            status: 0,
                            message: 'OK',
                            employee_code: "",
                            distance: distance,
                              age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        });
                        return {
                            status: 0,
                            message: 'OK',
                            employee_code: "",
                            distance: distance,
                              age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        };
                    } else {
                        check_obj = {
                            status: 4,
                            message: 'Failed desc5',
                            employee_code: "",
                            distance: distance,
                             age:_age,
                            gender_probability: _genderProbability,
                            gender: _gender
                        };
                    } 
                     postMessageWebView(check_obj);
                }
            } catch (err) {
                return {status:-1,message:'Loi check face:'+err.message,error:JSON.stringify(err)};
            }
        }

        async function onSelectionChanged(which) {
            descriptors.desc2 = await faceapi.computeFaceDescriptor($('#face-left')[0]);
            descriptors.desc3 = await faceapi.computeFaceDescriptor($('#face-right')[0]);
            descriptors.desc4 = await faceapi.computeFaceDescriptor($('#face-top')[0]);
            descriptors.desc5 = await faceapi.computeFaceDescriptor($('#face-bottom')[0]);
            //updateResult();
        }
        async function test() {
            return "ok"
        }
        async function run() {
            await runSetting();
            await faceapi.loadFaceRecognitionModel();
            $('#loader').hide();
     
            await updateResult();
        }
        async function runTraining() {
            $('#loader').hide();
            const optionsSSD = getFaceDetectorOptions();
            let param = {
                employee_code:'@input.employee_code'
            };
            //=====================left
            let results = await faceapi.detectAllFaces(document.getElementById('face-left'), optionsSSD).withFaceLandmarks().withAgeAndGender()

            let resizedResults = faceapi.resizeResults(results, document.getElementById('face-left'));
            var _age, _gender, _genderProbability;
            resizedResults.forEach(result => {
                const { age, gender, genderProbability } = result;
                _age = age ? age : 0;
                _gender = gender ? gender : gender;
                _genderProbability = genderProbability ? genderProbability : genderProbability;
            })
            if (!_age || !_gender || !_genderProbability) {
                postMessageWebView({
                    status: -1,
                    message: 'Failed image left'
                });
                return;
            } else {
                param['img_left_age'] = _age;
                param['img_left_gender'] = _gender;
                param['img_left_gender_probability'] = _genderProbability;
            }
            //=====================right
            results = await faceapi.detectAllFaces(document.getElementById('face-right'), optionsSSD)
                .withFaceLandmarks()
                .withAgeAndGender()
            resizedResults = faceapi.resizeResults(results, document.getElementById('face-right'));
            resizedResults.forEach(result => {
                const { age, gender, genderProbability } = result;
                _age = age ? age : 0;
                _gender = gender ? gender : gender;
                _genderProbability = genderProbability ? genderProbability : genderProbability;
            })
            if (!_age || !_gender || !_genderProbability) {
                postMessageWebView({
                    status: -1,
                    message: 'Failed image right'
                });
                return;
            } else {
                param['img_right_age'] = _age;
                param['img_right_gender'] = _gender;
                param['img_right_gender_probability'] = _genderProbability;
            }
            //=====================bottom
            results = await faceapi.detectAllFaces(document.getElementById('face-bottom'), optionsSSD)
                .withFaceLandmarks()
                .withAgeAndGender()
            resizedResults = faceapi.resizeResults(results, document.getElementById('face-bottom'));
            resizedResults.forEach(result => {
                const { age, gender, genderProbability } = result;
                _age = age ? age : 0;
                _gender = gender ? gender : gender;
                _genderProbability = genderProbability ? genderProbability : genderProbability;
            })
            if (!_age || !_gender || !_genderProbability) {
                postMessageWebView({
                    status: -1,
                    message: 'Failed image bottom'
                });
                return;
            } else {
                param['img_bottom_age'] = _age;
                param['img_bottom_gender'] = _gender;
                param['img_bottom_gender_probability'] = _genderProbability;
            }
            //=====================top
            results = await faceapi.detectAllFaces(document.getElementById('face-top'), optionsSSD)
                .withFaceLandmarks()
                .withAgeAndGender()
            resizedResults = faceapi.resizeResults(results, document.getElementById('face-top'));
            resizedResults.forEach(result => {
                const { age, gender, genderProbability } = result;
                _age = age ? age : 0;
                _gender = gender ? gender : gender;
                _genderProbability = genderProbability ? genderProbability : genderProbability;
            })
            if (!_age || !_gender || !_genderProbability) {
                postMessageWebView({
                    status: -1,
                    message: 'Failed image top'
                });
                return;
            } else {
                param['img_top_age'] = _age;
                param['img_top_gender'] = _gender;
                param['img_top_gender_probability'] = _genderProbability;
            }
            $.ajax({
              url: '/FaceRecognition/HRM_Employee_Check_In_Out_Face_Training_Update',
              type: 'POST',
              dataType: 'json',
              data: JSON.stringify(param),
              contentType: 'application/json',
              success: function(response) {
                  postMessageWebView({
                        status: response.status,
                        message: response.message,
                        employee_code: "",
                        distance: distance,
                        age: 0,
                        gender_probability: 0,
                        gender: ""
                    });
              },
              error: function(xhr, status, error) {
                // Handle the error
              }
            });

            console.log(param)
        }
        function getBase64CheckInTemp(employee_code) {
            $.ajax({
              url: '/FaceRecognition/GetBase64CheckInTemp?employee_code='+employee_code,
              type: 'POST',
              contentType: 'application/json',
              success: function(response) {
                 console.log(response)
                 $('#my-face').attr('src', response);

              },
              error: function(xhr, status, error) {
                // Handle the error
              }
            });
        }
        function postMessageWebView(obj) {
            console.log(obj)

            $('body').html(JSON.stringify(obj))
            //$('.value-distance').val(JSON.stringify(obj)).change()
            //try {
            //    window.ReactNativeWebView.postMessage(JSON.stringify(obj));
            //} catch { }
        }
    </script>
     <script>
                                $(document).ready(function() {
                                    run();
                                })
                            </script>
</body>

</html>